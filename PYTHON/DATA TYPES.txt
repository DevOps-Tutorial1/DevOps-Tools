

=>DATA TYPES:
============
        Python has five standard Data Types:

            1. Numbers
            2. String
            3. List
            4. Tuple
            5. Dictionary
			6. set
			7. frozen set
			
        Python sets the variable type based on the value that is assigned to it. 
		Unlike more riggers languages, Python will change the variable type if the variable value is set to another value. 
		
 1) NUMBERS:
 -----------
           Python numbers variables are created by the standard Python method:

        > var = 382
    
	Most of the time using the standard Python number type is fine. 
	Python will automatically convert a number from one type to another if it needs. But, under certain circumstances 
	that a specific number type is needed (ie. complex, hexidecimal), the format can be forced into a format 
	by using additional syntax in the table below:

Type	 	 	Format	 	 	    Description
----            --------            ------------
int	 	 	    a = 10	 	 	     Signed Integer
long	 	 	a = 345L	 	 	(L) Long integers, they can also be represented in octal and hexadecimal
float	 	 	a = 45.67	 	 	(.) Floating point real values
complex	 	 	a = 3.14J	 	 	(J) Contains integer in the range 0 to 255.
 	 	 	 	 	 	 
Most of the time Python will do variable conversion automatically. You can also use Python conversion functions 
(int(), long(), float(), complex()) to convert data from one type to another. In addition, the type 
function returns information about how your data is stored within a variables.
		  
2) STRING:
----------
          A string is usually a bit of text you want to display to someone, or "export" out of the program you are writing.
		  Python knows you want something to be a string when you put either " (double-quotes) or ' 
		  (single-quotes) around the text.

		  A string is a sequence of characters.

          A character is simply a symbol. For example, the English language has 26 characters.

          Computers do not deal with characters, they deal with numbers (binary). 
		  Even though you may see characters on your screen, internally it is stored and manipulated as a combination
		  of 0's and 1's.

          This conversion of character to a number is called encoding, and the reverse process is decoding. 
		  ASCII and Unicode are some of the popular encoding used.

          In Python, string is a sequence of Unicode character. Unicode was introduced to include every character 
		  in all languages and bring uniformity in encoding. You can learn more about Unicode from here.
3) TOUPLE:
---------
          
         A tuple is a sequence of immutable Python objects. Tuples are sequences, just like lists. 
		 The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses,
		 whereas lists use square brackets. Creating a tuple is as simple as putting different comma-separated values.
		 
		 A tuple is a sequence of immutable Python objects. Tuples are sequences, just like lists. 
		 The differences between tuples and lists are, the tuples cannot be changed unlike lists and 
		 tuples use parentheses, whereas lists use square brackets.

         Creating a tuple is as simple as putting different comma-separated values. Optionally you can put 
		 these comma-separated values between parentheses also.
		 
		 Here are some advantages of tuples over lists:
		 ----------------------------------------------

    > Elements to a tuple. Tuples have no append or extend method.
    > Elements cannot be removed from a tuple.
    > You can find elements in a tuple, since this doesn’t change the tuple.
    > You can also use the in operator to check if an element exists in the tuple.
    > Tuples are faster than lists. If you’re defining a constant set of values and all you’re ever going 
      to do with it is iterate through it, use a tuple instead of a list.
    > It makes your code safer if you “write-protect” data that does not need to be changed.
	
4)LIST:
-------
       A list is a data structure in Python that is a mutable, or changeable, ordered sequence of elements. 
	   Each element or value that is inside of a list is called an item. ... In this tutorial, we'll go through 
	   some of the ways that we can work with lists in Python.
	   
	   list (also called an array in other programming languages) is a tool that can be used to store multiple 
	   pieces of information at once. It can also be defined as a variable containing multiple other variables.
	   A list consists of a numbers paired with items. Each item can be retrieved by its paired number.
		
	List comprehension:
    ------------------- 
         List comprehension is an elegant way to define and create list in Python.
	     These lists have often the qualities of sets, but are not in all cases sets.
		 List comprehension is a complete substitute for the lambda function as well as
	     the functions map(), filter() and reduce().
			   
    How to create a list?
	--------------------
         In Python programming, a list is created by placing all the items (elements) inside a square bracket [ ],
		 separated by commas

    List Index:
	----------
         We can use the index operator [] to access an item in a list. Index starts from 0. So, a list having 5 elements 
		 will have index from 0 to 4.

         Trying to access an element other that this will raise an IndexError. The index must be an integer.
		 We can't use float or other types, this will result into TypeError.
		 
5)DICTIONARY:
------------
         A dictionary is an associative array (also known as hashes). Any key of the dictionary is associated
		 (or mapped) to a value. The values of a dictionary can be any Python data type. So dictionaries are
		 unordered key-value-pairs.
		 
		 A dictionary in Python is a collection of unordered values accessed by key rather than by index. 
		 The keys have to be hashable: integers, floating point numbers, strings, tuples, and frozensets are hashable, 
		 while lists, dictionaries, and sets other than frozensets are not.
		 
		 How to create a dictionary?:
		 ----------------------------
         Creating a dictionary is as simple as placing items inside curly braces {} separated by comma.

         An item has a key and the corresponding value expressed as a pair, key: value.

         While values can be of any data type and can repeat, keys must be of immutable type 
		 (string, number or tuple with immutable elements) and must be unique.
		 
		 How to access elements from a dictionary?:
		 ----------------------------------------
         While indexing is used with other container types to access values, dictionary uses keys. 
		 Key can be used either inside square brackets or with the get() method.

         The difference while using get() is that it returns None instead of KeyError, if the key is not found.
		 
		 How to delete or remove elements from a dictionary?:
		 --------------------------------------------------
         We can remove a particular item in a dictionary by using the method pop(). This method removes as item 
		 with the provided key and returns the value.

         The method, popitem() can be used to remove and return an arbitrary item (key, value) form the dictionary. 
		 All the items can be removed at once using the clear() method.
		 
6)SET:
-----  
       A set contains an unordered collection of unique and immutable objects. The set data type is, as the name implies,
	   a Python implementation of the sets as they are known from mathematics.
	   
	   What is a set in Python?:
	   -------------------------
       A set is an unordered collection of items. Every element is unique (no duplicates) and must be immutable 
	   (which cannot be changed).

       However, the set itself is mutable. We can add or remove items from it.

       Sets can be used to perform mathematical set operations like union, intersection, symmetric difference etc.
	   
	   How to create a set?:
	   --------------------
       A set is created by placing all the items (elements) inside curly braces {}, separated by comma or by using
	   the built-in function set().

       It can have any number of items and they may be of different types (integer, float, tuple, string etc.). 
	   But a set cannot have a mutable element, like list, set or dictionary, as its element.


	   
7)frozen set:
------------
        A set object is an unordered collection of immutable values. ... The frozenset type is immutable and 
		hashable -- its contents cannot be altered after is created; however, it can be used as a dictionary key
		or as an element of another set.
		
		Python frozenset() The frozenset() method returns an immutable frozenset object initialized with 
		elements from the given iterable. Frozen set is just an immutable version of a Python set object. 
		While, elements of a set can be modified at any time, elements of frozen set remains the same after creation.
		
		Frozen set is just an immutable version of a Python set object. While, elements of a set can be modified 
		at any time, elements of frozen set remains the same after creation.

       Due to this, frozen sets can be used as key in Dictionary or as element of another set. But like sets, 
	   it is not ordered (the elements can be set at any index).

-> Difference beetween list and tuples?
    ----------------------------------
	 TUPLES:
	 ------
	        > The literal syntax of tuples is shown by parentheses.
            > Tuples are immutable. By “immutable,” it is meant that once they are created, they do not support
			   any additional operations which might be added to the language and cannot be modified after they are created.
            > Tuples are heterogeneous. “Heterogeneous” means that generally tuples are a sequence type which 
			  have varied and different types, or the entries made have separate meanings.
            > A tuple is considered a coherent unit.
            > Tuples shows structure.

    LISTS:
	------
	        > The literal syntax of lists is shown by square brackets.
            > Lists are mutable. By “mutable” it is meant that these objects are capable of supporting 
			   additional operations. So the list sequence is a type of sequence which supports operations when it is 
			   added to the language even after the creation.
            > They are homogeneous. By “homogeneous,” it means that these sequence types deal with the similar or same
     			kinds of things. One has to deal individually with the items.
            > Lists show order.

-> Difference beteen LIST and DICTIONARY:
  ---------------------------------------
    LIST:
	-----
	     > They maintain their ordering unless explicitly re-ordered (for example, by sorting the list).
         > They can be of any type, and types can be mixed.
         > They are accessed via numeric (zero based) indices.
		 
	DICTIONARY:
	-----------
	     > Every entry has a key and a value
         > Ordering is not guaranteed
         > Elements are accessed using key values
         > Key values can be of any hashtable type (i.e. not a dict) and types can be mixed
         > Values can be of any type (including other dict’s), and types can be mixed
	
	
->Difference  between Mutable and immutable:
--------------------------------------------
  Mutable:
  --------
          Mutable objects are great for efficiently passing around data. 
		  Let’s say object anton and berta have access to the same list. 
		  anton adds “lemons” to the list, and berta automatically has access to this information.
          If both would use a tuple, anton would have to copy the entries of his shopping-tuple, 
		  add the new element, create a new tuple, then send that to berta. Even if both can talk directly, 
		  that is a lot of work.
		  mutable objects when having to deal with growing data. 
		  For example, when parsing a file, you may append information from each line to a list. 
		  Custom objects are usually mutable, buffering data, adjusting to new conditions and so on. 
		  In general, whenever something can change, mutable objects are much easier.

 Immutable:
----------
          Immutable objects are great for working with the data. 
		  So berta is going to buy all that stuff - she can read everything, make a plan, 
		  and does not have to double check for changes. If next week, she needs to buy more stuff for 
		  the same shopping-tuple, berta just reuses the old plan. She has the guarantee that anton cannot change
		  anything unnoticed.
          If both would use a list, berta could not plan ahead. She has no guarantee that “lemons” are still on  
		  the list when she arrives at the shop. She has no guarantee that next week, she can just repeat 
		  what was appropriate last week. 
		  Immutable objects are sparingly used in python - usually, it is implicit such as using int or other basic,
		  immutable types. Often, you will be using mutable types as de-facto 
		  immutable - many lists are filled at construction and never changed. 
		  There is also no immutable dict. You should enforce immutability to optimise algorithms, e.g. to do caching.
		  
s