
Python :-
------
Q1. What are the key features of Python?

Ans: These are the few key features of Python:

Python is an interpreted language. That means that, unlike languages like C and its variants, Python does not need to be 
compiled before it is run. Other interpreted languages include PHP and Ruby.
Python is dynamically typed, this means that you don’t need to state the types of variables when you declare them or 
anything like that. You can do things like x=111 and then x="I'm a string" without error
Python is well suited to object orientated programming in that it allows the definition of classes along with composition 
and inheritance. Python does not have access specifiers (like C++’s public, private), the justification for this point is 
given as “we are all adults here”
In Python, functions are first-class objects. This means that they can be assigned to variables, returned from other functions 
and passed into functions. Classes are also first class objects
Writing Python code is quick but running it is often slower than compiled languages. Fortunately，Python allows the inclusion
of C based extensions so bottlenecks can be optimized away and often are. The numpy package is a good example of this, it’s 
really quite quick because a lot of the number crunching it does isn’t actually done by Python
Python finds use in many spheres – web applications, automation, scientific modelling, big data applications and many more. 
It’s also often used as “glue” code to get other languages and components to play nice.

Q2. What is the difference between deep and shallow copy?

Ans: Shallow copy is used when a new instance type gets created and it keeps the values that are copied in the new instance.
Shallow copy is used to copy the reference pointers just like it copies the values. These references point to the original 
objects and the changes made in any member of the class will also affect the original copy of it. Shallow copy allows faster 
execution of the program and it depends on the size of the data that is used.

Deep copy is used to store the values that are already copied. Deep copy doesn’t copy the reference pointers to the objects. 
It makes the reference to an object and the new object that is pointed by some other object gets stored. The changes made in 
the original copy won’t affect any other copy that uses the object. Deep copy makes execution of the program slower due to 
making certain copies for each object that is been called.

Q3. What is the difference between list and tuples?

Ans: Lists are mutable i.e they can be edited. Syntax: list_1 = [10, ‘Chelsea’, 20]

Tuples are immutable (tuples are lists which can’t be edited). Syntax: tup_1 = (10, ‘Chelsea’ , 20)

Q4. How is Multithreading achieved in Python?
Ans: 

Python has a multi-threading package but if you want to multi-thread to speed your code up.
Python has a construct called the Global Interpreter Lock (GIL). The GIL makes sure that only one of your ‘threads’ can execute 
at any one time. A thread acquires the GIL, does a little work, then passes the GIL onto the next thread.
This happens very quickly so to the human eye it may seem like your threads are executing in parallel, but they are really just
taking turns using the same CPU core.
All this GIL passing adds overhead to execution. This means that if you want to make your code run faster then using the 
threading package often isn’t a good idea.

Q5. How can the ternary operators be used in python?

Ans: The Ternary operator is the operator that is used to show the conditional statements. This consists of the true or false
values with a statement that has to be evaluated for it.

Syntax:

The Ternary operator will be given as:
[on_true] if [expression] else [on_false]x, y = 25, 50big = x if x < y else y

Example:

The expression gets evaluated like if x<y else y, in this case if x<y is true then the value is returned as big=x and if it is 
incorrect then big=y will be sent as a result.

Q6. How is memory managed in Python?
Ans: 

Python memory is managed by Python private heap space. All Python objects and data structures are located in a private heap.
The programmer does not have an access to this private heap and interpreter takes care of this Python private heap. 
The allocation of Python heap space for Python objects is done by Python memory manager. The core API gives access to some 
tools for the programmer to code.
Python also have an inbuilt garbage collector, which recycle all the unused memory and frees the memory and makes it available
to the heap space.

Q7. Explain Inheritance in Python with an example.

Ans: Inheritance allows One class to gain all the members(say attributes and methods) of another class. Inheritance provides
code reusability, makes it easier to create and maintain an application. The class from which we are inheriting is called 
super-class and the class that is inherited is called a derived / child class.

They are different types of inheritance supported by Python:

Single Inheritance – where a derived class acquires the members of a single super class.
Multi-level inheritance – a derived class d1 in inherited from base class base1, and d2 is inherited from base2.
Hierarchical inheritance – from one base class you can inherit any number of child classes
Multiple inheritance – a derived class is inherited from more than one base class.

Q8. Explain what Flask is and its benefits?
Ans: Flask is a web micro framework for Python based on “Werkzeug, Jinja2 and good intentions” BSD license.
Werkzeug and Jinja2 are two of its dependencies. This means it will have little to no dependencies on external libraries.  
It makes the framework light while there is little dependency to update and less security bugs.

A session basically allows you to remember information from one request to another. In a flask, a session uses a signed cookie 
so the user can look at the session contents and modify. The user can modify the session if only it has the secret key Flask.
secret_key.

Q9. What is the usage of help() and dir() function in Python?
Ans: Help() and dir() both functions are accessible from the Python interpreter and used for viewing a consolidated dump of 
built-in functions. 

Help() function: The help() function is used to display the documentation string and also facilitates you to see the help 
related to modules, keywords, attributes, etc.
Dir() function: The dir() function is used to display the defined symbols.

Q10. Whenever Python exits, why isn’t all the memory de-allocated?
Ans: 

Whenever Python exits, especially those Python modules which are having circular references to other objects or the objects 
that are referenced from the global namespaces are not always de-allocated or freed.
It is impossible to de-allocate those portions of memory that are reserved by the C library.
On exit, because of having its own efficient clean up mechanism, Python would try to de-allocate/destroy every other object.

Q11. What is dictionary in Python?
Ans: The built-in datatypes in Python is called dictionary. It defines one-to-one relationship between keys and values. 
Dictionaries contain pair of keys and their corresponding values. Dictionaries are indexed by keys.

Let’s take an example:

The following example contains some keys. Country, Capital & PM. Their corresponding values are India, Delhi and Modi respectively.

1
dict={'Country':'India','Capital':'Delhi','PM':'Modi'}
1
print dict[Country]
India
1
print dict[Capital]
Delhi
1
print dict[PM]
Modi

Q12. What is monkey patching in Python?
Ans: In Python, the term monkey patch only refers to dynamic modifications of a class or module at run-time.

Consider the below example:

1
2
3
4
# m.py
class MyClass:
def f(self):
print "f()"
We can then run the monkey-patch testing like this:

1
2
3
4
5
6
7
import m
def monkey_f(self):
print "monkey_f()"
 
m.MyClass.f = monkey_f
obj = m.MyClass()
obj.f()
The output will be as below:

monkey_f()
As we can see, we did make some changes in the behavior of f() in MyClass using the function we defined, monkey_f(), outside of the module m.

Q13. What does this mean: *args, **kwargs? And why would we use it?

Ans: We use *args when we aren’t sure how many arguments are going to be passed to a function, or if we want to pass a stored 
list or tuple of arguments to a function. **kwargsis used when we don’t know how many keyword arguments will be passed to a 
function, or it can be used to pass the values of a dictionary as keyword arguments. The identifiers args and kwargs are a 
convention, you could also use *bob and **billy but that would not be wise.

Q14. Write a one-liner that will count the number of capital letters in a file. Your code should work even if the file is too big to fit in memory.
Ans:  Let us first write a multiple line solution and then convert it to one liner code.

1
2
3
4
5
6
with open(SOME_LARGE_FILE) as fh:
count = 0
text = fh.read()
for character in text:
    if character.isupper():
count += 1
We will now try to transform this into a single line.

1
count sum(1 for line in fh for character in line if character.isupper())

Q15. What are negative indexes and why are they used?
Ans: The sequences in Python are indexed and it consists of the positive as well as negative numbers. The numbers that are 
positive uses ‘0’ that is uses as first index and ‘1’ as the second index and the process goes on like that.

The index for the negative number starts from ‘-1’ that represents the last index in the sequence and ‘-2’ as the penultimate 
index and the sequence carries forward like the positive number.

The negative index is used to remove any new-line spaces from the string and allow the string to except the last character 
that is given as S[:-1]. The negative index is also used to show the index to represent the string in correct order.

Q16. How can you randomize the items of a list in place in Python?
Ans: Consider the example shown below:

1
2
3
4
from random import shuffle
x = ['Keep', 'The', 'Blue', 'Flag', 'Flying', 'High']
shuffle(x)
print(x)
The output of the following code is as below.

['Flying', 'Keep', 'Blue', 'High', 'The', 'Flag']

Q17. What is the process of compilation and linking in python?
Ans: The compiling and linking allows the new extensions to be compiled properly without any error and the linking 
can be done only when it passes the compiled procedure. If the dynamic loading is used then it depends on the style that is 
being provided with the system. The python interpreter can be used to provide the dynamic loading of the configuration setup 
files and will rebuild the interpreter.

The steps that is required in this as:

Create a file with any name and in any language that is supported by the compiler of your system. 
For example file.c or file.cpp
Place this file in the Modules/ directory of the distribution which is getting used.
Add a line in the file Setup.local that is present in the Modules/ directory.
Run the file using spam file.o
After successful run of this rebuild the interpreter by using the make command on the top-level directory.
If the file is changed then run rebuildMakefile by using the command as ‘make Makefile’.

Q18. Write a sorting algorithm for a numerical dataset in Python.
Ans: The following code can be used to sort a list in Python:

1
2
3
4
list = ["1", "4", "0", "6", "9"]
list = [int(i) for i in list]
list.sort()
print (list)



Q20. Explain split(), sub(), subn() methods of “re” module in Python.
Ans: To modify the strings, Python’s “re” module is providing 3 methods. They are:

split() – uses a regex pattern to “split” a given string into a list.
sub() – finds all substrings where the regex pattern matches and then replace them with a different string
subn() – it is similar to sub() and also returns the new string along with the no. of replacements.

Q21. How can you generate random numbers in Python?
Ans: Random module is the standard module that is used to generate the random number. The method is defined as:

1
2
import random
random.random
The statement random.random() method return the floating point number that is in the range of [0, 1). 
The function generates the random float numbers. The methods that are used with the random class are the bound methods of 
the hidden instances. The instances of the Random can be done to show the multi-threading programs that creates different 
instance of individual threads. The other random generators that are used in this are:

randrange(a, b): it chooses an integer and define the range in-between [a, b). It returns the elements by selecting it 
randomly from the range that is specified. It doesn’t build a range object.
uniform(a, b): it chooses a floating point number that is defined in the range of [a,b).Iyt returns the floating point number
normalvariate(mean, sdev): it is used for the normal distribution where the mu is a mean and the sdev is a sigma that is 
used for standard deviation.
The Random class that is used and instantiated creates an independent multiple random number generators.

Q22. What is the difference between range & xrange?

Ans: For the most part, xrange and range are the exact same in terms of functionality. They both provide a way to generate a
list of integers for you to use, however you please. The only difference is that range returns a Python list object and x range 
returns an xrange object.

This means that xrange doesn’t actually generate a static list at run-time like range does. It creates the values as you need 
them with a special technique called yielding. This technique is used with a type of object known as generators. That means 
that if you have a really gigantic range you’d like to generate a list for, say one billion, xrange is the function to use.

This is especially true if you have a really memory sensitive system such as a cell phone that you are working with, as range 
will use as much memory as it can to create your array of integers, which can result in a Memory Error and crash your program. 
It’s a memory hungry beast.

Q23. What is pickling and unpickling?

Ans: Pickle module accepts any Python object and converts it into a string representation and dumps it into a file by using dump
function, this process is called pickling. While the process of retrieving original Python objects from the stored string 
representation is called unpickling.


Q-1. What Are The Core Default Modules Available In Python? List Down A Few Of Them.

Ans. Following are a few of the default modules available in Python.

email – Help to parse, handle, and generate email messages.
string – Contains functions to process standard Python strings.
sqlite3 – Provides methods to work with the SQLite database.
XML – Enables XML support.
logging – Adds support for log classes and methods.
traceback – Allows to extract and print stack trace details.
 

Q-2. Why Is <__init__.Py> Module Used In Python?
Ans.

The <__init__.py> module can help in fulfilling following objectives.

1. It makes Python interpret directories as containing packages by excluding the ones with a common name such as string.

2. It grants a programmer with the control to decide which directory is a package and which is not.

3. However, the <__init__.py> can also be an empty file. It can then help in executing the initialization code for a package or 
setting the <__all__> variable.


Q-3. What Is A Negative Index In Python?
Ans.
In Python, we can access both arrays & lists using a positive or negative numbers (aka index). A negative index reads the list 
elements from the end counting in the backward direction. Check out from the example given below.

>
>> import array >>> a = [1, 2, 3] >>> print a[-3] 1 >>> print a[-2] 2 >>> print a[-1] 3

 

Q-4. What Is Pickling And How Does It Different From Unpickling?
Ans.
Pickling is a process by which a Python object get converted into a string via a pickle module. 
The process then puts it into a file by calling the dump() method.

Whereas unpickling does the reverse of the above-said process. It retrieves the stored string and turns it back into an object.

Q-5. What Is Slicing In Python? Explain With Example.
Ans.
Slicing in Python is a mechanism to select a range of items from Sequence types like strings, list, tuple, etc.

>>> l=[1,2,3,4,5]
>>> l[1:3]
[2, 3]
>>> l[1:-2]
[2, 3]
>>> l[-3:-1]      # negative indexes in slicing
[3, 4]

>>> s="Hello World"
>>> s[1:3]
'el'
>>> s[:-5]
'Hello '
>>> s[-5:]
'World'

Q-6. What Are The Different Ways To Generate Random Numbers In Python?
Ans.

#1. random() - This command returns a floating point number, between 0 and 1.

#2. uniform(X, Y) - It returns a floating point number between the values given as X and Y.

#3. randint(X, Y) - This command returns a random integer between the values given as X and Y.
 

Q-7. Why Is The “Pass” Keyword Used For In Python?
Ans.
The “pass” keyword is a no-operation statement in Python. It signals that no action is required. It works as a placeholder in 
compound statements which are intentionally left blank.

>>> if x==0:
        pass
    else:
        print "x!=0"
 

Q-8. What Are Iterators In Python?
Ans.
Iterators in Python enables to traverse containers like a list or a set of elements. For a container to support iterator, 
it must provide the <__iter__()> method.

container.__iter__() :
# This returns an iterator object.
 

Q-9. What Are Generators In Python?
Ans.
Generators are a way of implementing iterators. A generator function is a normal function except that it contains yield 
expression in the function definition making it a generator function.

This function returns a generator iterator known as a generator.

To get the next value from a generator, we use the same built-in function as for iterators: <next(). next()> takes care of 
calling the generator’s <__next__()> method.

Q-10. How Will You Run A Subprocess Or An External Program With Arguments In Python?
Ans.
There are two methods which can run a subprocess or external programs. First is to use the subprocess module in the stdlib.

from subprocess import call
call(["ls", "-l"])
The advantage of subprocess vs system is that it is more flexible. You can get the stdout, stderr, the “real” status code and 
better error handling. The second approach to run a program with arguments is as follows.

subprocess.Popen(arglist,stdout=outputfile)
 

Q-11. How Will You Remove The Duplicate Elements From The Given List?
words = [‘one’, ‘one’, ‘two’, ‘three’, ‘three’, ‘two’]

Ans.
A simple solution is to iterate over the list, identify duplicates and remove them.

But the best solution which we can recommend is as follows.

a = [1,2,2,3]
list(set(a))
The set is another type available in Python. It doesn’t allow copies and provides some good functions to perform set operations 
like union, difference etc.

 

Q-12. How Will You Print The Sum Of Numbers Starting From 1 To 100 (Inclusive Of Both)?
Ans.

print sum(range(1,101))

#range() returns a list to the sum function containing
#all the numbers from 1 to 100. Please see that
#the range function does not include the end given (101 here).

print(sum(xrange(1, 101)))

#xrange() returns an iterator rather than a list
#which is less heavy in the memory.
 

Q-13. What Is The Best Approach To Store A List Of An Employee’s First And Last Names?
Ans.
A list of first and last names is best stored as a list of dictionaries. The following format can be used.

{'first_name':'Example','last_name':'TechBeamers'}
 

Q-14: Does Python Allow Arguments Pass By Value Or Pass By Reference?
Ans.
Neither the arguments are Pass by Value nor does Python supports Pass by reference. Instead, they are Pass by assignment.

The parameter which you pass is originally a reference to the object not the reference to a fixed memory location. But the 
reference is passed by value. Additionally, some data types like strings and tuples are immutable whereas others are mutable.

 

Q-15. What Are The Different Methods Python Provides For Copying An Object?
Ans. We can either use a “Shallow Copy” or follow a “Deep Copy” approach.

Shallow Copy Method.
The content of an object (say dictionary) doesn’t get copied by value but by creating a new reference.

>>> a = {1: [1,2,3]}
>>> b = a.copy()
>>> a, b
({1: [1, 2, 3]}, {1: [1, 2, 3]})
>>> a[1].append(4)
>>> a, b
({1: [1, 2, 3, 4]}, {1: [1, 2, 3, 4]})
Deep Copy Method.
It copies all the contents by value.

>>> c = copy.deepcopy(a)
>>> a, c
({1: [1, 2, 3, 4]}, {1: [1, 2, 3, 4]})
>>> a[1].append(5)
>>> a, c
({1: [1, 2, 3, 4, 5]}, {1: [1, 2, 3, 4]})
 

Q-16. How Will You Convert A String To A Number In Python?
Ans.
Python provides the <int()> method, a standard built-in function to convert a string into an integer value.

You can call it with a string containing a number as the argument, and it returns the number converted to an actual integer.

print int("1") + 1
The above prints 2.
 

Q-17. How Will You Set A Global Variable Inside A Function?
Ans.
You can use a global variable in other functions by declaring it as global in each function that assigns to it:

globvar = 0
def set_globvar_to_one():
    global globvar    # Needed to modify global copy of globvar
    globvar = 1
def print_globvar():
    print globvar     # No need for global declaration to read value of globvar
set_globvar_to_one()
print_globvar()       # Prints 1
I imagine the reason for it is that, since global variables are so dangerous, Python wants to make sure that you really know 
that’s what you’re playing with by explicitly requiring the global keyword.

 

Q-18. How Will You Share Global Variables Across Modules?
Ans.
If you add a variable to the <__builtin__> module, it will be accessible as if a global from any other module that includes 
<__builtin__> — which is all of them, by default.

a.py contains
print foo
b.py contains
import __builtin__
__builtin__.foo = 1
import a
The result is that "1" is printed.
Note: Python 3 introduced the builtins keyword as a replacement for the <__builtin__>.

 

Q-19. Is There A Tool To Help Find Bugs Or Perform The Static Analysis?
Ans.

Yes. PyChecker is a static analysis tool. It finds bugs in the source code and raises alerts for the issues in code complexity 
or style.

Pylint is another tool that checks if a module meets the coding standard. It also supports additional plug-ins to enable custom 
features.

 

Q-20. How Can You Perform Unit Testing In Python?
Ans.
Python packages a unit testing framework called <Unittest>. It supports the following features.

Automation testing.
Sharing of setup and shutdown code for tests.
Aggregation of tests into collections.
Independence of the tests from the reporting framework.

2. How are the functions help() and dir() different?

These are the two functions that are accessible from the Python Interpreter. These two functions are used for viewing a 
consolidated dump of built-in functions.

help() – it will display the documentation string. It is used to see the help related to modules, keywords, attributes, etc.
To view the help related to string datatype, just execute a statement help(str) – it will display the documentation for ‘str, 
module. ◦ Eg: >>>help(str) or >>>help() – it will open the prompt for help as help>
to view the help for a module, help> module module name Inorder to view the documentation of ‘str’ at the help>, 
type help>modules str
to view the help for a keyword, topics, you just need to type, help> “keywords python- keyword” and “topics list”
dir() – will display the defined symbols. Eg: >>>dir(str) – will only display the defined symbols.
 

3. Which command do you use to exit help window or help command prompt?
quit
When you type quit at the help’s command prompt, python shell prompt will appear by closing the help window automatically.
 
4. Does the functions help() and dir() list the names of all the built_in functions and variables? If no, how would you list them?

No. Built-in functions such as max(), min(), filter(), map(), etc is not apparent immediately as they are
available as part of standard module.To view them, we can pass the module ” builtins ” as an argument to “dir()”. It will display the
built-in functions, exceptions, and other objects as a list.>>>dir(__builtins )
[‘ArithmeticError’, ‘AssertionError’, ‘AttributeError’, ……… ]

5. Explain how Python does Compile-time and Run-time code checking?

Python performs some amount of compile-time checking, but most of the checks such as type, name, etc are postponed until 
code execution. Consequently, if the Python code references a user -defined function that does not exist, the code will compile 
successfully. In fact, the code will fail with an exception only when the code execution path references the function which does
not exists.


6. Whenever Python exists Why does all the memory is not de-allocated / freed when Python exits?

Whenever Python exits, especially those python modules which are having circular references to other objects or the objects 
that are referenced from the global namespaces are not always de – allocated/freed/uncollectable.
It is impossible to deallocate those portions of memory that are reserved by the C library.
On exit, because of having its own efficient clean up mechanism, Python would try to deallocate/
destroy every object.

7. Explain Python's zip() function.?
zip() function- it will take multiple lists say list1, list2, etc and transform them into a single list of tuples by taking 
the corresponding elements of the lists that are passed as parameters. Eg:

list1 = ['A',
'B','C'] and list2 = [10,20,30].
zip(list1, list2) # results in a list of tuples say [('A',10),('B',20),('C',30)]
whenever the given lists are of different lengths, zip stops generating tuples when the first list ends.

8. Explain Python's pass by references Vs pass by value . (or) Explain about Python's parameter passing mechanism?

In Python, by default, all the parameters (arguments) are passed “by reference” to the functions. Thus, if you change the 
value of the parameter within a function, the change is reflected in the calling function.We can even observe the pass “by value” 
kind of a behaviour whenever we pass the arguments to functions that are of type say numbers, strings, tuples. This is because 
of the immutable nature of them.


9. As Everything in Python is an Object, Explain the characteristics of Python's Objects.

As Python’s Objects are instances of classes, they are created at the time of instantiation. 
Eg: object-name = class-name(arguments)
one or more variables can reference the same object in Python
Every object holds unique id and it can be obtained by using id() method. 
Eg: id(obj-name) will return unique id of the given object.
every object can be either mutable or immutable based on the type of data they hold.
 Whenever an object is not being used in the code, it gets destroyed automatically garbage collected or destroyed
 contents of objects can be converted into string representation using a method
Go through this Python Video to get clear understanding of Python.

10. Explain how to overload constructors or methods in Python.

Python’s constructor – _init__ () is a first method of a class. Whenever we try to instantiate a object __init__() 
is automatically invoked by python to initialize members of an object.

11. Which statement of Python is used whenever a statement is required syntactically but the program needs no action?

Pass – is no-operation / action statement in Python
If we want to load a module or open a file, and even if the requested module/file does not exist, we want to continue with 
other tasks. In such a scenario, use try-except block with pass statement in the except block.
Eg:

 try:import mymodulemyfile = open(“C:\myfile.csv”)except:pass
12. What is Web Scraping? How do you achieve it in Python?

Web Scrapping is a way of extracting the large amounts of information which is available on the web sites and saving it onto 
the local machine or onto the database tables.
In order to scrap the web:load the web page which is interesting to you. To load the web page, use “requests” module.
parse HTML from the web page to find the interesting information.Python has few modules for scraping the web. They are urllib2,
scrapy, pyquery, BeautifulSoap, etc.


13. What is a Python module?
A module is a Python script that generally contains import statements, functions, classes and variable definitions, 
and Python runnable code and it “lives” file with a ‘.py’ extension. zip files and DLL files can also be modules.
Inside the module, you can refer to the module name as a string that is stored in the global variable name .
A module can be imported by other modules in one of the two ways. They are

 import
from module-name import

14. Name the File-related modules in Python?

Python provides libraries / modules with functions that enable you to manipulate text files and binary files on file system. 
Using them you can create files, update their contents, copy, and delete files. 
The libraries are : os, os.path, and shutil.
Here, os and os.path – modules include functions for accessing the filesystem
shutil – module enables you to copy and delete the files.

15. Explain the use of with statement?

In python generally “with” statement is used to open a file, process the data present in the file, and also to close the file 
without calling a close() method. “with” statement makes the exception handling simpler by providing cleanup activities.
General form of with:
with open(“file name”, “mode”) as file-var:
processing statements
note: no need to close the file by calling close() upon file-var.close()


16. Explain all the file processing modes supported by Python ?

Python allows you to open files in one of the three modes. They are:
read-only mode, write-only mode, read-write mode, and append mode by specifying the flags “r”, “w”, “rw”, “a” respectively.
A text file can be opened in any one of the above said modes by specifying the option “t” along with
“r”, “w”, “rw”, and “a”, so that the preceding modes become “rt”, “wt”, “rwt”, and “at”.A binary file can be opened in any one 
of the above said modes by specifying the option “b” along with “r”, “w”, “rw”, and “a” so that the preceding modes become “rb”,
 “wb”, “rwb”, “ab”.

17. Explain how to redirect the output of a python script from standout(ie., monitor) on to a file ?

They are two possible ways of redirecting the output from standout to a file.

 Open an output file in “write” mode and the print the contents in to that file, using sys.stdout attribute.
import sys
filename = “outputfile” sys.stdout = open() print “testing”
you can create a python script say .py file with the contents, say print “testing” and then redirect it to the output file 
while executing it at the command prompt.
Eg: redirect_output.py has the following code:
print “Testing”
execution: python redirect_output.py > outputfile.


18. Explain the shortest way to open a text file and display its contents.?

The shortest way to open a text file is by using “with” command as follows:

with open("file-name", "r") as fp:
fileData = fp.read()
#to print the contents of the file print(fileData)

19. How do you create a dictionary which can preserve the order of pairs?

We know that regular Python dictionaries iterate over <key, value> pairs in an arbitrary order, hence they do not preserve the 
insertion order of <key, value> pairs.
Python 2.7. introduced a new “OrderDict” class in the “collections” module and it provides the same interface like the general 
dictionaries but it traverse through keys and values in an ordered manner depending on when a key was first inserted.
Eg:

from collections import OrderedDict
d = OrderDict([('Company-id':1),('Company-Name':'Intellipaat')])
d.items() # displays the output as: [('Company-id':1),('Company-Name':'Intellipaat')]

20. When does a dictionary is used instead of a list?

Dictionaries – are best suited when the data is labelled, i.e., the data is a record with field names.
lists – are better option to store collections of un-labelled items say all the files and sub directories in a folder. 
List comprehension is used to construct lists in a natural way.
Generally Search operation on dictionary object is faster than searching a list object.


21. What is the use of enumerate() in Python?
Using enumerate() function you can iterate through the sequence and retrieve the index position and its corresponding value at 
the same time.
>>> for i,v in enumerate([‘Python’,’Java’,’C++’]):
print(i,v)
0 Python
1 Java
2 C++

22. How many kinds of sequences are supported by Python? What are they?
Python supports 7 sequence types. They are str, list, tuple, unicode, bytearray, xrange, and buffer. 
where xrange is deprecated in python 3.5.X.

23. How do you perform pattern matching in Python? Explain

Regular Expressions/REs/ regexes enable us to specify expressions that can match specific “parts” of a given string. 
For instance, we can define a regular expression to match a single character or a digit, a telephone number, or an email address,
etc.The Python’s “re” module provides regular expression patterns and was introduce from later versions of Python 2.5. “re” 
module is providing methods for search text strings, or replacing text strings along with methods for splitting text strings 
based on the pattern defined.

24. Name few methods for matching and searching the occurrences of a pattern in a given text String ?

There are 4 different methods in “re” module to perform pattern matching. They are:
match() – matches the pattern only to the beginning of the String. 
search() – scan the string and look for a location the pattern matches 
findall() – finds all the occurrences of match and return them as a list
finditer() – finds all the occurrences of match and return them as an iterator.

25. Explain split(), sub(), subn() methods of
To modify the strings, Python’s “re” module is providing 3 methods. They are:
split() – uses a regex pattern to “split” a given string into a list.
sub() – finds all substrings where the regex pattern matches and then replace them with a different string
subn() – it is similar to sub() and also returns the new string along with the no. of
replacements.

26. How to display the contents of text file in reverse order?
convert the given file into a list.
 reverse the list by using reversed()
Eg: for line in reversed(list(open(“file-name”,”r”))):
print(line)

27. What is JSON? How would convert JSON data into Python data?
JSON – stands for JavaScript Object Notation. It is a popular data format for storing data in NoSQL
databases. Generally JSON is built on 2 structures.

 A collection of <name, value> pairs.
 An ordered list of values.
As Python supports JSON parsers, JSON-based data is actually represented as a dictionary in Python. You can convert json data 
into python using load() of json module.

28. Name few Python modules for Statistical, Numerical and scientific computations ?

numPy – this module provides an array/matrix type, and it is useful for doing computations on arrays. 
scipy – this module provides methods for doing numeric integrals, solving differential equations, etc 
pylab – is a module for generating and saving plots
matplotlib – used for managing data and generating plots.

29. What is TkInter?
TkInter is Python library. It is a toolkit for GUI development. It provides support for various GUI tools or widgets 
(such as buttons, labels, text boxes, radio buttons, etc) that are used in GUI applications. The common attributes of them 
include Dimensions, Colors, Fonts, Cursors, etc.

30. Name and explain the three magic methods of Python that are used in the construction and initialization of custom Objects.

The 3 magic methods of Python that are used in the construction and initialization of custom Objects are: init__, new , and 
del__.
new – this method can be considered as a “constructor”. It is invoked to create an instance of a class with the statement say, myObj = MyClass()
init__ — It is an “initializer”/ “constructor” method. It is invoked whenever any arguments are passed at the time of creating 
an object. myObj = MyClass(‘Pizza’,25)
del- this method is a “destructor” of the class. Whenever an object is deleted,
invocation of del__ takes place and it defines behaviour during the garbage collection. Note: new , del are rarely used 
explicitly.

31. Is Python object oriented? what is object oriented programming?

Yes. Python is Object Oriented Programming language. OOP is the programming paradigm based on classes and instances of those 
classes called objects. The features of OOP are:
Encapsulation, Data Abstraction, Inheritance, Polymorphism.

32. What is a Class? How do you create it in Python?

A class is a blue print/ template of code /collection of objects that has same set of attributes and behaviour. To create a 
class use the keyword class followed by class name beginning with an uppercase letter. For example, a person belongs to class 
called Person class and can have the attributes (say first-name and last-name) and behaviours / methods (say showFullName()). 
A Person class can be defined as:

class Person():
#method
def inputName(self,fname,lname): self.fname=fname self.lastname=lastname
#method
def showFullName() (self):
print(self.fname+" "+self.lname)person1 = Person() #object instantiation person1.inputName("Ratan","Tata") #calling a method 
inputName person1. showFullName() #calling a method showFullName()
Note: whenever you define a method inside a class, the first argument to the method must be self (where self – is a pointer to 
the class instance). self must be passed as an argument to the method, though the method does not take any arguments.

33. What are Exception Handling? How do you achieve it in Python?

Exception Handling prevents the codes and scripts from breaking on receipt of an error at run -time might be at the time doing 
I/O, due to syntax errors, data types doesn’t match. Generally it can be used for handling user inputs.
The keywords that are used to handle exceptions in Python are:
try – it will try to execute the code that belongs to it. May be it used anywhere that keyboard input is required.
except – catches all errors or can catch a specific error. It is used after the try block.x = 10 + ‘Python’ 
#TypeError: unsupported operand type(s) …. try:
x = 10 + ‘Python’
except:
print(“incompatible operand types to perform sum”)
raise – force an error to occur
o raise TypeError(“dissimilar data types”)
finally – it is an optional clause and in this block cleanup code is written here following “try” and “except”.

34. Explain Inheritance in Python with an example.

Inheritance allows One class to gain all the members(say attributes and methods) of another class. Inheritance provides code 
reusability, makes it easier to create and maintain an application. They are different types of inheritance supported by Python. 
They are: single, multi-level, hierarchical and multiple inheritance. The class from which we are inheriting is called 
super-class and the class that is inherited is called a derived / child class.
Single Inheritance – where a derived class acquires the members of a single super class.
multi-level inheritance – a derived class d1 in inherited from base class base1, and d2 is inherited from base2.
hierarchical inheritance – from one base class you can inherit any number of child classes
multiple inheritance – a derived class is inherited from more than one base class.
ex:

class ParentClass:
v1 = "from ParentClass - v1"
v2 = "from ParentClass - v2"class ChildClass(ParentClass):
passc = ChildClass() print(c.v1) print(c.v2)

35. What is multithreading? Give an example.

It means running several different programs at the same time concurrently by invoking multiple threads. Multiple threads 
within a process refer the data space with main thread and they can communicate with each other to share information more easily.
Threads are light-weight processes and have less memory overhead. Threads can be used just for quick task like calculating results 
and also running other processes in the background while the main program is running.

36. How instance variables are different from class variables?

Instance variables: are the variables in an object that have values that are local to that object. Two objects of the same 
class maintain distinct values for their variables. These variables are accessed with “object-name.instancevariable-name”.
class variables: these are the variables of class. All the objects of the same class will share value of “Class variables. 
They are accessed with their class name alone as “class- name.classvariable-name”. If you change the value of a class variable 
in one object, its new value is visible among all other objects of the same class. In the Java world, a variable that is 
declared as static is a class variable.

37. Explain different ways to trigger / raise exceptions in your python script ?

The following are the two possible ways by which you can trigger an exception in your Python script. They are:

raise — it is used to manually raise an exception general-form:
raise exception-name (“message to be conveyed”)
Eg: >>> voting_age = 15
>>> if voting_age < 18: raise ValueError(“voting age should be atleast 18 and above”) output: ValueError: voting age should 
be atleast 18 and above 2. assert statement assert statements are used to tell your program to test that condition attached to 
assert keyword, and trigger an exception whenever the condition becomes false. Eg: >>> a = -10
>>> assert a > 0 #to raise an exception whenever a is a negative number output: AssertionError
Another way of raising and exception can be done by making a programming mistake, but that’s not
usually a good way of triggering an exception.

38. How is Inheritance and Overriding methods are related?
If class A is a sub class of class B, then everything in B is accessible in /by class A. In addition, class A can define methods
that are unavailable in B, and also it is able to override methods in B. For Instance, If class B and class A both contain a 
method called func(), then func() in class B can override func() in class A. Similarly, a method of class A can call another 
method defined in A that can invoke a method of B that overrides it.

39. Which methods of Python are used to determine the type of instance and inheritance?
Python has 2 built-in functions that work with inheritance:
isinstance() – this method checks the type of instance.

for eg, isinstance(myObj, int) – returns True only when “myObj. class ” is “int”.
issubclass() – this method checks class inheritance

for eg: issubclass(bool, int) – returns True because “bool” is a subclass of “int”.

issubclass(unicode, str) – returns False because “unicode” is not a subclass of “str”.

41. Does Python supports interfaces like in Java? Discuss.
Python does not provide interfaces like in Java. Abstract Base Class (ABC) and its feature are provided by the Python’s “abc” 
module. Abstract Base Class is a mechanism for specifying what methods must be implemented by its implementation subclasses. 
The use of ABC’c provides a sort of “understanding” about methods and their expected behaviour. This module was made available 
from Python 2.7 version onwards.

42. What are Accessors, mutators, @property?
Accessors and mutators are often called getters and setters in languages like “Java”. For example, if x is a property of a 
user-defined class, then the class would have methods called setX() and getX(). Python has an @property “decorator” that allows 
you to ad getters and setters in order to access the attribute of the class.

43. Differentiate between .py and .pyc files?
Both .py and .pyc files holds the byte code. “.pyc” is a compiled version of Python file. This file is automatically generated 
by Python to improve performance. The .pyc file is having byte code which is platform independent and can be executed on any 
operating system that supports .pyc format.
Note: there is no difference in speed when program is read from .pyc or .py file; the only difference is the load time.

44. How to retrieve data from a table in MySQL database through Python code? Explain.
 
 import MySQLdb module as : import MySQLdb
 establish a connection to the database.
db = MySQLdb.connect(“host”=”local host”, “database-user”=”user-name”, “password”=”password”, “database-name”=”database”)
 initialize the cursor variable upon the established connection: c1 = db.cursor()
 retrieve the information by defining a required query string. s = “Select * from dept”
 fetch the data using fetch() methods and print it. data = c1.fetch(s)
 close the database connection. db.close()

 45. Explain about ODBC and Python ?
ODBC (“Open Database Connectivity) API standard allows the connections with any database that supports the interface, 
such as PostgreSQL database or Microsoft Access in a transparent manner . There are 3 ODBC modules for Python:

PythonWin ODBC module – limited development
mxODBC – commercial product
pyodbc – it is an open source Python package.
46. How would you define a protected member in a Python class?
All the members of a class in Python are public by default. You don’t need to define an access specifier for members of class. By adding ‘_’ as a prefix to the member of a class, by convetion you are telling others please don’t this object, if you are not a subclass the respective class.
Eg: class Person:
empid = None
_salary = None #salary is a protected member & it can accessible by the subclasses of Person
….

47. How do you remove duplicates from a list?
a. sort the list
b. scan the list from the end.
c. while scanning from right-to-left, delete all the duplicate elements from the list

48. Differentiate between append() and extend() methods. ?

Both append() and extend() methods are the methods of list. These methods a re used to add the elements at the end of the list.
append(element) – adds the given element at the end of the list which has called this method.
extend(another-list) – adds the elements of another-list at the end of the list which is called the extend method.

49. Name few Python Web Frameworks for developing web applications?

There are various web frameworks provided by Python. They are
web2py – it is the simplest of all the web frameworks used for developing web applications.
cherryPy – it is a Python-based Object oriented Web framework.
Flask – it is a Python-based micro-framework for designing and developing web applications.

50. How do you check the file existence and their types in Python?

os.path.exists() – use this method to check for the existence of a file. It returns True if the file exists, false otherwise. 
Eg: import os; os.path.exists(‘/etc/hosts’)
os.path.isfile() – this method is used to check whether the give path references a file or not. It returns True if the path 
references to a file, else it returns false. Eg: import os; os.path.isfile(‘/etc/hosts’)
os.path.isdir() – this method is used to check whether the give path references a directory or not. It returns True if the 
path references to a directory, else it returns false. Eg: import os; os.path.isfile(‘/etc/hosts’)
os.path.getsize() – returns the size of the given file
os.path.getmtime() – returns the timestamp of the given path.

51. Name few methods that are used to implement Functionally Oriented Programming in Python?
Python supports methods (called iterators in Python3), such as filter(), map(), and reduce(), that are very useful when 
you need to iterate over the items in a list, create a dictionary, or extract a subset of a list.
filter() – enables you to extract a subset of values based on conditional logic.
map() – it is a built-in function that applies the function to each item in an iterable.
reduce() – repeatedly performs a pair-wise reduction on a sequence until a single value is computed.

1.What is PEP8?
Ans.

This is a coding convention, a set of recommendation, on how best to write Python code and improve its readability.

2.How do we interpret Python?
Ans.

Python language is an interpreted language. The program runs directly from the source code and converts the source code 
that the programmer writes into an immediate language that is then translated into a language that needs to be executed by a 
machine.

3.What is a Python decorator?
Ans.

A Python decorator is a specific change that is made in Python syntax to effortlessly modify functions.

4.What is the difference between list and tuple?
Ans.

While list is mutable, tuple is not. One can hash tuple, for instance, as a key for dictionaries.

5.What are Dict and List Comprehensions?
Ans.

These are syntax constructions that help to simplify the creation of a dictionary or list based on iterable that already exists.

6.What is Lambda in Python?
Ans.

Lambda is a single expression anonymous function that is mostly used as inline function.

7.What are iterators?
Ans.

Iterators are used for iterating a group of elements, containers like list.

8.What is slicing?
Ans.

Slicing is a mechanism that helps you in selecting a range of items from sequence types such as tuple, string, list, etc.

9.What is docstring?
Ans.

Docstring is another name for a Python documentation string. It is way to document Python modules, classes and functions.

10.What is pass in Python?
Ans.

Pass simply stands for, no-operation Python statement. It is a place holder in compound statement, 
where a blank should be left, with nothing written there.

11.Why do lambda forms in Python not have statements?
Ans.

A lambda form does not have statements since it is used in making new function object and returning them at runtime.

12.What is unittest?
Ans.

Unittest is the unit testing framework in Python. It aids in automation testing, sharing of setups, 
aggregation of tests into collections, shutdown code tests, etc.

13.What is the difference between Xrange and range?
Ans.

While Xrange returns xrange objects, range on the other hand, returns the list and makes use of the same memory 
irrespective of the range size.

14.How do you delete a file in Python?
Ans.

You simply make use of the command os.remove (filename) or os.unlink (filename)

15.What is the use of the split function in Python?
Ans.

The split function in Python helps in breaking a string into shorter strings by using the defined separator. 
It provides a list of the words contained in the string.




Strings:
------
A string is a sequence of characters.

we can define strings in 3 ways
s = 'malli'
s = "malli"
s = ''' malli
       karjuna'''

Indexing in string
-----------------
s = 'malli'
     01234
	 54321 followed by (-)

print (s[1])
a
# last character
print (s[-1])
i
#slicing 2nd to 5th character
print (s[1:5])
alli
#slicing 1st to 2nd last character
print(s[1:-2])
al
#Reverse a string
s[::-1] = illam
s[::1] =malli
s[::2] = mli

concatination of two strings:
----------------------------
s = 'malli'
a = 'karjuna'

print(s + a)
mallikarjuna
print(s * 2)
mallimalli

#If we want to concatenate strings in different lines, we can use parentheses.
s = ('malli'
      'karjuna')
print(s)
mallikarjuna

#iterating through string
Using for loop we can iterate through a string. Here is an example to count the number of 'l' in a string.
count = 0
for letter in 'malli':
    if(letter == 'l'):
	count += 1
print(count,'letters found')
2 letters found

# String membership test
We can test if a sub string exists within a string or not, using the keyword in
'a' in 'malli'
True
'a' not in 'malli'
False


String Formatting:
-----------------
#Escape sequence in python
--------------------
# using triple quotes
print('''He said, "What's there?"''')

# escaping single quotes
print('He said, "What\'s there?"')

# escaping double quotes
print("He said, \"What's there?\"")

Escape Sequence	Description
\newline	Backslash and newline ignored
\\	Backslash
\'	Single quote
\"	Double quote
\a	ASCII Bell

\b	ASCII Backspace
\f	ASCII Formfeed
\n	ASCII Linefeed
\r	ASCII Carriage Return
\t	ASCII Horizontal Tab
\v	ASCII Vertical Tab
\ooo	Character with octal value ooo
\xHH	Character with hexadecimal value HH


Built-in functions to Work with Python:
--------------------------------------
enumerate():
----------
The enumerate() function returns an enumerate object. It contains the index and value of all the items in the string as pairs. 
This can be useful for iteration
s = 'malli'
print(list(enumerate(s)))
[(0, 'm'), (1, 'a'), (2, 'l'), (3, 'l'), (4, 'i')]

len():
----
len() returns the length (number of characters) of the string

s = 'malli'
print(len(s))
5

format():
--------
Format strings contains curly braces {} as placeholders or replacement fields which gets replaced.

We can use positional arguments or keyword arguments to specify the order.

# default(implicit) order
default_order = "{}, {} and {}".format('John','Bill','Sean')
print('\n--- Default Order ---')
print(default_order)

# order using positional argument
positional_order = "{1}, {0} and {2}".format('John','Bill','Sean')
print('\n--- Positional Order ---')
print(positional_order)

# order using keyword argument
keyword_order = "{s}, {b} and {j}".format(j='John',b='Bill',s='Sean')
print('\n--- Keyword Order ---')
print(keyword_order)

capitalize():
-----------   
Return a capitalized version of S, i.e. make the first character
have upper case and the rest lower case.
s = 'malli'
s.capitalize()
print(s)
'Malli'
casefold():
----------
Return a version of S suitable for caseless comparisons.
s = 'Malli'
s.casefold()
print(s)
'malli'
center():
--------
The method center() returns centered in a string of length width. Padding is done using the specified fillchar. 
Default filler is a space.

s = 'malli'

s.center(width[,fillchar])
print(s.center(10,'a'))
'aamalliaaa'

count():
-------
The method count() returns the number of occurrences of substring sub in the range [start, end].
s = 'malli'
s.count('l',0,4)
2

encode():
-------
The method encode() returns an encoded version of the string.
s = 'malli'
s.encode('UTF-8',errors = 'strict')
endswith():
----------
It returns True if the string ends with the specified suffix.
str.endswith(suffix[, start[, end]])
s = 'malli'

s.endswith('a',0,2)
True

expandtabs():
-----------
Expands tabs in string to multiple spaces; defaults to 8 spaces per tab if tabsize not provided.
s= 'malli'
s.expandtabs()
malli

str = "this is\tstring example....wow!!!"

print ("Double exapanded tab: " +  str.expandtabs(16))
Double exapanded tab: this is         string example....wow!!!

print ("Original string: " + str)
Original string: this is        string example....wow!!!

print ("Defualt exapanded tab: " +  str.expandtabs())
Defualt exapanded tab: this is string example....wow!!!


find(str, beg=0 end=len(string))
-------------------------------
Determine if str occurs in string or in a 
substring of string if starting index beg and ending index end are given returns index if found and -1 otherwise.
s.find('a')

index(str, beg=0, end=len(string)):
---------------------------------
Same as find(), but raises an exception if str not found

isalnum():
--------
Returns true if string has at least 1 character and all characters are alphanumeric and false otherwise

isdigit():
--------
Returns true if string contains only digits and false otherwise.
islower():
--------
Returns true if string has at least 1 cased character and all cased characters are in lowercase and false otherwise

isnumeric():
----------
Returns true if a unicode string contains only numeric characters and false otherwise.
isspace():
--------
Returns true if string contains only whitespace characters and false otherwise.
istitle():
--------
Returns true if string is properly "titlecased" and false otherwise

format_map()
------------
Similar to str.format(**mapping), except that mapping is used directly and not copied to a dict. 
This is useful if for example mapping is a dict subclass:
p = ['x':1,'y':3]
print('{x}{y}'.format_map(p))
1 3
print('{x}{y}'.format(**p))
1 3

join()
-----
The method join() returns a string in which the string elements of sequence have been joined by str separator.
s = 'malli'
print('-'.join(s))
m-a-l-l-i

ljust()
-------
The method ljust() returns the string left justified in a string of length width. 
Padding is done using the specified fillchar (default is a space). 
The original string is returned if width is less than len(s).
s = 'malli'
print(s.ljust(10,'0'))
malli00000
rjust()
-------
The method rjust() returns the string right justified in a string of length width. 
Padding is done using the specified fillchar (default is a space). 
The original string is returned if width is less than len(s).
s = 'malli'
print(s.ljust(10,'0'))
00000malli

split()
-------
The method split() returns a list of all the words in the string, using str as the separator 
(splits on all whitespace if left unspecified),optionally limiting the number of splits to num.
s = 'mallikarmjuna'
print(s.split('m'))
['', 'allikar', 'juna']
print(s.partition('m'))
('', 'm', 'allikarmjuna')



strip()
-------
This method is used to delete all the leading and trailing characters mentioned in its argument.
a = 'mallmim'
print(a.strip('mal')
i

lstrip()
--------
This method is used to delete all the leading characters mentioned in its argument.
a = 'mallmim'
print(a.lstrip('mal'))
im

rstrip()
--------
This method is used to delete all the trailing characters mentioned in its argument.
a = 'mallmim'
print(a.rstrip('mal'))
mallmi

maketrans()
-----------
The method maketrans() returns a translation table that maps each character in the intabstring into the character at 
the same position in the outtab string.Then this table is passed to the translate() function.

a = 'abc'
s = 'def'
m = str.maketrans(a,s)
print(m) = {97: 100, 98: 101, 99: 102}
l = 'asjebdfg'
result = l.translate(m)
print(result) = dsjeedfg

partition()
-----------
The partition() method takes a string parameter separator that separates the string at the first occurrence of it.

s = 'mallilil'
print(s.partition('l'))
('ma', 'l', 'lilil')

rpartition()
------------
The rpartition() method takes a string parameter separator that separates the string at the last occurrence of it.
s = 'mallilili'
print(s.rpartition('l'))
('mallili', 'l', 'i')

replace()
---------
The method replace() returns a copy of the string in which the occurrences of old have been replaced with new, 
optionally restricting the number of replacements to max.
s = 'mallilili'
print(s.replace('l','0'))
ma00i0i0i

rfind()
-------
The method rfind() returns the last index where the substring str is found, or -1 if no such index exists,
optionally restricting the search to string[beg:end].
str1 = "this is really a string example....wow!!!";
str2 = "is";

print str1.rfind(str2)
5
print str1.rfind(str2, 0, 10)
5
print str1.rfind(str2, 10, 0)
-1

print str1.find(str2)
2
print str1.find(str2, 0, 10)
2
print str1.find(str2, 10, 0)
-1

rindex()
--------
The method rindex() returns the last index where the substring str is found, or raises an exception if no such index exists, 
optionally restricting the search to string[beg:end].

str1 = "this is string example....wow!!!";
str2 = "is";

print str1.rindex(str2)
2
print str1.index(str2)
5
swapcase()
----------
The method swapcase() returns a copy of the string in which all the case-based characters have had their case swapped.
s = 'mallikARmjuna'
print(s.swapcase())
MALLIKarMJUNA

Zfill()
-------
The method zfill() pads string on the left with zeros to fill width.
s = 'mallikARmjuna' 
print(s.zfill(20))
0000000mallikARmjuna



Print formatting:
----------------
x = 'mallikarjuna'
print('place my variable here: %s'%x)
place my variable here: mallikarjuna

x = [1,2]
print('place my variable here: %s'%x)
place my variable here: [1,2]

x = {1:3,2:4}
print('place my variable here: %s'%x)
place my variable here: {1:3,2:4}

x = (1,2)
print('place my variable here: %s'%x)
  print('place my variable here: %s'%x)
TypeError: not all arguments converted during string formatting



print('Floating point number: %1.2f'%123.1231)
123.12

print('Floating point number: %25.1f'%123.1231)
Floating point number:                     123.1

print('first: %s, second: %s, Third:%s'%('Hi!','two',3))
first: Hi!, second: two, Third:3

print('first: {x}, second: {m}, Third:{l}'.format(x = 'malli',m = 12,l='srger'))
first: malli, second: 12, Third:srger

print('first: {0}, second: {0}, Third:{2}'.format('malli', 12,'srger'))
first: malli, second: malli, Third:srger

print('first: {}, second: {}, Third:{}'.format('malli', 12,'srger'))
first: malli, second: 12, Third:srger




python questions and answers for strings:-
----------------------------------------

1.Write a Python program to count the number of characters (character frequency) in a string?
------------------------------------------------------------------------------------------
def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict
print(char_frequency('google.com'))
{'o': 3, '.': 1, 'g': 2, 'l': 1, 'e': 1, 'c': 1, 'm': 1}

3. Write a Python program to get a string made of the first 2 and the last 2 chars from a given a string. 
If the string length is less than 2, return instead of the empty string?

ANS:-def fun(s):
	if len(s) >= 2:
		print(s[0:2] + s[-2:])
	else: print('Empty String')
>>> fun('malli')
mali

4. Write a Python program to get a string from a given string where all occurrences of its first char have been changed to '$',
 except the first char itself.?
 
 def change_char(str1):
  char = str1[0]
  length = len(str1)
  str1 = str1.replace(char, '$')
  str1 = char + str1[1:]

  return str1

print(change_char('restart'))

5. Write a Python program to get a single string from two given strings, separated by a space and swap the first two 
characters of each string?

def chars_mix_up(a, b):
  new_a = b[:2] + a[2:]
  new_b = a[:2] + b[2:]

  return new_a + ' ' + new_b
print(chars_mix_up('abc', 'xyz'))


6. Write a Python program to add 'ing' at the end of a given string (length should be at least 3). 
If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, 
leave it unchanged?

def add_string(str1):
  length = len(str1)

  if length > 2:
    if str1[-3:] == 'ing':
      str1 += 'ly'
    else:
      str1 += 'ing'

  return str1
print(add_string('ab'))
print(add_string('abc'))
print(add_string('string'))

7. Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, 
if 'bad' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.

def not_poor(str1):
  snot = str1.find('not')
  sbad = str1.find('poor')

  if sbad > snot:
    str1 = str1.replace(str1[snot:(sbad+4)], 'good')

  return str1
print(not_poor('The lyrics is not that poor!'))

8. Write a Python function that takes a list of words and returns the length of the longest one.?

def find_longest_word(words_list):
    word_len = []
    for n in words_list:
        word_len.append((len(n), n))
    word_len.sort()
    return word_len[-1][1]
print(find_longest_word(["PHP", "Exercises", "Backend"]))

9. Write a Python program to remove the nth index character from a nonempty string.?

def remove_char(str, n):
      first_part = str[:n] 
      last_pasrt = str[n+1:]
      return first_part + last_pasrt
print(remove_char('Python', 0))
print(remove_char('Python', 3))
print(remove_char('Python', 5))

10. Write a Python program to change a given string to a new string where the first and last chars have been exchanged.?

def change_sring(str1):
      return str1[-1:] + str1[1:-1] + str1[:1]
	  
print(change_sring('abcd'))
print(change_sring('12345'))

11. Write a Python program to remove the characters which have odd index values of a given string.?

def odd_values_string(str):
  result = "" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result

print(odd_values_string('abcdef'))
print(odd_values_string('python'))

12. Write a Python program to count the occurrences of each word in a given sentence.?

def word_count(str):
    counts = dict()
    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    return counts

print( word_count('the quick brown fox jumps over the lazy dog.'))

13. Write a Python script that takes input from the user and displays that input back in upper and lower cases.

user_input = input("What's your favourite language? ")
print("My favourite language is ", user_input.upper())
print("My favourite language is ", user_input.lower())

What's your favourite language? english                                                                       
My favourite language is  ENGLISH                                                                             
My favourite language is  english 

14. Write a Python program that accepts a comma separated sequence of words as input and prints the unique words in sorted form
(alphanumerically).

items = input("Input comma separated sequence of words")
words = [word for word in items.split(",")]
print(",".join(sorted(list(set(words)))))

Input comma separated sequence of words red, black, pink, green                                               
 black, green, pink, red 

15. Write a Python function to create the HTML string with tags around the word(s).

def add_tags(tag, word):
	return "<%s>%s" % (tag, word, tag)
print(add_tags('i', 'Python'))
print(add_tags('b', 'Python Tutorial'))

Python  ---- italic                                                                                        
Python Tutorial ---Bold

16. Write a Python program to print the following floating numbers upto 2 decimal places.

x = 3.1415926
y = 12.9999
print("\nOriginal Number: ", x)
print("Formatted Number: "+"{:.2f}".format(x));
print("Original Number: ", y)
print("Formatted Number: "+"{:.2f}".format(y));
print() 

Original Number:  3.1415926                                                                                   
Formatted Number: 3.14                                                                                        
Original Number:  12.9999                                                                                     
Formatted Number: 13.00 

17.Write a Python program to print the following integers with '*' on the right of specified width. 

x = 3
y = 123
print("\nOriginal Number: ", x)
print("Formatted Number(right padding, width 2): "+"{:*< 2d}".format(x));
print("Original Number: ", y)
print("Formatted Number(right padding, width 6): "+"{:*< 6d}".format(y));
print()

Original Number:  3                                                                                           
Formatted Number(right padding, width 2): 3*                                                                  
Original Number:  123                                                                                         
Formatted Number(right padding, width 6): 123*** 

18.Write a Python program to display a number with a comma separator.

x = 3000000
y = 30000000
print("\nOriginal Number: ", x)
print("Formatted Number with comma separator: "+"{:,}".format(x));
print("Original Number: ", y)
print("Formatted Number with comma separator: "+"{:,}".format(y));
print()


19. Write a Python program to display a number in left, right and center aligned of width 10.
x = 22
print("\nOriginal Number: ", x)
print("Left aligned (width 10)   :"+"{:< 10d}".format(x));
print("Right aligned (width 10)  :"+"{:10d}".format(x));
print("Center aligned (width 10) :"+"{:^10d}".format(x));
print()

Original Number:  22                                                                                          
Left aligned (width 10)   :22                                                                                 
Right aligned (width 10)  :        22                                                                         
Center aligned (width 10) :    22 

20.Write a Python program to reverse words in a string.

>>> def reverse():
	s = input('enter a gs')
	print(' '.join(s.split()[::-1]))
>>> reverse()
enter a gsThis is a challenging part
part challenging a is This




tuples:
------
A tuple is a sequence of immutable Python objects. Tuples are sequences, just like lists. 
The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, 
whereas lists use square brackets. Creating a tuple is as simple as putting different comma-separated values.

Advantage of tuple over list:
----------------------------
Since, tuples are quite similiar to lists, both of them are used in similar situations as well.

We generally use tuple for heterogeneous (different) datatypes and list for homogeneous (similar) datatypes.
Since tuple are immutable, iterating through tuple is faster than with list. So there is a slight performance boost.
Tuples that contain immutable elements can be used as key for a dictionary. With list, this is not possible.


# empty tuple
# Output: ()
my_tuple = ()
print(my_tuple)

# tuple having integers
# Output: (1, 2, 3)
my_tuple = (1, 2, 3)
print(my_tuple)

# tuple with mixed datatypes
# Output: (1, "Hello", 3.4)
my_tuple = (1, "Hello", 3.4)
print(my_tuple)

# nested tuple
# Output: ("mouse", [8, 4, 6], (1, 2, 3))
my_tuple = ("mouse", [8, 4, 6], (1, 2, 3))
print(my_tuple)

# tuple can be created without parentheses
# also called tuple packing
# Output: 3, 4.6, "dog"

my_tuple = 3, 4.6, "dog"
print(my_tuple)

# tuple unpacking is also possible
# Output:
# 3
# 4.6
# dog
a, b, c = my_tuple
print(a)
print(b)
print(c)


my_tuple = ('malli')
print(type(my_tuple))
<class 'str'>

my_tuple = 1,2,3,4
print(type(my_tuple))
(1,2,3,4)

my_tuple = ('a','p','p','l','e',)
# Count
# Output: 2
print(my_tuple.count('p'))

# Index
# Output: 3
print(my_tuple.index('l'))


Tuples Questions and answers:-
----------------------------

1. Write a Python program to create a tuple.

>>> #Create an empty tuple 
>>> x = ()
>>> print(x)
>>> #Create an empty tuple with tuple() function built-in Python
>>> tuplex = tuple()
>>> print(tuplex)

()                                                                                                            
() 

2. Write a Python program to create a tuple with different data types.  

>>> #Create a tuple with different data types
>>> tuplex = ("tuple", False, 3.2, 1)
>>> print(tuplex)

('tuple', False, 3.2, 1) 
 

3. Write a Python program to create a tuple with numbers and print one item.  

>>> #Create a tuple with numbers
>>> tuplex = 5, 10, 15, 20, 25
>>> print(tuplex)
>>> #Create a tuple of one item
>>> tuplex = 5,
>>> print(tuplex)

(5, 10, 15, 20, 25)                                                                                           
(5,) 
 

4. Write a Python program to unpack a tuple in several variables.  

>>> #create a tuple
>>> tuplex = 4, 8, 3 
>>> print(tuplex)
>>> n1, n2, n3 = tuplex
>>> #unpack a tuple in variables
>>> print(n1 + n2 + n3) 
>>> #the number of variables must be equal to the number of items of the tuple
>>> n1, n2, n3, n4 = tuplex 

(4, 8, 3)                                                                                                     
15                                                                                                            
Traceback (most recent call last):                                                                            
  File "32fd05c0-3096-11e7-a6a0-0b37d4d0b2c6.py", line 8, in <module>                                         
    n1, n2, n3, n4 = tuplex                                                                                   
ValueError: not enough values to unpack (expected 4, got 3) 
 

5. Write a Python program to add an item in a tuple.  

 >>> #create a tuple
>>> tuplex = (4, 6, 2, 8, 3, 1) 
>>> print(tuplex)
>>> #tuples are immutable, so you can not add new elements
>>> #using merge of tuples with the + operator you can add an element and it will create a new tuple
>>> tuplex = tuplex + (9,)
>>> print(tuplex)
>>> #adding items in a specific index
>>> tuplex = tuplex[:5] + (15, 20, 25) + tuplex[:5]
>>> print(tuplex)
>>> #converting the tuple to list
>>> listx = list(tuplex) 
>>> #use different ways to add items in list
>>> listx.append(30)
>>> tuplex = tuple(listx)
>>> print(tuplex)

(4, 6, 2, 8, 3, 1)                                                                                            
(4, 6, 2, 8, 3, 1, 9)                                                                                         
(4, 6, 2, 8, 3, 15, 20, 25, 4, 6, 2, 8, 3)                                                                    
(4, 6, 2, 8, 3, 15, 20, 25, 4, 6, 2, 8, 3, 30)

6. Write a Python program to convert a tuple to a string.  

tup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')
str =  ''.join(tup)
print(str)

exercises  

7. Write a Python program to get the 4th element and 4th element from last of a tuple.  

>>> #Get an item of the tuple
>>> tuplex = ("w", 3, "r", "e", "s", "o", "u", "r", "c", "e")
>>> print(tuplex)
>>> #Get item (4th element)of the tuple by index
>>> item = tuplex[3]
>>> print(item)
>>> #Get item (4th element from last)by index negative
>>> item1 = tuplex[-4]
>>> print(item1)

('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e')                                                              
e                                                                                                             
u

8. Write a Python program to create the colon of a tuple.  

>>> from copy import deepcopy
>>> #create a tuple
>>> tuplex = ("HELLO", 5, [], True) 
>>> print(tuplex)
>>> #make a copy of a tuple using deepcopy() function
>>> tuplex_clone = deepcopy(tuplex)
>>> tuplex_clone[2].append(50)
>>> print(tuplex_clone)
>>> print(tuplex)
>>> 

('HELLO', 5, [], True)                                                                                        
('HELLO', 5, [50], True)                                                                                      
('HELLO', 5, [], True) 

9. Write a Python program to find the repeated items of a tuple.  

 >>> #create a tuple
>>> tuplex = 2, 4, 5, 6, 2, 3, 4, 4, 7 
>>> print(tuplex)
>>> #return the number of times it appears in the tuple.
>>> count = tuplex.count(4)
>>> print(count)

(2, 4, 5, 6, 2, 3, 4, 4, 7)                                                                                   
3   

10. Write a Python program to check whether an element exists within a tuple.  

 >>> tuplex = ("w", 3, "r", "e", "s", "o", "u", "r", "c", "e")
>>> print("r" in tuplex)
>>> print(5 in tuplex)

True
False

11. Write a Python program to convert a list to a tuple.  

 >>> #Convert list to tuple
>>> listx = [5, 10, 7, 4, 15, 3]
>>> print(listx)
>>> #use the tuple() function built-in Python, passing as parameter the list
>>> tuplex = tuple(listx)
>>> print(tuplex)

[5, 10, 7, 4, 15, 3]                                                                                          
(5, 10, 7, 4, 15, 3)

12. Write a Python program to remove an item from a tuple.  

>>> #create a tuple
>>> tuplex = "w", 3, "r", "s", "o", "u", "r", "c", "e"
>>> print(tuplex)
>>> #tuples are immutable, so you can not remove elements
>>> #using merge of tuples with the + operator you can remove an item and it will create a new tuple
>>> tuplex = tuplex[:2] + tuplex[3:]
>>> print(tuplex)
>>> #converting the tuple to list
>>> listx = list(tuplex) 
>>> #use different ways to remove an item of the list
>>> listx.remove("c") 
>>> #converting the tuple to list
>>> tuplex = tuple(listx)
>>> print(tuplex)

('w', 3, 'r', 's', 'o', 'u', 'r', 'c', 'e')                                                                   
('w', 3, 's', 'o', 'u', 'r', 'c', 'e')                                                                        
('w', 3, 's', 'o', 'u', 'r', 'e')  

13. Write a Python program to slice a tuple.  

>>> #create a tuple
>>> tuplex = (2, 4, 3, 5, 4, 6, 7, 8, 6, 1)
>>> #used tuple[start:stop] the start index is inclusive and the stop index
>>> _slice = tuplex[3:5]
>>> #is exclusive
>>> print(_slice)

(5, 4)  
 

14. Write a Python program to find the index of an item of a tuple.  

>>> #create a tuple
>>> tuplex = tuple("index tuple")
>>> print(tuplex)
>>> #get index of the first item whose value is passed as parameter
>>> index = tuplex.index("p")
>>> print(index)
 
('i', 'n', 'd', 'e', 'x', ' ', 't', 'u', 'p', 'l', 'e')                                                       
8 

15. Write a Python program to find the length of a tuple.  

>>> #create a tuple
>>> tuplex = tuple("w3resource")
>>> print(tuplex)
>>> #use the len() function to known the length of tuple
>>> print(len(tuplex))

('w', '3', 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e')                                                            
10   
 

16. Write a Python program to convert a tuple to a dictionary.  

 >>> #create a tuple
>>> tuplex = ((2, "w"),(3, "r"))
>>> print(dict((y, x) for x, y in tuplex))

{'r': 3, 'w': 2}

17. Write a Python program to unzip a list of tuples into individual lists.  

 >>> #create a tuple
>>> l = [(1,2), (3,4), (8,9)]
>>> printlist((zip(*l)))

[(1, 3, 8), (2, 4, 9)] 

18. Write a Python program to reverse a tuple.  

 >>> #create a tuple
>>> x = ("w3resource")
>>> # Reversed the tuple
>>> y = reversed(x)
>>> print(tuple(y))
>>> #create another tuple
>>> x = (5, 10, 15, 20)
>>> # Reversed the tuple
>>> y = reversed(x)
>>> print(tuple(y))

('e', 'c', 'r', 'u', 'o', 's', 'e', 'r', '3', 'w')                                                            
(20, 15, 10, 5) 

19. Write a Python program to convert a list of tuples into a dictionary.  

 >>> #create a list
>>> l = [("x", 1), ("x", 2), ("x", 3), ("y", 1), ("y", 2), ("z", 1)]
>>> d = {}
>>> for a, b in l:
>>>     d.setdefault(a, []).append(b)
>>> print (d)

{'y': [1, 2], 'z': [1], 'x': [1, 2, 3]} 

20. Write a Python program to print a tuple with string formatting.  
Sample tuple : (100, 200, 300)
Output : This is a tuple (100, 200, 300)

t = (100, 200, 300)
print('This is a tuple {0}'.format(t))

This is a tuple (100, 200, 300) 

21. Write a Python program to replace last value of tuples in a list.  

Sample list: [(10, 20, 40), (40, 50, 60), (70, 80, 90)]
Expected Output: [(10, 20, 100), (40, 50, 100), (70, 80, 100)]

l = [(10, 20, 40), (40, 50, 60), (70, 80, 90)]
print([t[:-1] + (100,) for t in l])

[(10, 20, 100), (40, 50, 100), (70, 80, 100)]  

22. Write a Python program to replace last value of tuples in a list.  
Sample data: [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]
Expected output: [('',), ('a', 'b'), ('a', 'b', 'c'), 'd']

L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]
L = [t for t in L if t]
print(L)

[('',), ('a', 'b'), ('a', 'b', 'c'), 'd'] 

23. Write a Python program to sort a tuple by its float element.  
Sample data: [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]
Expected Output: [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]

 price = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]
print( sorted(price, key=lambda x: float(x[1]), reverse=True))

[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]

24. Write a Python program to count the elements in a list until an element is a tuple.  

num = [10,20,30,(10,20),40]
ctr = 0
for n in num:
    if isinstance(n, tuple):
        break
    ctr += 1
print(ctr)

3
 

set:
---
A set is an unordered collection of items. Every element is unique (no duplicates) and must be immutable 
which cannot be changed).
However, the set itself is mutable. We can add or remove items from it.
Sets can be used to perform mathematical set operations like union, intersection, symmetric difference etc.

my_set = {1,2,3,(1,2,3),'malli'}
print(my_set)
{1, 2, 3, (1, 2, 3), 'malli'}
print(type(my_set))     
<class 'set'>

# set do not have duplicates
# Output: {1, 2, 3, 4}
my_set = {1,2,3,4,3,2}
print(my_set)

# set cannot have mutable items
# here [3, 4] is a mutable list
# If you uncomment line my_set = {1,2,[3,4]}
# this will cause an error.
# TypeError: unhashable type: 'list'

#my_set = {1, 2, [3, 4]}

# we can make set from a list
# Output: {1, 2, 3}
my_set = set([1,2,3,2])
print(my_set)


# initialize a with {}
a = {}

# check data type of a
# Output: <class 'dict'>
print(type(a))

# initialize a with set()
a = set()

# check data type of a
# Output: <class 'set'>
print(type(a))


# initialize my_set
my_set = {1,3}
print(my_set)

# if you uncomment line 9,
# you will get an error
# TypeError: 'set' object does not support indexing

#my_set[0]

# add an element
# Output: {1, 2, 3}
my_set.add(2)
print(my_set)

# add multiple elements
# Output: {1, 2, 3, 4}
my_set.update([2,3,4])
print(my_set)

# add list and set
# Output: {1, 2, 3, 4, 5, 6, 8}
my_set.update([4,5], {1,6,8})
print(my_set)


# initialize my_set
my_set = {1, 3, 4, 5, 6}
print(my_set)

# discard an element
# Output: {1, 3, 5, 6}
my_set.discard(4)
print(my_set)

# remove an element
# Output: {1, 3, 5}
my_set.remove(6)
print(my_set)

# discard an element
# not present in my_set
# Output: {1, 3, 5}
my_set.discard(2)
print(my_set)

# remove an element
# not present in my_set
# If you uncomment .remove(2),
# you will get an error.
# Output: KeyError: 2

#my_set.remove(2)



# initialize my_set
# Output: set of unique elements
my_set = set("HelloWorld")
print(my_set)
{'w', 'l', 'o', 'r', 'd', 'e', 'H'}

# pop an element
# Output: random element
print(my_set.pop())
w

# pop another element
# Output: random element
my_set.pop()
print(my_set)
{'l', 'o', 'r', 'd', 'e', 'H'}
# clear my_set
#Output: set()
my_set.clear()
print(my_set)
set()


add()	
-----
Add an element to a set
s = {1,2,3,'malli'}
s.add('mallikarjuna')
print(s)
{1, 2, 3, 'mallikarjuna', 'malli'}

clear()	
-------
Remove all elements form a set

s = {1,2,3,'malli'}
print(s)
{1,2,3,'malli'}
s.clear()
print(s)
set()

copy()	
------
Return a shallow copy of a set

s = {1,2,3,'malli'}
print(s)
{1,2,3,'malli'}
m = s.copy()
s.clear()
print(s)
set()
print(m)
{1,2,3,'malli'}

difference()	
------------
Return the difference of two or more sets as a new set

s = {1,2,3,4,5,6}
n = {5,3,4,5,7,8,9,0}
print(s.difference(n))
{1, 2, 6}
print(s - n)
{1, 2, 6}

s = {1,2,3,4,5,6}
n = {4,5,3}
r = {9,8,7,6}
print(s.difference(n).difference(r))
{1, 2}
print(s - n - r)
{1, 2}

difference_update()	
-------------------
Remove all elements of another set from this set


A = {'a', 'c', 'g', 'd'}
B = {'c', 'f', 'g'}

result = A.difference_update(B)

print('A = ', A)
A =  {'a', 'd'}
print('B = ', B)
B =  {'f', 'g', 'c'}
print('result = ', result)
result =  None

discard()	
---------
Remove an element from set if it is a member. (Do nothing if the element is not in set)

s = {1,2,3,4,5}
s.discard(4)
print(s)
{1, 2, 3, 5}

s = {1,2,3,4,5}
s.discard(4)
print(s)
{1, 2, 3, 5}
s.discard(8)
print(s)
{1, 2, 3, 5}

intersection()	
--------------
Return the intersection of two sets as a new set

The intersection() method returns the intersection of set A with all the sets (passed as argument).

A = {2, 3, 5, 4}
B = {2, 5, 100}
C = {2, 3, 8, 9, 10}

print(B.intersection(A)) or (B & A)
{2, 5}
print(B.intersection(C)) or (B & C)
{2}
print(A.intersection(C)) or (A & c)
{2, 3}
print(C.intersection(A, B)) or  (A & B & c)
{2}

intersection_update()
---------------------
This method returns None (meaning, absence of a return value). It only updates the set calling the intersection_update() method.

A = {1, 2, 3, 4}
B = {2, 3, 4, 5}

result = A.intersection_update(B)

print('result =', result)
result = None
print('A =', A)
A = {2, 3, 4}
print('B =', B)
B = {2, 3, 4, 5, 6}


A = {1, 2, 3, 4}
B = {2, 3, 4, 5, 6}
C = {4, 5, 6, 9, 10}

result = C.intersection_update(B, A)

print('result =', result)
result = None
print('C =', C)
C = {4}
print('B =', B)
B = {2, 3, 4, 5, 6}
print('A =', A)
A = {1, 2, 3, 4}



isdisjoint()
------------
The isdisjoint() method returns

True if two sets are disjoint sets (if set_a and set_b are disjoint sets in above syntax)
False if two sets are not disjoint sets

A = {1, 2, 3, 4}
B = {5, 6, 7}
C = {4, 5, 6}

print('Are A and B disjoint?', A.isdisjoint(B))
Are A and B disjoint? True
print('Are A and C disjoint?', A.isdisjoint(C))
Are A and C disjoint? False

issubset()
---------
The issubset() returns

True if A is a subset of B
False if A is not a subset of B

A = {1, 2, 3}
B = {1, 2, 3, 4, 5}
C = {1, 2, 4, 5}

# Returns True
print(A.issubset(B))

# Returns False
# B is not subset of A
print(B.issubset(A))

# Returns False
print(A.issubset(C))

# Returns True
print(C.issubset(B))

issuperser()
------------
The issuperset() returns

True if A is a superset of B
False if A is not a superset of B

A = {1, 2, 3, 4, 5}
B = {1, 2, 3}
C = {1, 2, 3}

# Returns True
print(A.issuperset(B))

# Returns False
print(B.issuperset(A))

# Returns True
print(C.issuperset(B))

pop()	
-----
Remove and return an arbitary set element. Raise KeyError if the set is empty

A ={'a', 'b', 'c', 'd'}

print('Return Value is', A.pop())
Return Value is d
print('A = ', A)
A =  {'a', 'b', 'c'}

remove()
--------
Remove an element from a set. If the element is not a member, raise a KeyError

# language set
language = {'English', 'French', 'German'}

# 'German' element is removed
language.remove('German')

# Updated language set
print('Updated language set: ', language)
Updated language set:  {'English', 'French'}

# animal set
animal = {'cat', 'dog', 'rabbit', 'guinea pig'}

# Deleting 'fish' element
animal.remove('fish')

# Updated animal
print('Updated animal set: ', animal)
Traceback (most recent call last):
  File "<stdin>", line 5, in <module>
    animal.remove('fish')
KeyError: 'fish'


symmetric_difference()	
----------------------
Return the symmetric difference of two sets as a new set

A = {'a', 'b', 'c', 'd'}
B = {'c', 'd', 'e' }
C = {}

print(A.symmetric_difference(B))
{'b', 'a', 'e'}
print(B.symmetric_difference(A))
{'b', 'e', 'a'}
print(A.symmetric_difference(C))
{'b', 'd', 'c', 'a'}
print(B.symmetric_difference(C))
{'d', 'e', 'c'}

symmetric_difference_update()	
-----------------------------
Update a set with the symmetric difference of itself and another

A = {'a', 'c', 'd'}
B = {'c', 'd', 'e' }

result = A.symmetric_difference_update(B)

print('A = ', A)
A =  {'a', 'e'}
print('B = ', B)
B =  {'d', 'c', 'e'}
print('result = ', result)
result =  None


union()	
-------
Return the union of sets in a new set

A = {'a', 'c', 'd'}
B = {'c', 'd', 2 }
C= {1, 2, 3}

print('A U B =', A.union(B))
A U B = {2, 'a', 'd', 'c'}
print('B U C =', B.union(C))
B U C = {1, 2, 3, 'd', 'c'}
print('A U B U C =', A.union(B, C))
A U B U C = {1, 2, 3, 'a', 'd', 'c'}
print('A.union() = ', A.union())
A.union() =  {'a', 'd', 'c'}

update()	
--------
Update a set with the union of itself and others


A = {'a', 'b'}
B = {1, 2, 3}

result = A.update(B)
print('A =',A)
A = {'a', 1, 2, 3, 'b'}
print('B =',B)
B = {1, 2, 3}
print('result =',result)
result = None

# Update With String
string_alphabet = 'abc'
numbers_set = {1, 2}

numbers_set.update(string_alphabet)

print('numbers_set =',numbers_set)
numbers_set = {'c', 1, 2, 'b', 'a'}
print('string_alphabet =',string_alphabet)
string_alphabet = abc

# Update With Dictionary
info_dictionary = {'key': 1, 2 : 'lock'}
numbers_set = {'a', 'b'}

numbers_set.update(info_dictionary)
print('numbers_set =',numbers_set)
numbers_set = {'key', 'b', 2, 'a'}


1. Write a Python program to create a set.  

#Create a new empty set 
x = set()
print(x)
#Create a non empty set
n = set([0, 1, 2, 3, 4])
print(n)

set()                                                                                                         
{0, 1, 2, 3, 4}

2. Write a Python program to iteration over sets.  

#Create a set 
num_set = set([0, 1, 2, 3, 4, 5])
for n in num_set:
print(n)

0                                                                                                             
1                                                                                                             
2                                                                                                             
3                                                                                                             
4                                                                                                             
5 

3. Write a Python program to add member(s) in a set.  

#A new empty set
color_set = set()
color_set.add("Red")
print(color_set)
#Add multiple items
color_set.update(["Blue", "Green"])
print(color_set)

{'Red'}                                                                                                       
{'Red', 'Blue', 'Green'}

4. Write a Python program to remove item(s) from set  

num_set = set([0, 1, 3, 4, 5])
num_set.pop()
print(num_set)
num_set.pop()
print(num_set)

{1, 3, 4, 5}                                                                                                  
{3, 4, 5} 

5. Write a Python program to remove an item from a set if it is present in the set.  

#Create a new set
num_set = set([0, 1, 2, 3, 4, 5])
#Discard number 4
num_set.discard(4)
print(num_set)

{0, 1, 2, 3, 5} 

6. Write a Python program to create an intersection of sets.  


#Intersection
setx = set(["green", "blue"])
sety = set(["blue", "yellow"])
setz = setx & sety
print(setz)

{'blue'}

7. Write a Python program to create a union of sets.  

 #Union
setx = set(["green", "blue"])
sety = set(["blue", "yellow"])
seta = setx | sety
print(seta)

{'yellow', 'green', 'blue'} 

8. Write a Python program to create set difference.  

setx = set(["apple", "mango"])
sety = set(["mango", "orange"])
setz = setx & sety
print(setz)
#Set difference
setb = setx - setz
print(setb)

{'mango'}                                                                                                     
{'apple'} 

9. Write a Python program to create a symmetric difference.  


setx = set(["apple", "mango"])
sety = set(["mango", "orange"])
#Symmetric difference
setc = setx ^ sety
print(setc)

{'apple', 'orange'}

10. Write a Python program to issubset and issuperset.  

setx = set(["apple", "mango"])
sety = set(["mango", "orange"])
setz = set(["mango"])
issubset = setx <= sety
print(issubset)
issuperset = setx >= sety
print(issuperset)
issubset = setz <= sety
print(issubset)
issuperset = sety >= setz
print(issuperset)

False                                                                                                         
False                                                                                                         
True                                                                                                          
True

11. Write a Python program to create a shallow copy of sets.  

Note : Shallow copy is a bit-wise copy of an object. A new object is created that has an exact copy of the values in the original object.

setp = set(["Red", "Green"])
setq = set(["Green", "Red"])
#A shallow copy
setr = setp.copy()
print(setr)

{'Red', 'Green'}

12. Write a Python program to clear a set.  

setp = set(["Red", "Green"])
setq = setp.copy()
print(setq)
setq.clear()
print(setq)

{'Green', 'Red'}                                                                                              
set() 


13. Write a Python program to use of frozensets.  

x = frozenset([1, 2, 3, 4, 5])
y = frozenset([3, 4, 5, 6, 7])
#use isdisjoint(). Return True if the set has no elements in common with other. 
print(x.isdisjoint(y))
#use difference(). Return a new set with elements in the set that are not in the others.
print(x.difference(y))
#new set with elements from both x and y
print(x | y)

False                                                                                                         
frozenset({1, 2})                                                                                             
frozenset({1, 2, 3, 4, 5, 6, 7}) 

14. Write a Python program to find maximum and the minimum value in a set.  

#Create a set
seta = set([5, 10, 3, 15, 2, 20])
#Find maximum value
print(max(seta))
#Find minimum value
print(min(seta))

20                                                                                                            
2 

15. Write a Python program to find the length of a set.  

#Create a set
seta = set([5, 10, 3, 15, 2, 20])
#Find the length use len()
print(len(seta))

6 



Regular Expressions Questions and Answers:-
-----------------------------------------

1. Write a Python program to check that a string contains only a certain set of characters (in this case a-z, A-Z and 0-9).  

import re
def is_allowed_specific_char(string):
    charRe = re.compile(r'[^a-zA-Z0-9.]')
    string = charRe.search(string)
    return not bool(string)

print(is_allowed_specific_char("ABCDEFabcdef123450")) 
print(is_allowed_specific_char("*&%@#!}{"))

True                                                                                                          
False  

2. Write a Python program that matches a string that has an a followed by zero or more b's.  

import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("ac"))
print(text_match("abc"))
print(text_match("abbc"))

Found a match!                                                                                                
Found a match!                                                                                                
Found a match!
 

3. Write a Python program that matches a string that has an a followed by one or more b's.  

import re
def text_match(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("ab"))
print(text_match("abc"))

Found a match!                                                                                                
Found a match!

4. Write a Python program that matches a string that has an a followed by zero or one 'b'.  

import re
def text_match(text):
        patterns = 'ab?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("ab"))
print(text_match("abc"))
print(text_match("abbc"))
print(text_match("aabbc"))

Found a match!                                                                                                
Found a match!                                                                                                
Found a match!                                                                                                
Found a match!

5. Write a Python program that matches a string that has an a followed by three 'b'.  

import re
def text_match(text):
        patterns = 'ab{3}?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("abbb"))
print(text_match("aabbbbbc"))

Found a match!                                                                                                
Found a match!

6. Write a Python program that matches a string that has an a followed by two to three 'b'.  

import re
def text_match(text):
        patterns = 'ab{2,3}?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("ab"))
print(text_match("aabbbbbc"))

Not matched!                                                                                                  
Found a match!

7. Write a Python program to find sequences of lowercase letters joined with a underscore.  

import re
def text_match(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("aab_cbbbc"))
print(text_match("aab_Abbbc"))
print(text_match("Aaab_abbbc"))

Found a match!                                                                                                
Not matched!                                                                                                  
Not matched!

8. Write a Python program to find sequences of one upper case letter followed by lower case letters.  

import re
def text_match(text):
        patterns = 'a.*?b$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("aabbbbd"))
print(text_match("aabAbbbc"))
print(text_match("accddbbjjjb"))

Not matched!                                                                                                  
Not matched!                                                                                                  
Found a match!

9. Write a Python program that matches a string that has an 'a' followed by anything, ending in 'b'.  

import re
def text_match(text):
        patterns = 'a.*?b$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("aabbbbd"))
print(text_match("aabAbbbc"))
print(text_match("accddbbjjjb"))

Not matched!                                                                                                  
Not matched!                                                                                                  
Found a match!

10. Write a Python program that matches a word at the beginning of a string.  

import re
def text_match(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("The quick brown fox jumps over the lazy dog."))
print(text_match(" The quick brown fox jumps over the lazy dog."))

Found a match!                                                                                                
Not matched!

11. Write a Python program that matches a word at end of string, with optional punctuation.  

import re
def text_match(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("The quick brown fox jumps over the lazy dog."))
print(text_match("The quick brown fox jumps over the lazy dog. "))
print(text_match("The quick brown fox jumps over the lazy dog "))

Found a match!                                                                                                
Not matched!                                                                                                  
Not matched!

12. Write a Python program that matches a word containing 'z'.  

import re
def text_match(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("The quick brown fox jumps over the lazy dog."))
print(text_match("Python Exercises."))

Found a match!                                                                                                
Not matched!

13. Write a Python program that matches a word containing 'z', not start or end of the word.  

import re
def text_match(text):
        patterns = '\Bz\B'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("The quick brown fox jumps over the lazy dog."))
print(text_match("Python Exercises."))

Found a match!                                                                                                
Not matched!

14. Write a Python program to match a string that contains only upper and lowercase letters, numbers, and underscores.  

import re
def text_match(text):
        patterns = '^[a-zA-Z0-9_]*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("The quick brown fox jumps over the lazy dog."))
print(text_match("Python_Exercises_1"))

Not matched!                                                                                                  
Found a match! 

15. Write a Python program where a string will start with a specific number.  

import re
def match_num(string):
    text = re.compile(r"^5")
    if text.match(string):
        return True
    else:
        return False
print(match_num('5-2345861'))
print(match_num('6-2345861'))

True                                                                                                          
False

16. Write a Python program to remove leading zeros from an IP address.  

import re
ip = "216.08.094.196"
string = re.sub('\.[0]*', '.', ip)
print(string)

216.8.94.196 

17. Write a Python program to check for a number at the end of a string.  

import re
def end_num(string):
    text = re.compile(r".*[0-9]$")
    if text.match(string):
        return True
    else:
        return False

print(end_num('abcdef'))
print(end_num('abcdef6'))

False
True

18. Write a Python program to search the numbers (0-9) of length between 1 to 3 in a given string.  

"Exercises number 1, 12, 13, and 345 are important"

import re
results = re.finditer(r"([0-9]{1,3})", "Exercises number 1, 12, 13, and 345 are important")
print("Number of length 1 to 3")
for n in results:
     print(n.group(0))

Number of length 1 to 3                                                                                       
1                                                                                                             
12                                                                                                            
13                                                                                                            
345 

19. Write a Python program to search some literals strings in a string.  
Sample text : 'The quick brown fox jumps over the lazy dog.'
Searched words : 'fox', 'dog', 'horse'

import re
patterns = [ 'fox', 'dog', 'horse' ]
text = 'The quick brown fox jumps over the lazy dog.'
for pattern in patterns:
    print('Searching for "%s" in "%s" ->' % (pattern, text),)
    if re.search(pattern,  text):
        print('Matched!')
    else:
        print('Not Matched!')

Searching for "fox" in "The quick brown fox jumps over the lazy dog." ->                                      
Matched!                                                                                                      
Searching for "dog" in "The quick brown fox jumps over the lazy dog." ->                                      
Matched!                                                                                                      
Searching for "horse" in "The quick brown fox jumps over the lazy dog." ->                                    
Not Matched!

20. Write a Python program to search a literals string in a string and also find the location within the original string where the pattern occurs.  

Sample text : 'The quick brown fox jumps over the lazy dog.'
Searched words : 'fox'

import re
pattern = 'fox'
text = 'The quick brown fox jumps over the lazy dog.'
match = re.search(pattern, text)
s = match.start()
e = match.end()
print('Found "%s" in "%s" from %d to %d ' % \
    (match.re.pattern, match.string, s, e))

Found "fox" in "The quick brown fox jumps over the lazy dog." from 16 to 19

21. Write a Python program to find the substrings within a string.  

Sample text :

'Python exercises, PHP exercises, C# exercises'

Pattern :

'exercises'

Note: There are two instances of exercises in the input string.

import re
text = 'Python exercises, PHP exercises, C# exercises'
pattern = 'exercises'
for match in re.findall(pattern, text):
    print('Found "%s"' % match)

Found "exercises"                                                                                             
Found "exercises"                                                                                             
Found "exercises"   

22. Write a Python program to find the occurrence and position of the substrings within a string.  

import re
text = 'Python exercises, PHP exercises, C# exercises'
pattern = 'exercises'
for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    print('Found "%s" at %d:%d' % (text[s:e], s, e))
	
Found "exercises" at 7:16                                                                                     
Found "exercises" at 22:31                                                                                    
Found "exercises" at 36:45

23. Write a Python program to replace whitespaces with an underscore and vice versa.  

import re
text = 'Python Exercises'
text =text.replace (" ", "_")
print(text)
text =text.replace ("_", " ")
print(text)

Python_Exercises                                                                                              
Python Exercises

24. Write a Python program to extract year, month and date from a an url.  

import re
def extract_date(url):
        return re.findall(r'/(\d{4})/(\d{1,2})/(\d{1,2})/', url)
url1= "https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/"
print(extract_date(url1))

[('2016', '09', '02')] 

25. Write a Python program to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.  

import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
dt1 = "2026-01-02"
print("Original date in YYY-MM-DD Format: ",dt1)
print("New date in DD-MM-YYYY Format: ",change_date_format(dt1))

Original date in YYY-MM-DD Format:  2026-01-02                                                                
New date in DD-MM-YYYY Format:  02-01-2026 

26. Write a Python program to match if two words from a list of words starting with letter 'P'.  

import re
# Sample strings.
words = ["Python PHP", "Java JavaScript", "c c++"]
for w in words:
        m = re.match("(P\w+)\W(P\w+)", w)
        # Check for success
        if m:
            print(m.groups())
			
('Python', 'PHP')

27. Write a Python program to separate and print the numbers of a given string.  

import re
# Sample string.
text = "Ten 10, Twenty 20, Thirty 30"
result = re.split("\D+", text)
# Print results.
for element in result:
    print(element)
	
10                                                                                                            
20                                                                                                            
30

28. Write a Python program to find all words starting with 'a' or 'e' in a given string.  

import re
# Input.
text = "The following example creates an ArrayList with a capacity of 50 elements. Four elements are then added to the 
ArrayList and the ArrayList is trimmed accordingly."
#find all the words starting with 'a' or 'e'
list = re.findall("[ae]\w+", text)
# Print result.
print(list)

['example', 'eates', 'an', 'ayList', 'apacity', 'elements', 'elements', 'are', 'en', 'added', 'ayList', 'and',
 'ayList', 'ed', 'accordingly'] 

29. Write a Python program to separate and print the numbers and their position of a given string.  

import re
# Input.
text = "The following example creates an ArrayList with a capacity of 50 elements. Four elements are then added to the 
ArrayList and the ArrayList is trimmed accordingly."

for m in re.finditer("\d+", text):
    print(m.group(0))
    print("Index position:", m.start())
	
50                                                                                                            
Index position: 62 

30. Write a Python program to abbreviate 'Road' as 'Rd.' in a given string.  

import re
street = '21 Ramkrishna Road'
print(re.sub('Road$', 'Rd.', street))

21 Ramkrishna Rd.   

31. Write a Python program to replace all occurrences of space, comma, or dot with a colon.  

import re
text = 'Python Exercises, PHP exercises.'
print(re.sub("[ ,.]", ":", text))

Python:Exercises::PHP:exercises:

32. Write a Python program to replace maximum 2 occurrences of space, comma, or dot with a colon.  

import re
text = 'Python Exercises, PHP exercises.'
print(re.sub("[ ,.]", ":", text, 2))

Python:Exercises: PHP exercises. 

33. Write a Python program to find all five characters long word in a string.  

import re
text = 'The quick brown fox jumps over the lazy dog.'
print(re.findall(r"\b\w{5}\b", text)).

['quick', 'brown', 'jumps']

34. Write a Python program to find all three, four, five characters long words in a string.  

import re
text = 'The quick brown fox jumps over the lazy dog.'
print(re.findall(r"\b\w{3,5}\b", text))

['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog'] 

35. Write a Python program to find all words which are at least 4 characters long in a string.  

import re
text = 'The quick brown fox jumps over the lazy dog.'
print(re.findall(r"\b\w{4,}\b", text))

['quick', 'brown', 'jumps', 'over', 'lazy'] 

36. Write a python program to convert camel case string to snake case string.  

def camel_to_snake(text):
        import re
        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()

print(camel_to_snake('PythonExercises'))

python_exercises   

37. Write a python program to convert snake case string to camel case string.  

def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))

print(snake_to_camel('python_exercises'))

PythonExercises


38. Write a Python program to extract values between quotation marks of a string.  

import re
text1 = '"Python", "PHP", "Java"'
print(re.findall(r'"(.*?)"', text1))

['Python', 'PHP', 'Java']

39. Write a Python program to remove multiple spaces in a string.  

import re
text1 = 'Python      Exercises'
print("Original string:",text1)
print("Without extra spaces:",re.sub(' +',' ',text1))

Original string: Python     Exercises                                                                        
Without extra spaces: Python Exercises 

40. Write a Python program to remove all whitespaces from a string.  

import re
text1 = ' Python    Exercises '
print("Original string:",text1)
print("Without extra spaces:",re.sub(r'\s+', '',text1))

Original string: Python    Exercises                                                                            
Without extra spaces: PythonExercises 

41. Write a Python program to remove everything except alphanumeric characters from a string.  

import re
text1 = '**//Python Exercises// - 12. '
pattern = re.compile('[\W_]+')
print(pattern.sub('', text1))

PythonExercises12

42. Write a Python program to find urls in a string.  

import re
text = '<p>Contents :</p><a href="https://w3resource.com">Python Examples</a><a href="http://github.com">Even More Examples</a>'
urls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text)
print("Original string: ",text)
print("Urls: ",urls)

Original string:  
Contents :
Python ExamplesEven More Examples                                                                                    
Urls:  ['https://w3resource.com', 'http://github.com'] 

43. Write a Python program to split a string at uppercase letters.  

import re
text = "PythonTutorialAndExercises"
print(re.findall('[A-Z][^A-Z]*', text))

['Python', 'Tutorial', 'And', 'Exercises']

44. Write a Python program to do a case-insensitive string replacement.  

import re
text = "PHP Exercises"
print("Original Text: ",text)
redata = re.compile(re.escape('php'), re.IGNORECASE)
new_text = redata.sub('Python', 'PHP Exercises')
print("Using 'php' replace PHP") 
print("New Text: ",new_text)

Original Text:  PHP Exercises                                                                                 
Using 'php' replace PHP                                                                                       
New Text:  Python Exercises 

45. Write a Python program to remove the ANSI escape sequences from a string.  

import re
text = "\t\u001b[0;35mgoogle.com\u001b[0m \u001b[0;36m216.58.218.206\u001b[0m"
print("Original Text: ",text)
reaesc = re.compile(r'\x1b[^m]*m')
new_text = reaesc.sub('', text)
print("New Text: ",new_text)

Original Text:          google.com 216.58.218.206                                                             
New Text:       google.com 216.58.218.206 

46. Write a Python program to find all adverbs and their positions in a given sentence.  

Sample text : "Clearly, he has no excuse for such behavior."

import re
text = "Clearly, he has no excuse for such behavior."
for m in re.finditer(r"\w+ly", text):
    print('%d-%d: %s' % (m.start(), m.end(), m.group(0)))

0-7: Clearly 
 

47. Write a Python program to split a string with multiple delimiters.  

Note : A delimiter is a sequence of one or more characters used to specify the boundary between separate, 
independent regions in plain text or other data streams. An example of a delimiter is the comma character, which acts as a field delimiter in a sequence of comma-separated values.

import re
text = 'The quick brown\nfox jumps*over the lazy dog.'
print(re.split('; |, |\*|\n',text))

['The quick brown', 'fox jumps', 'over the lazy dog.']

48. Write a Python program to check a decimal with a precision of 2.  

def is_decimal(num):
    import re
    dnumre = re.compile(r"""^[0-9]+(\.[0-9]{1,2})?$""")
    result = dnumre.search(num)
    return bool(result)

print(is_decimal('123.11'))
print(is_decimal('123.1'))
print(is_decimal('123'))
print(is_decimal('0.21'))

print(is_decimal('123.1214'))
print(is_decimal('3.124587'))
print(is_decimal('e666.86'))

True                                                                                                          
True                                                                                                          
True                                                                                                          
True                                                                                                          
False                                                                                                         
False                                                                                                         
False

49. Write a Python program to remove words from a string of length between 1 and a given number.  

def is_decimal(num):
import re
text = "The quick brown fox jumps over the lazy dog."
# remove words between 1 and 3
shortword = re.compile(r'\W*\b\w{1,3}\b')
print(shortword.sub('', text))

quick brown jumps over lazy.

50. Write a Python program to remove the parenthesis area in a string.  
Sample data : ["example (.com)", "w3resource", "github (.com)", "stackoverflow (.com)"]
Expected Output: 
example
w3resource
github
stackoverflow
 
import re
items = ["example (.com)", "w3resource", "github (.com)", "stackoverflow (.com)"]
for item in items:
    print(re.sub(r" ?\([^)]+\)", "", item))
	
example                                                                                                       
w3resource                                                                                                    
github                                                                                                        
stackoverflow
 
List:
-----
1.The list is a most versatile datatype available in Python which can be written as a list of comma-separated values (items) 
between square brackets. Important thing about a list is that items in a list need not be of the same type.
2.List is a collection of various numbers, strings, literals etc..
3. A list is a sequence of mutable python objects like floating numbers, string literals etc..

list1 = ['physics', 'chemistry', 1997, 2000]
list2 = [1, 2, 3, 4, 5 ]
list3 = ["a", "b", "c", "d"]

list1 = ['physics', 'chemistry', 1997, 2000]
list2 = [1, 2, 3, 4, 5, 6, 7 ]
print "list1[0]: ", list1[0]
list1[0]:  physics
print "list2[1:5]: ", list2[1:5]
list2[1:5]:  [2, 3, 4, 5]


append()
--------
The method append() appends a passed obj into the existing list.
s1 = [1,2,4,5,3,'a','b']
s1.append(10)
print(s1)
[1, 2, 4, 5, 3, 'a', 'b', 10]

count()
-------
The method count() returns count of how many times obj occurs in list.

s1 = [1,2,4,5,1,1,3,'a','b']

print(s1.count(1))
3

extend()
--------
The method extend() appends the contents of seq to list.

aList = [123, 'xyz', 'zara', 'abc', 123]
bList = [2009, 'manni']
aList.extend(bList)
print ("Extended List : ", aList)
Extended List :  [123, 'xyz', 'zara', 'abc', 123, 2009, 'manni']

index()
-------
The method index() returns the lowest index in list that obj appears.

aList = [123, 'xyz', 'zara', 'abc']
print ("Index for xyz : ", aList.index( 'xyz' ))
print "Index for zara : ", aList.index( 'zara' ) 
clear()
-------
The clear() method only empties the given list. It doesn't return any value.

lst = [1,2,3,4,5]
lst.clear()
print(lst)
[]

count()
-------
The count() method returns the number of occurrences of an element in a list.
lst = [1,2,1,2,1,1,1,1,1,1,3,4,5]
print(lst.count(1))
8

insert()
--------
The insert() method only inserts the element to the list. It doesn't return any value.

lst = [1,2,1,2,1,1,1,1,1,1,3,4,5]
lst.insert(3,'abcdef')
print(lst)
[1, 2, 1, 'abcdef', 2, 1, 1, 1, 1, 1, 1, 3, 4, 5]

pop()
-----
The pop() method returns the element present at the given index.
Also, the pop() method removes the element at the given index and updates the list.

lst = [1,2,'abcdef','d','sdvn']
lst.pop(2)
print(lst)
[1, 2, 'd', 'sdvn']

lst = [1,2,'abcdef','d','sdvn']
lst.pop()
print(lst)
[1,2,'abcdef','d']

remove()
--------
The remove() method only removes the given element from the list. It doesn't return any value.

lst = [1,2,'abcdef','d','sdvn']
lst.remove('abcdef')
print(lst)
[1, 2, 'd', 'sdvn']

reverse()
---------
The reverse() function doesn't return any value. It only reverses the elements and updates the list.

lst = [1,2,'abcdef','d','sdvn']
lst.reverse()
print(lst)
['sdvn', 'd', 'abcdef', 2, 1]

sort()
-----
sort() method doesn't return any value. Rather, it changes the original list.

If you want the original list, use sorted().

lst = [1234,45,24,25,343,56,1,2,3,4]
lst.sort()
print(lst)
[1, 2, 3, 4, 24, 25, 45, 56, 343, 1234]


Lists questions and Answers:-
---------------------------
1. Write a Python program to get the largest number from a list.

>>> s = [1,2,3,4,5,6]
>>> def fun():
	for i in s:
		a = 0
		if i > a:
			a = i
	print(a)	
>>> fun()
6

2.Write a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of 
non-empty tuples.

Sample List : [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]
Expected Result : [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]

def last(n): return n[-1]

def sort_list_last(tuples):
  return sorted(tuples, key=last)

print(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))
[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] 

3. Write a Python program to remove duplicates from a list.

>>> s = [1,2,3,4,5,1,2,3,4,5]
>>> n = []
>>> for i in s:
	   if i not in n:
		  n.append(i)
	print(n)
>>> fun()
[1, 2, 3, 4, 5]

4. Write a Python program to check a list is empty or not.

l = []
if not l:
  print("List is empty")
else:
  print('list is not empty')

5.Write a Python program to find the list of words that are longer than n from a given list of words.

def long_words(n, str):
    word_len = []
    txt = str.split(" ")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	
print(long_words(3, "The quick brown fox jumps over the lazy dog"))
['quick', 'brown', 'jumps', 'over', 'lazy']

6.Write a Python function that takes two lists and returns True if they have at least one common member.

def common_data(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result
print(common_data([1,2,3,4,5], [5,6,7,8,9]))
print(common_data([1,2,3,4,5], [6,7,8,9]))
True                                                                                                          
None 

7.Write a Python program to print a specified list after removing the 0th, 4th and 5th elements.

color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
color = [x for (i,x) in enumerate(color) if i not in (0,4,5)]
print(color)
['Green', 'White', 'Black']

8.Write a Python program to print the numbers of a specified list after removing even numbers from it.

num = [7,8, 120, 25, 44, 20, 27]
num = [x for x in num if x%2!=0]
print(num)
[7, 25, 27]

9.Write a Python program to shuffle and print a specified list.

from random import shuffle
color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
shuffle(color)
print(color)
['Yellow', 'Pink', 'Green', 'Red', 'Black', 'White']

10.Write a Python program to generate and print a list of first and last 5 elements where the values are square of numbers 
between 1 and 30 (both included).

def printValues():
	l = list()
	for i in range(1,21):
		l.append(i**2)
	print(l[:5])
	print(l[-5:])
printValues()

[1, 4, 9, 16, 25]                                                                                             
[256, 289, 324, 361, 400

11.Write a Python program to get the difference between the two lists.

list1 = [1, 2, 3, 4]
list2 = [1, 2]
print(list(set(list1) - set(list2)))
[3, 4] 

12.Write a Python program access the index of a list.

nums = [5, 15, 35, 8, 98]
for num_index, num_val in enumerate(nums):
    print(num_index, num_val)

0 5                                                                                                           
1 15                                                                                                          
2 35                                                                                                          
3 8                                                                                                           
4 98

13.Write a Python program to convert a list of characters into a string.

s = ['a', 'b', 'c', 'd']
str1 = ''.join(s)
print(str1)
abcd

14.Write a Python program to find the index of an item in a specified list..

num =[10, 30, 4, -6]
print(num.index(30))
1

15. Write a Python program to flatten a shallow list.

import itertools
original_list = [[2,4,3],[1,5,6], [9], [7,9,0]]
new_merged_list = list(itertools.chain(*original_list))
print(new_merged_list)
[2, 4, 3, 1, 5, 6, 9, 7, 9, 0]

16.Write a Python program to append a list to the second list.

list1 = [1, 2, 3, 0]
list2 = ['Red', 'Green', 'Black']
final_list = list1 + list2
print(final_list)
[1, 2, 3, 0, 'Red', 'Green', 'Black'] 

17.Write a Python program to select an item randomly from a list.

import random
color_list = ['Red', 'Blue', 'Green', 'White', 'Black']
print(random.choice(color_list))
Black

18.Write a python program to check whether two lists are circularly identical.

list1 = [10, 10, 0, 0, 10]
list2 = [10, 10, 10, 0, 0]
list3 = [1, 10, 10, 0, 0]

print('Compare list1 and list2')
print(' '.join(map(str, list2)) in ' '.join(map(str, list1 * 2)))
print('Compare list1 and list3')
print(' '.join(map(str, list3)) in ' '.join(map(str, list1 * 2)))

Compare list1 and list2                                                                                       
True                                                                                                          
Compare list1 and list3                                                                                       
False 

19.Write a python program to check whether two lists are circularly identical.

list1 = [10, 10, 0, 0, 10]
list2 = [10, 10, 10, 0, 0]
list3 = [1, 10, 10, 0, 0]

print('Compare list1 and list2')
print(' '.join(map(str, list2)) in ' '.join(map(str, list1 * 2)))
print('Compare list1 and list3')
print(' '.join(map(str, list3)) in ' '.join(map(str, list1 * 2)))

Compare list1 and list2                                                                                       
True                                                                                                          
Compare list1 and list3                                                                                       
False 



20.Write a Python program to find the second smallest number in a list.

def second_smallest(numbers):
    a1, a2 = float('inf'), float('inf')
    for x in numbers:
        if x <= a1:
            a1, a2 = x, a1
        elif x < a2:
            a2 = x
    return a2
print(second_smallest([1, 2, -8, -2, 0]))
-2

21.Write a Python program to find the second largest number in a list.

def second_largest(numbers):
    count = 0
    n1 = n2 = float('-inf')
    for x in numbers:
        count += 1
        if x > n2:
            if x >= n1:
                n1, n2 = x, n1            
            else:
                n2 = x
    return n2 if count >= 2 else None

print(second_largest([1, 2, -8, -2, 0]))
1

22.Write a Python program to get unique values from a list.?

my_list = [10, 20, 30, 40, 20, 50, 60, 40]
print("Original List : ",my_list)
my_set = set(my_list)
my_new_list = list(my_set)
print("List of unique numbers : ",my_new_list)

Original List :  [10, 20, 30, 40, 20, 50, 60, 40]                                                             
List of unique numbers :  [40, 10, 50, 20, 60, 30]  

23.Write a Python program to get the frequency of the elements in a list.

import collections
my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]
print("Original List : ",my_list)
ctr = collections.Counter(my_list)
print("Frequency of the elements in the List : ",ctr)

Original List :  [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]                                         
Frequency of the elements in the List :  Counter({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) 

24.Write a Python program to count the number of elements in a list within a specified range.?

def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr

list1 = [10,20,30,40,40,40,70,80,99]
print(count_range_in_list(list1, 40, 100))

list2 = ['a','b','c','d','e','f']
print(count_range_in_list(list2, 'a', 'e'))

6                                                                                                             
5

25.Write a Python program to generate all sublists of a list.

def sub_lists(my_list):
	subs = [[]]
	for i in range(len(my_list)):
		n = i+1
		while n <= len(my_list):
			sub = my_list[i:n]
			subs.append(sub)
			n += 1
	
	return subs

l1 = [10, 20, 30, 40]
l2 = ['X', 'Y', 'Z']
print(sub_lists(l1))
print(sub_lists(l2))

[[], [10], [10, 20], [10, 20, 30], [10, 20, 30, 40], [20], [20, 30], [20, 30, 40], [30], [30, 40], [40]]      
[[], ['X'], ['X', 'Y'], ['X', 'Y', 'Z'], ['Y'], ['Y', 'Z'], ['Z']]

26.Write a Python program using Sieve of Eratosthenes method for computing primes upto a specified number.

Note: In mathematics, the sieve of Eratosthenes, (Ancient Greek: κόσκινον Ἐρατοσθένους, kóskinon Eratosthénous) one of 
a number of prime number sieves, is a simple, ancient algorithm for finding all prime numbers up to any given limit.

def prime_eratosthenes(n):
    prime_list = []
    for i in range(2, n+1):
        if i not in prime_list:
            print (i)
            for j in range(i*i, n+1, i):
                prime_list.append(j)

print(prime_eratosthenes(100))';

2                                                                                                             
3                                                                                                             
5                                                                                                             
7                                                                                                             
11                                                                                                            
-------
79                                                                                                            
83                                                                                                            
89                                                                                                            
97                                                                                                            
None

27. Write a Python program to create a list by concatenating a given list which range goes from 1 to n.

Sample list : ['p', 'q']
n =5
Sample Output : ['p1', 'q1', 'p2', 'q2', 'p3', 'q3', 'p4', 'q4', 'p5', 'q5']

my_list = ['p', 'q']
n = 4
new_list = ['{}{}'.format(x, y) for y in range(1, n+1) for x in my_list]
print(new_list)

['p1', 'q1', 'p2', 'q2', 'p3', 'q3', 'p4', 'q4'] 

28.Write a Python program to get variable unique identification number or string.?

n = 100
print(format(id(n), 'x')) note: To get unique identification we will use 'x'
s = 'w3resource'
print(format(id(s), 'x')) 

a6aa40                                                                 
7f209e6c6670 

29.Write a Python program to find common items from two lists.?

color1 = "Red", "Green", "Orange", "White"
color2 = "Black", "Green", "White", "Pink"
print(set(color1) & set(color2))
'Green','White'

30.Write a Python program to change the position of every n-th value with the (n+1)th in a list.?

Sample list: [0,1,2,3,4,5]
Expected Output: [1, 0, 3, 2, 5, 4]

from itertools import zip_longest, chain, tee
def replace2copy(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))
n = [0,1,2,3,4,5]
print(replace2copy(n))
[1, 0, 3, 2, 5, 4]

31.Write a Python program to convert a list of multiple integers into a single integer.

Sample list: [11, 33, 50]
Expected Output: 113350

L = [11, 33, 50]
print("Original List: ",L)
x = int("".join(map(str, L)))
print("Single Integer: ",x)
113350

32.Write a Python program to split a list based on first character of word.?

from itertools import groupby
from operator import itemgetter

word_list = ['be','have','do','say','get','make','go','know','take','see','come','think',
     'look','want','give','use','find','tell','ask','work','seem','feel','leave','call']

for letter, words in groupby(sorted(word_list), key=itemgetter(0)):
    print(letter)
    for word in words:
        print(word)
a                                                                                                             
ask                                                                                                           
b                                                                                                             
be                                                                                                            
c                                                                                                             
call                                                                                                          
come                                                                                                          
d                                                                                                             
do        
-----
w                                                                                                             
want                                                                                                          
work  

33.Write a Python program to create multiple lists.

obj = {}
for i in range(1, 21):
    obj[str(i)] = []
print(obj)

{'1': [], '8': [], '14': [], '5': [], '17': [], '9': [], '2': [], '7': [], '16': [], '19': [], '4': [], '18': 
[], '13': [], '3': [], '15': [], '11': [], '20': [], '6': [], '12': [], '10': []}

34.Write a Python program to find missing and additional values in two lists.?

Sample data : Missing values in second list: b,a,c
Additional values in second list: g,h

list1 = ['a','b','c','d','e','f']
list2 = ['d','e','f','g','h']
print('Missing values in second list: ', ','.join(set(list1).difference(list2)))
print('Additional values in second list: ', ','.join(set(list2).difference(list1)))

Missing values in second list:  b,c,a                                                                         
Additional values in second list:  g,h

35.Write a Python program to split a list into different variables.?

color = [("Black", "#000000", "rgb(0, 0, 0)"), ("Red", "#FF0000", "rgb(255, 0, 0)"),
         ("Yellow", "#FFFF00", "rgb(255, 255, 0)")]
var1, var2, var3 = color
print(var1)
print(var2)
print(var3)
('Black', '#000000', 'rgb(0, 0, 0)')                                                                          
('Red', '#FF0000', 'rgb(255, 0, 0)')                                                                          
('Yellow', '#FFFF00', 'rgb(255, 255, 0)') 

36. Write a Python program to generate groups of five consecutive numbers in a list.?

l = [[5*i + j for j in range(1,6)] for i in range(5)]
print(l)
[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]  

37. Write a Python program to convert a pair of values into a sorted unique array.?

L = [(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2), (3, 4), (3, 4),
 (7, 8), (9, 10)]
print("Original List: ", L)
print("Sorted Unique Data:",sorted(set().union(*L)))
Original List:  [(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2), (3, 4), (3, 4), (7, 8), (9, 10)]             
Sorted Unique Data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 

38.Write a Python program to select the odd items of a list.?

x = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(x[::2])
[1, 3, 5, 7, 9]

39.Write a Python program to insert an element before each element of a list.?

color = ['Red', 'Green', 'Black']
print("Original List: ",color)
color = [v for elt in color for v in ('c', elt)]
print("Original List: ",color)
Original List:  ['Red', 'Green', 'Black']                                                                     
Original List:  ['c', 'Red', 'c', 'Green', 'c', 'Black'] 

40.Write a Python program to print a nested lists (each list on a new line) using the print() function. ?

colors = [['Red'], ['Green'], ['Black']]
print('\n'.join([str(lst) for lst in colors]))
['Red']                                                                                                       
['Green']                                                                                                     
['Black'] 

41.Write a Python program to convert list to list of dictionaries.?

Sample lists: ["Black", "Red", "Maroon", "Yellow"], ["#000000", "#FF0000", "#800000", "#FFFF00"]
Expected Output: [{'color_name': 'Black', 'color_code': '#000000'}, {'color_name': 'Red', 'color_code': '#FF0000'}, 
{'color_name': 'Maroon', 'color_code': '#800000'}, {'color_name': 'Yellow', 'color_code': '#FFFF00'}]

color_name = ["Black", "Red", "Maroon", "Yellow"]
color_code = ["#000000", "#FF0000", "#800000", "#FFFF00"]
print([{'color_name': f, 'color_code': c} for f, c in zip(color_name, color_code)])

[{'color_name': 'Black', 'color_code': '#000000'}, {'color_name': 'Red', 'color_code': '#FF0000'}, {'color_nam
e': 'Maroon', 'color_code': '#800000'}, {'color_name': 'Yellow', 'color_code': '#FFFF00'}] 

42.Write a Python program to sort a list of nested dictionaries.

my_list = [{'key': {'subkey': 1}}, {'key': {'subkey': 10}}, {'key': {'subkey': 5}}]
print("Original List: ")
print(my_list)
my_list.sort(key=lambda e: e['key']['subkey'], reverse=True)
print("Sorted List: ")
print(my_list)

Original List:                                                                                                
[{'key': {'subkey': 1}}, {'key': {'subkey': 10}}, {'key': {'subkey': 5}}]                                     
Sorted List:                                                                                                  
[{'key': {'subkey': 10}}, {'key': {'subkey': 5}}, {'key': {'subkey': 1}}] 

43.Write a Python program to split a list every Nth element.?

Sample list: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']
Expected Output: [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]

C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']
def list_slice(S, step):
    return [S[i::step] for i in range(step)]
print(list_slice(C,3))
[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] 

44.Write a Python program to compute the similarity between two lists.?

Sample data: ["red", "orange", "green", "blue", "white"], ["black", "yellow", "green", "blue"]
Expected Output: 
Color1-Color2: ['white', 'orange', 'red']
Color2-Color1: ['black', 'yellow']

from collections import Counter
color1 = ["red", "orange", "green", "blue", "white"]
color2 = ["black", "yellow", "green", "blue"]
counter1 = Counter(color1)
counter2 = Counter(color2)
print("Color1-Color2: ",list(counter1 - counter2))
print("Color2-Color1: ",list(counter2 - counter1))
Color1-Color2:  ['red', 'white', 'orange']                                                                    
Color2-Color1:  ['black', 'yellow'] 

45.Write a Python program to create a list with infinite elements.?

import itertools
c = itertools.count()
print(next(c))
print(next(c))
print(next(c))
print(next(c))
print(next(c))
0                                                                                                             
1                                                                                                             
2                                                                                                             
3                                                                                                             
4

46.Write a Python program to concatenate elements of a list.?

color = ['red', 'green', 'orange']
print('-'.join(color))
print(''.join(color))

red-green-orange                                                                                              
redgreenorange 

47.Write a Python program to remove key values pairs from a list of dictionaries.?

original_list = [{'key1':'value1', 'key2':'value2'}, {'key1':'value3', 'key2':'value4'}]
print("Original List: ")
print(original_list)
new_list = [{k: v for k, v in d.items() if k != 'key1'} for d in original_list]
print("New List: ")
print(new_list)

Original List:                                                                                                
[{'key1': 'value1', 'key2': 'value2'}, {'key1': 'value3', 'key2': 'value4'}]                                  
New List:                                                                                                     
[{'key2': 'value2'}, {'key2': 'value4'}]

48.Write a Python program to convert a string to a list.

import ast
color ="['Red', 'Green', 'White']"
print(ast.literal_eval(color))

['Red', 'Green', 'White']

49.Write a Python program to check if all items of a list is equal to a given string.?

color1 = ["green", "orange", "black", "white"]
color2 = ["green", "green", "green", "green"]

print(all(c == 'blue' for c in color1))
print(all(c == 'green' for c in color2))

False                                                                                                         
True

50.Write a Python program to replace the last element in a list with another list.

Sample data : [1, 3, 5, 7, 9, 10], [2, 4, 6, 8]
Expected Output: [1, 3, 5, 7, 9, 2, 4, 6, 8]

num1 = [1, 3, 5, 7, 9, 10]
num2 = [2, 4, 6, 8]
num1[-1:] = num2
print(num1)

[1, 3, 5, 7, 9, 2, 4, 6, 8] 

51.Write a Python program to check if the n-th element exists in a given list.?

x = [1, 2, 3, 4, 5, 6]
xlen = len(x)-1
print(x[xlen])

6

52.Write a Python program to find a tuple, the smallest second index value from a list of tuples.?

x = [(4, 1), (1, 2), (6, 0)]
print(min(x, key=lambda n: (n[1], -n[0])))

(6, 0)

53.Write a Python program to create a list of empty dictionaries.?

n = 5
l = [{} for _ in range(n)]
print(l)

[{}, {}, {}, {}, {}]

54.Write a Python program to print a list of space-separated elements.?

num = [1, 2, 3, 4, 5]
print(*num)

1 2 3 4 5

55.Write a Python program to insert a given string at the beginning of all items in a list.?

Sample list : [1,2,3,4], string : emp
Expected output : ['emp1', 'emp2', 'emp3', 'emp4']

num = [1,2,3,4]
print(['emp{0}'.format(i) for i in  num])

['emp1', 'emp2', 'emp3', 'emp4']

56.Write a Python program to iterate over two lists simultaneously.?

num = [1, 2, 3]
color = ['red', 'while', 'black']
for (a,b) in zip(num, color):
     print(a, b)
	 
1 red                                                                                                         
2 while                                                                                                       
3 black

57.Write a Python program to access dictionary keys element by index.?

num = {'physics': 80, 'math': 90, 'chemistry': 86}
print(list(num)[0])

chemistry

58. Write a Python program to find the list in a list of lists whose sum of elements is the highest.?

Sample lists: [1,2,3], [4,5,6], [10,11,12], [7,8,9]
Expected Output: [10, 11, 12]

num = [[1,2,3], [4,5,6], [10,11,12], [7,8,9]]
print(max(num, key=sum))

[10, 11, 12] 

59.Write a Python program to find all the values in a list are greater than a specified number.?

list1 = [220, 330, 500]
list2 = [12, 17, 21]
print(all(x >= 200 for x in list1))
print(all(x >= 25 for x in list2))

True                                                                                                          
False

60.Write a Python program to extend a list without append.?

Sample data: [10, 20, 30]
[40, 50, 60]
Expected output : [40, 50, 60, 10, 20, 30]

x = [10, 20, 30]
y = [40, 50, 60]
x[:0] =y
print(x)

[40, 50, 60, 10, 20, 30] 

61. Write a Python program to remove duplicates from a list of lists.?

Sample list : [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]
New List : [[10, 20], [30, 56, 25], [33], [40]]

import itertools
num = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]
print("Original List", num)
num.sort()
new_num = list(num for num,_ in itertools.groupby(num))
print("New List", new_num)

Original List [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]                                            
New List [[10, 20], [30, 56, 25], [33], [40]]

62.Write a Python program to get the depth of a dictionary.?

def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0
dic = {'a':1, 'b': {'c': {'d': {}}}}
print(dict_depth(dic))

4

63.Write a Python program to check if all dictionaries in a list are empty or not.?

Sample list : [{},{},{}]
Return value : True
Sample list : [{1,2},{},{}]
Return value : False

my_list = [{},{},{}]
my_list1 = [{1,2},{},{}]
print(all(not d for d in my_list))
print(all(not d for d in my_list1))

True                                                                                                          
False  



File input/output Questions and answers:-
----------------------------------------

Contain of text.txt:-
--------------------
What is Python language?                                                
Python is a widely used high-level, general-purpose, interpreted, dynamic programming language. Its design philosophy 
emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than possible in 
languages such as C++ or Java.                                         
Python supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural 
styles.It features a dynamic type system and automatic memory management and has a large and comprehensive standard library. 
The best way we learn anything is by practice and exercise questions. We  have started this section for those 
(beginner to intermediate) who are familiar with Python.


1. Write a Python program to read an entire text file.  
 
def file_read(fname):
        txt = open(fname)
        print(txt.read())

file_read('test.txt')

Welcome to w3resource.com.                                                                                    
Append this text.Append this text.Append this text.  
 

2. Write a Python program to read first n lines of a file.  

def file_read_from_head(fname, nlines):
        from itertools import islice
        with open(fname) as f:
                for line in islice(f, nlines):
                        print(line)
file_read_from_head('test.txt',2)

Welcome to w3resource.com.                                                                                    
                                                                                                              
Append this text.Append this text.Append this text. 


3. Write a Python program to append text to a file and display the text.  
def file_read(fname):
        from itertools import islice
        with open(fname, "w") as myfile:
                myfile.write("Python Exercises\n")
                myfile.write("Java Exercises")
        txt = open(fname)
        print(txt.read())
file_read('abc.txt')

Python Exercises                                                                                              
Java Exercises


4. Write a Python program to read last n lines of a file.  

import sys
import os
def file_read_from_tail(fname,lines):
        bufsize = 8192
        fsize = os.stat(fname).st_size
        iter = 0
        with open(fname) as f:
                if bufsize > fsize:
                        bufsize = fsize-1
                        data = []
                        while True:
                                iter +=1
                                f.seek(fsize-bufsize*iter)
                                data.extend(f.readlines())
                                if len(data) >= lines or f.tell() == 0:
                                        print(''.join(data[-lines:]))
                                        break

file_read_from_tail('test.txt',2)

Append this text.                                                                                             
Append this text.


5. Write a Python program to read a file line by line and store it into a list.   

def file_read(fname):
        with open(fname) as f:
                #Content_list is the list that contains the read lines.     
                content_list = f.readlines()
                print(content_list)

file_read(\'test.txt\')


['Welcome to w3resource.com.\n', 'Append this text.Append this text.Append this text.\n', 'Append this text.\n
', 'Append this text.\n', 'Append this text.\n', 'Append this text.\n'] 

6. Write a Python program to read a file line by line store it into a variable.   

def file_read(fname):
        with open (fname, "r") as myfile:
                data=myfile.readlines()
                print(data)
file_read('test.txt')

['Welcome to w3resource.com.\n', 'Append this text.Append this text.Append this text.\n', 'Append this text.\n
', 'Append this text.\n', 'Append this text.\n', 'Append this text.\n'] 



7. Write a Python program to read a file line by line store it into an array.  


def file_read(fname):
        content_array = []
        with open(fname) as f:
                #Content_list is the list that contains the read lines.     
                for line in f:
                        content_array.append(line)
                print(content_array)

file_read('test.txt')


['Welcome to w3resource.com.\n', 'Append this text.Append this text.Append this text.\n', 'Append this text.\n
', 'Append this text.\n', 'Append this text.\n', 'Append this text.\n']  

8. Write a python program to find the longest words.  

def longest_word(filename):
    with open(filename, 'r') as infile:
              words = infile.read().split()
    max_len = len(max(words, key=len))
    return [word for word in words if len(word) == max_len]

print(longest_word('test.txt'))

['w3resource.com.']

9. Write a Python program to count the number of lines in a text file.  

def file_lengthy(fname):
        with open(fname) as f:
                for i, l in enumerate(f):
                        pass
        return i + 1
print("Number of lines in the file: ",file_lengthy("test.txt"))

Number of lines in the file:  6

10. Write a Python program to count the frequency of words in a file.  
 
from collections import Counter
def word_count(fname):
        with open(fname) as f:
                return Counter(f.read().split())

print("Number of words in the file :",word_count("test.txt"))

Number of words in the file : Counter({'this': 7, 'Append': 5, 'text.': 5, 'text.Append': 2, 'Welcome': 1, 'to
': 1, 'w3resource.com.': 1}) 

11. Write a Python program to get the file size of a plain file.  
 
def file_size(fname):
        import os
        statinfo = os.stat(fname)
        return statinfo.st_size

print("File size in bytes of a plain file: ",file_size("test.txt"))

File size in bytes of a plain file:  151

12. Write a Python program to write a list to a file.  

color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
with open('abc.txt', "w") as myfile:
        for c in color:
                myfile.write("%s\n" % c)

content = open('abc.txt')
print(content.read())

Red                                                                                                           
Green                                                                                                         
White                                                                                                         
Black                                                                                                         
Pink                                                                                                          
Yellow

13. Write a Python program to copy the contents of a file to another file .  
 
from shutil import copyfile
copyfile('test.py', 'abc.py')

abc.py
 
14. Write a Python program to combine each line from first file with the corresponding line in second file.  
 
with open('abc.txt') as fh1, open('test.txt') as fh2:
    for line1, line2 in zip(fh1, fh2):
        # line1 from abc.txt, line2 from test.txtg
        print(line1+line2)
		
Red                                                                                                           
Welcome to w3resource.com.                                                                                    
                                                                                                              
Green                                                                                                         
Append this text.Append this text.Append this text. 
------
Yellow                                                                                                        
Append this text.


15. Write a Python program to read a random line from a file.  

import random
def random_line(fname):
    lines = open(fname).read().splitlines()
    return random.choice(lines)
print(random_line('test.txt'))

Append this text. 

16. Write a Python program to assess if a file is closed or not.  
 
 f = open('abc.txt','r')
print(f.closed)
f.close()
print(f.closed)

False                                                                                                         
True

17. Write a Python program to remove newline characters from a file.  

def remove_newlines(fname):
    flist = open(fname).readlines()
    return [s.rstrip('\n') for s in flist]

print(remove_newlines("test.txt"))

['Welcome to w3resource.com.', 'Append this text.Append this text.Append this text.', 'Append this text.', 'Ap
pend this text.', 'Append this text.', 'Append this text.']

What is a file?
--------------
File is a named location on disk to store related information. It is used to permanently store data in a non-volatile memory 
(e.g. hard disk).

How to open a file?
-------------------
Python has a built-in function open() to open a file. This function returns a file object, also called a handle, 
as it is used to read or modify the file accordingly.
f = open('test.txt)  # open file in current directory
f = open('C:\Users\kmall\Desktop\test.txt') # specifying full path

We can specify the mode while opening a file. In mode, we specify whether we want to read 'r', write 'w' or append 'a' to the file.
We also specify if we want to open the file in text mode or binary mode.

Modes & Description:-
-------------------
r :-
--
Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.

rb :-
--
Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file.This is the default mode.
r+:-
--

Opens a file for both reading and writing. The file pointer placed at the beginning of the file.

rb+:-
---
Opens a file for both reading and writing in binary format. The file pointer placed at the beginning of the file.

w :-
--
Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.
	
wb :-
--
Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.

w+:-
---
Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.
	
wb+ :-
----
Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.

a:
--
Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.
	
ab:-
--
Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.

a+:-
---
Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.

ab+:-
---
Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.


Attribute & Description:-
-----------------------
file.closed :-
-----------
Returns true if file is closed, false otherwise.

file.mode:-
---------
Returns access mode with which file was opened.

file.name:-
---------
Returns name of the file.

file.softspace:-
--------------
Returns false if space explicitly required with print, true otherwise.

Example for attributes:-
----------------------
# Open a file
fo = open("foo.txt", "wb")
print ("Name of the file: ", fo.name)
Name of the file:  foo.txt
print ("Closed or not : ", fo.closed)
Closed or not :  False
print ("Opening mode : ", fo.mode)
Opening mode :  wb
print ("Softspace flag : ", fo.softspace)
Softspace flag :  0

The close() Method :-
------------------
The close() method of a file object flushes any unwritten information and closes the file object, after which no more 
writing can be done.

# Open a file
fo = open("foo.txt", "wb")
print ("Name of the file: ", fo.name)
Name of the file:  foo.txt
# Close opend file
fo.close()

The write() Method :-
------------------
The write() method writes any string to an open file. It is important to note that Python strings can have binary data 
and not just text.

The write() method does not add a newline character ('\n') to the end of the string −

# Open a file
fo = open("foo.txt", "wb")
fo.write( "Python is a great language.\nYeah its great!!\n");

# Close opend file
fo.close()

The read() Method :-
------------------
The read() method reads a string from an open file. It is important to note that Python strings can have binary data. 
apart from text data.

# Open a file
fo = open("foo.txt", "r+")
str = fo.read(10);
print ("Read String is : ", str)
# Close opend file
fo.close()

File Positions :-
---------------
tell() :-
------
The tell() method tells you the current position within the file; in other words, the next read or write will occur at 
that many bytes from the beginning of the file.

# Open a file
fo = open("foo.txt", "r+")
str = fo.read(10);
print ("Read String is : ", str)
Read String is :  Python is
# Check current position
position = fo.tell();
print ("Current file position : ", position)
Current file position :  10

seek() :-
------
The seek(offset[, from]) method changes the current file position. The offset argument indicates the number of bytes to be moved.
The from argument specifies the reference position from where the bytes are to be moved.

# Reposition pointer at the beginning once again
position = fo.seek(0, 0);
str = fo.read(10);
print ("Again read String is : ", str)
Again read String is :  Python is
# Close opend file
fo.close()

Renaming and Deleting Files :-
---------------------------
Python os module provides methods that help you perform file-processing operations, such as renaming and deleting files.

The rename() Method:-
-------------------
The rename() method takes two arguments, the current filename and the new filename.

import os

# Rename a file from test1.txt to test2.txt
os.rename( "test1.txt", "test2.txt" )

The remove() Method:-
-------------------
You can use the remove() method to delete files by supplying the name of the file to be deleted as the argument.

import os

# Delete file test2.txt
os.remove("text2.txt")

The mkdir() Method:-
------------------
You can use the mkdir() method of the os module to create directories in the current directory. 
You need to supply an argument to this method which contains the name of the directory to be created.

import os

# Create a directory "test"
os.mkdir("test")

The chdir() Method:-
------------------
You can use the chdir() method to change the current directory. The chdir() method takes an argument, 
which is the name of the directory that you want to make the current directory.

import os

# Changing a directory to "/home/newdir"
os.chdir("/home/newdir")

The getcwd() Method:-
-------------------
The getcwd() method displays the current working directory.

import os
# This would give location of the current directory
os.getcwd()

The rmdir() Method:-
------------------
The rmdir() method deletes the directory, which is passed as an argument in the method.

#!/usr/bin/python
import os

# This would  remove "/tmp/test"  directory.
os.rmdir( "/tmp/test"  )

Dictionary:
----------
Python dictionary is an unordered collection of items. While other compound data types have only value as an element, 
a dictionary has a key: value pair.Dictionaries are optimized to retrieve values when the key is known.


# empty dictionary
my_dict = {}
print(type(my_dict))
<class 'dict'>

# dictionary with integer keys
my_dict = {1: 'apple', 2: 'ball'}
print(my_dict)
{1: 'apple', 2: 'ball'}

# dictionary with mixed keys
my_dict = {'name': 'John', 1: [2, 4, 3]}
print(my_dict)
{'name': 'John', 1: [2, 4, 3]}

# using dict()
my_dict = dict({1:'apple', 2:'ball'})
print(my_dict)
{1:'apple', 2:'ball'}

# from sequence having each item as a pair
my_dict = dict([(1,'apple'), (2,'ball')])
print(my_dict)
{1: 'apple', 2: 'ball'}


my_dict = {'name':'Jack', 'age': 26}

# Output: Jack
print(my_dict['name'])

# Output: 26
print(my_dict.get('age'))

# Trying to access keys which doesn't exist throws error
# my_dict.get('address')
# my_dict['address']

my_dict = {'name':'Jack', 'age': 26}

# update value
my_dict['age'] = 27

#Output: {'age': 27, 'name': 'Jack'}
print(my_dict)

# add item
my_dict['address'] = 'Downtown'  

# Output: {'address': 'Downtown', 'age': 27, 'name': 'Jack'}
print(my_dict)


# create a dictionary
squares = {1:1, 2:4, 3:9, 4:16, 5:25}  

# remove a particular item
# Output: 16
print(squares.pop(4))  

# Output: {1: 1, 2: 4, 3: 9, 5: 25}
print(squares)

# remove an arbitrary item
# Output: (1, 1)
print(squares.popitem())

# Output: {2: 4, 3: 9, 5: 25}
print(squares)

# delete a particular item
del squares[5]  

# Output: {2: 4, 3: 9}
print(squares)

# remove all items
squares.clear()

# Output: {}
print(squares)

# delete the dictionary itself
del squares

# Throws Error
# print(squares)


clear():
-------
Remove all items form the dictionary.
s = {1:'mallikarjuna','name':'karjuna'}
s.clear()
print(s)
{}


copy()	
------
Return a shallow copy of the dictionary.
s = {1:'mallikarjuna','name':'karjuna'}
m = s.copy()
s.clear()
print(s)
{}
print(m)
{1:'mallikarjuna','name':'karjuna'}

fromkeys(seq[, v])
-----------------
Return a new dictionary with keys from seq and value equal to v (defaults to None).
s = {1,2,3}
values = 'malli'
print(dict.fromkeys(s,values))
{1: 'malli', 2: 'malli', 3: 'malli', 4: 'malli', 5: 'malli'}



get(key[,d])	
-----------
Return the value of key. If key doesnot exit, return d (defaults to None).
s = {1:'mallikarjuna','name':'karjuna',2:'virat'}
print(s.get(2))
virat


items()	
-------
Return a new view of the dictionary's items (key, value).
s = {1:'mallikarjuna','name':'karjuna',2:'virat'}
print(s.items())
dict_items([(1, 'mallikarjuna'), ('name', 'karjuna'), (2, 'virat')])


keys()	
------
Return a new view of the dictionary's keys.
s = {1:'mallikarjuna','name':'karjuna',2:'virat'}
print(s.keys())
dict_keys([1, 'name', 2])

pop(key[,d])	
------------
Remove the item with key and return its value or d if key is not found.
If d is not provided and key is not found, raises KeyError.
s = {1:'mallikarjuna','name':'karjuna',2:'virat'}
print(s.pop('name'))
karjuna
print(s)
{1: 'mallikarjuna', 2: 'virat'}

s = {1:'mallikarjuna','name':'karjuna',2:'virat'}
print(s.pop(1,'id'))
mallikarjuna
print(s)
{'name': 'karjuna', 2: 'virat'}


popitem()	
---------
Remove and return an arbitary item (key, value). Raises KeyError if the dictionary is empty.
s = {1:'mallikarjuna','name':'karjuna',2:'virat'}
print(s.popitem())
(2, 'virat')
print(s)
{1: 'mallikarjuna', 'name': 'karjuna'}


setdefault(key[,d])	
-------------------
If key is in the dictionary, return its value. If not, insert key with a value of d and return d (defaults to None).

person = {'name': 'Malli'}

# key is not in the dictionary
salary = person.setdefault('salary')
print('person = ',person)
person =  {'name': 'Malli', 'salary': None}
print('salary = ',salary)
salary =  None

# key is not in the dictionary
# default_value is provided
age = person.setdefault('age', 22)
print('person = ',person)
person =  {'name': 'Malli', 'age': 22}
print('age = ',age)
age =  22

update([other])	
---------------
Update the dictionary with the key/value pairs from other, overwriting existing keys.

d = {1: "one", 2: "two"}
d1 = {3: "three"}

# updates the value of key 3
d.update(d1)
print(d)
{1: 'one', 2: 'two', 3: 'three'}


d1 = {4: "four"}

# adds element with key 4
d.update(d1)
print(d)
{1: 'one', 2: 'two', 3: 'three',4:'four'}


values()	
--------
Return a new view of the dictionary's values
d = {1: 'one', 2: 'two', 3: 'three', 4: 'four'}
print(d.values())
dict_values(['one', 'two', 'three', 'four'])


Python Dictionary Comprehension:
-------------------------------
Dictionary c omprehension is an elegant and concise way to create new dictionary from an iterable in Python.

Dictionary comprehension consists of an expression pair (key: value) followed by for statement inside curly braces {}.

squares = {x:x**2 for x in range(6)}
print(squares)
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

squares = {x:x**2 for x in range(6) if x%2 == 1}
print(squares)
{1: 1, 3: 9, 5: 25}

Dictionary Membership Test:
--------------------------
We can test if a key is in a dictionary or not using the keyword in. Notice that membership test is for keys only,not for values.

squares = {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}

# Output: True
print(1 in squares)

# Output: True
print(2 not in squares)

# membership tests for key only not value
# Output: False
print(49 in squares)

  

Dictionary:-
----------

1. Write a Python script to sort (ascending and descending) a dictionary by value.?

import operator
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
print('Original dictionary : ',d)
sorted_d = sorted(d.items(), key=operator.itemgetter(0))
print('Dictionary in ascending order by value : ',sorted_d)
sorted_d = sorted(d.items(), key=operator.itemgetter(0),reverse=True)
print('Dictionary in descending order by value : ',sorted_d)

Original dictionary :  {0: 0, 1: 2, 2: 1, 3: 4, 4: 3}                                                         
Dictionary in ascending order by value :  [(0, 0), (1, 2), (2, 1), (3, 4), (4, 3)]                            
Dictionary in descending order by value :  [(4, 3), (3, 4), (2, 1), (1, 2), (0, 0)] 

2. Write a Python script to add a key to a dictionary.?

Sample Dictionary : {0: 10, 1: 20}
Expected Result : {0: 10, 1: 20, 2: 30}

d = {0:10, 1:20}
print(d)
d.update({2:30})
print(d)

{0: 10, 1: 20}                                                                                                
{0: 10, 1: 20, 2: 30} 

3. Write a Python script to concatenate following dictionaries to create a new one.?

Sample Dictionary : 
dic1={1:10, 2:20} 
dic2={3:30, 4:40} 
dic3={5:50,6:60}
Expected Result : {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}

dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)

{1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}

4. Write a Python script to check if a given key already exists in a dictionary.?

d = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}
def is_key_present(x):
  if x in d:
      print('Key is present in the dictionary')
  else:
      print('Key is not present in the dictionary')
is_key_present(5)
is_key_present(9)

Key is present in the dictionary                                                                              
Key is not present in the dictionary

5. Write a Python program to iterate over dictionaries using for loops.

d = {'x': 10, 'y': 20, 'z': 30} 
for dict_key, dict_value in d.items():
    print(dict_key,'->',dict_value)
	
y -> 20                                                                                                       
z -> 30                                                                                                       
x -> 10 

6.Write a Python script to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x).

Sample Dictionary ( n = 5) : 
Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

n=int(input("Input a number "))
d = dict()

for x in range(1,n+1):
    d[x]=x*x

print(d)

10                                                                                                            
{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}   

7.Write a Python script to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values 
are square of keys.

Sample Dictionary 
{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225}

d=dict()
for x in range(1,16):
    d[x]=x**2
print(d)  

{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 
225} 

8. Write a Python script to merge two Python dictionaries.?

d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(d)

{'x': 300, 'y': 200, 'a': 100, 'b': 200}

9. Write a Python program to iterate over dictionaries using for loops.?

d = {'Red': 1, 'Green': 2, 'Blue': 3} 
for color_key, value in d.items():
     print(color_key, 'corresponds to ', d[color_key]) 

Red corresponds to  1                                                                                         
Blue corresponds to  3                                                                                        
Green corresponds to  2 

10. Write a Python program to sum all the items in a dictionary.

my_dict = {'data1':100,'data2':-54,'data3':247}
print(sum(my_dict.values()))

11.Write a Python program to multiply all the items in a dictionary.?

my_dict = {'data1':100,'data2':-54,'data3':247}
result=1
for key in my_dict:    
    result=result * my_dict[key]
print(result)

-1333800 

12.Write a Python program to remove a key from a dictionary.?

myDict = {'a':1,'b':2,'c':3,'d':4}
print(myDict)
if 'a' in myDict: 
    del myDict['a']
print(myDict)

{'c': 3, 'b': 2, 'd': 4, 'a': 1}                                                                              
{'c': 3, 'b': 2, 'd': 4}

13.Write a Python program to map two lists into a dictionary.?

keys = ['red', 'green', 'blue']
values = ['#FF0000','#008000', '#0000FF']
color_dictionary = dict(zip(keys, values))
print(color_dictionary)

{'green': '#008000', 'blue': '#0000FF', 'red': '#FF0000'} 

14.Write a Python program to sort a dictionary by key.?

color_dict = {'red':'#FF0000',
          'green':'#008000',
          'black':'#000000',
          'white':'#FFFFFF'}

for key in sorted(color_dict):
    print("%s: %s" % (key, color_dict[key]))

black: #000000                                                                                                
green: #008000                                                                                                
red: #FF0000                                                                                                  
white: #FFFFFF

15. Write a Python program to get the maximum and minimum value in a dictionary.?

my_dict = {'x':500, 'y':5874, 'z': 560}

key_max = max(my_dict.keys(), key=(lambda k: my_dict[k]))
key_min = min(my_dict.keys(), key=(lambda k: my_dict[k]))

print('Maximum Value: ',my_dict[key_max])
print('Minimum Value: ',my_dict[key_min])

Maximum Value:  5874                                                                                          
Minimum Value:  500

16.Write a Python program to get a dictionary from an object's fields.?

class dictObj(object):
     def __init__(self):
         self.x = 'red'
         self.y = 'Yellow'
         self.z = 'Green'
     def do_nothing(self):
         pass
test = dictObj()
print(test.__dict__)

{'y': 'Yellow', 'z': 'Green', 'x': 'red'}

17.Write a Python program to remove duplicates from Dictionary.?

student_data = {'id1': 
   {'name': ['Sara'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
 'id2': 
  {'name': ['David'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
 'id3': 
    {'name': ['Sara'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
 'id4': 
   {'name': ['Surya'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
}

result = {}

for key,value in student_data.items():
    if value not in result.values():
        result[key] = value

print(result)

{'id2': {'subject_integration': ['english, math, science'], 'class': ['V'], 'name': ['David']}, 'id4': {'subje
ct_integration': ['english, math, science'], 'class': ['V'], 'name': ['Surya']}, 'id1': {'subject_integration'
: ['english, math, science'], 'class': ['V'], 'name': ['Sara']}} 

18.Write a Python program to check a dictionary is empty or not.?

my_dict = {}

if not bool(my_dict):
    print("Dictionary is empty")

Dictionary is empty

19.Write a Python program to combine two dictionary adding values for common keys.?

d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 300, 'b': 200, 'd':400}
Sample output: Counter({'a': 400, 'b': 400, 'd': 400, 'c': 300})

from collections import Counter
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 300, 'b': 200, 'd':400}
d = Counter(d1) + Counter(d2)
print(d)

Counter({'b': 400, 'd': 400, 'a': 400, 'c': 300})

20. Write a Python program to print all unique values in a dictionary.?

Sample Data : [{"V":"S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII":"S005"}, {"V":"S009"},{"VIII":"S007"}]
Expected Output : Unique Values: {'S005', 'S002', 'S007', 'S001', 'S009'}

L = [{"V":"S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII":"S005"}, {"V":"S009"},{"VIII":"S007"}]
print("Original List: ",L)
u_value = set( val for dic in L for val in dic.values())
print("Unique Values: ",u_value)

Original List:  [{'V': 'S001'}, {'V': 'S002'}, {'VI': 'S001'}, {'VI': 'S005'}, {'VII': 'S005'}, {'V': 'S009'},
 {'VIII': 'S007'}]                                                                                            
Unique Values:  {'S009', 'S002', 'S007', 'S005', 'S001'} 

21. Write a Python program to create and display all combinations of letters, selecting each letter from a different key 
in a dictionary.

Sample data : {'1':['a','b'], '2':['c','d']}
Expected Output: 
ac
ad
bc
bd

import itertools      
d ={'1':['a','b'], '2':['c','d']}
for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):
    print(''.join(combo))
	
ac                                                                                                            
ad                                                                                                            
bc                                                                                                            
bd

22.Write a Python program to find the highest 3 values in a dictionary.?

from heapq import nlargest
my_dict = {'a':500, 'b':5874, 'c': 560,'d':400, 'e':5874, 'f': 20}  
three_largest = nlargest(3, my_dict, key=my_dict.get)
print(three_largest)

['e', 'b', 'c']

23.Write a Python program to combine values in python list of dictionaries.?

Sample data: [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount': 300}, {'item': 'item1', 'amount': 750}]
Expected Output: Counter({'item1': 1150, 'item2': 300})

from collections import Counter
item_list = [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount': 300}, {'item': 'item1', 'amount': 750}]
result = Counter()
for d in item_list:
    result[d['item']] += d['amount']
print(result) 

Counter({'item1': 1150, 'item2': 300})

24.Write a Python program to create a dictionary from a string.?

Note: Track the count of the letters from the string.
Sample string : 'w3resource'
Expected output: {'3': 1, 's': 1, 'r': 2, 'u': 1, 'w': 1, 'c': 1, 'e': 2, 'o': 1}

from collections import defaultdict, Counter
str1 = 'w3resource' 
my_dict = {}
for letter in str1:
    my_dict[letter] = my_dict.get(letter, 0) + 1
print(my_dict)

{'o': 1, '3': 1, 's': 1, 'r': 2, 'w': 1, 'u': 1, 'e': 2, 'c': 1}

25. Write a Python program to print a dictionary in table format.?

my_dict = {'C1':[1,2,3],'C2':[5,6,7],'C3':[9,10,11]}
for row in zip(*([key] + (value) for key, value in sorted(my_dict.items()))):
    print(*row)

C1 C2 C3                                                                                                      
1 5 9                                                                                                         
2 6 10                                                                                                        
3 7 11

26.Write a Python program to count the values associated with key in a dictionary.?

Sample data: = [{'id': 1, 'success': True, 'name': 'Lary'}, {'id': 2, 'success': False, 'name': 'Rabi'},
{'id': 3, 'success': True, 'name': 'Alex'}]
Expected result: Count of how many dictionaries have success as True

student = [{'id': 1, 'success': True, 'name': 'Lary'},
 {'id': 2, 'success': False, 'name': 'Rabi'},
 {'id': 3, 'success': True, 'name': 'Alex'}]
print(sum(d['success'] for d in student))

2

27. Write a Python program to convert a list into a nested dictionary of keys.?

num_list = [1, 2, 3, 4]
new_dict = current = {}
for name in num_list:
    current[name] = {}
    current = current[name]
print(new_dict)

{1: {2: {3: {4: {}}}}}

28.Write a Python program to sort a list alphabetically in a dictionary.?

num = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}
sorted_dict = {x: sorted(y) for x, y in num.items()}
print(sorted_dict)

{'n1': [1, 2, 3], 'n3': [2, 3, 4], 'n2': [1, 2, 5]}

29. Write a Python program to remove spaces from dictionary keys.?

student_list = {'S  001': ['Math', 'Science'], 'S    002': ['Math', 'English']}
print("Original dictionary: ",student_list)
student_dict = {x.translate({32: None}): y for x, y in student_list.items()}
print("New dictionary: ",student_dict)

Original dictionary:  {'S    002': ['Math', 'English'], 'S  001': ['Math', 'Science']}                        
New dictionary:  {'S    002': ['Math', 'English'], 'S  001': ['Math', 'Science']} 

30. Write a Python program to get the top three items in a shop.?

Sample data: {'item1': 45.50, 'item2':35, 'item3': 41.30, 'item4':55, 'item5': 24}
Expected Output: 
item4 55
item1 45.5
item3 41.3

from heapq import nlargest
from operator import itemgetter
items = {'item1': 45.50, 'item2':35, 'item3': 41.30, 'item4':55, 'item5': 24}
for name, value in nlargest(3, items.items(), key=itemgetter(1)):
    print(name, value)

item4 55                                                                                                      
item1 45.5                                                                                                    
item3 41.3 

31. Write a Python program to get the key, value and item in a dictionary.?

dict_num = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}
print("key  value  count")
for count, (key, value) in enumerate(dict_num.items(), 1):
    print(key,'   ',value,'    ', count)
	
key  value  count                                                                                             
1     10      1                                                                                               
2     20      2                                                                                               
3     30      3                                                                                               
4     40      4                                                                                               
5     50      5                                                                                               
6     60      6

32.Write a Python program to print a dictionary line by line.?

students = {'Aex':{'class':'V',
        'rolld_id':2},
        'Puja':{'class':'V',
        'roll_id':3}}
for a in students:
    print(a)
    for b in students[a]:
        print (b,':',students[a][b])

Aex                                                                                                           
class : V                                                                                                     
rolld_id : 2                                                                                                  
Puja                                                                                                          
class : V                                                                                                     
roll_id : 3

33. Write a Python program to check multiple keys exists in a dictionary.?

student = {
  'name': 'Alex',
  'class': 'V',
  'roll_id': '2'
}
print(student.keys() >= {'class', 'name'})
print(student.keys() >= {'name', 'Alex'})
print(student.keys() >= {'roll_id', 'name'})

True                                                                                                          
False                                                                                                         
True

34. Write a Python program to count number of items in a dictionary value that is a list.?

dict =  {'Alex': ['subj1', 'subj2', 'subj3'], 'David': ['subj1', 'subj2']}
ctr = sum(map(len, dict.values()))
print(ctr)

5

35. Write a Python program to sort Counter by value.
Sample data : {'Math':81, 'Physics':83, 'Chemistry':87}
Expected data: [('Chemistry', 87), ('Physics', 83), ('Math', 81)]

from collections import Counter
x = Counter({'Math':81, 'Physics':83, 'Chemistry':87})
print(x.most_common())

[('Chemistry', 87), ('Physics', 83), ('Math', 81)]

36. Write a Python program to create a dictionary from two lists without losing duplicate values.?

Sample lists: ['Class-V', 'Class-VI', 'Class-VII', 'Class-VIII'], [1, 2, 2, 3]
Expected Output: defaultdict(<class 'set'>, {'Class-VII': {2}, 'Class-VI': {2}, 'Class-VIII': {3}, 'Class-V': {1}})

from collections import defaultdict
class_list = ['Class-V', 'Class-VI', 'Class-VII', 'Class-VIII']
id_list = [1, 2, 2, 3]
temp = defaultdict(set)
for c, i in zip(class_list, id_list):
    temp[c].add(i)
print(temp)

defaultdict(<class 'set'>, {'Class-VII': {2}, 'Class-VI': {2}, 'Class-V': {1}, 'Class-VIII': {3}})

37. Write a Python program to replace dictionary values with their sum.?

def sum_math_v_vi_average(list_of_dicts):
    for d in list_of_dicts:
        n1 = d.pop('V')
        n2 = d.pop('VI')
        d['V+VI'] = (n1 + n2)/2
    return list_of_dicts 
student_details= [
  {'id' : 1, 'subject' : 'math', 'V' : 70, 'VI' : 82},
  {'id' : 2, 'subject' : 'math', 'V' : 73, 'VI' : 74},
  {'id' : 3, 'subject' : 'math', 'V' : 75, 'VI' : 86}
]
print(sum_math_v_vi_average(student_details))

[{'subject': 'math', 'id': 1, 'V+VI': 76.0}, {'subject': 'math', 'id': 2, 'V+VI': 73.5}, {'subject': 'math', '
id': 3, 'V+VI': 80.5}]

38. Write a Python program to match key values in two dictionaries.
Sample dictionary: {'key1': 1, 'key2': 3, 'key3': 2}, {'key1': 1, 'key2': 2}
Expected output: key1: 1 is present in both x and y

x = {'key1': 1, 'key2': 3, 'key3': 2}
y = {'key1': 1, 'key2': 2}
for (key, value) in set(x.items()) & set(y.items()):
    print('%s: %s is present in both x and y' % (key, value))

key1: 1 is present in both x and y 


What is Tick?:-
-------------
Time intervals are floating-point numbers in units of seconds. Particular instants in time are expressed in seconds 
since 12:00am, January 1, 1970(epoch).

import time;  # This is required to include time module.

ticks = time.time()
print ("Number of ticks since 12:00am, January 1, 1970:", ticks)
Number of ticks since 12:00am, January 1, 1970: 7186862.73399
Getting current time:-
--------------------
import time;
localtime = time.localtime(time.time())
print ("Local current time :", localtime)
time.struct_time(tm_year=2018, tm_mon=4, tm_mday=1, tm_hour=22, tm_min=5, tm_sec=35, tm_wday=6, tm_yday=91, tm_isdst=0)

Getting formatted time:-
----------------------
import time;

localtime = time.asctime( time.localtime(time.time()) )
print ("Local current time :", localtime)
Sun Apr  1 22:08:33 2018

Getting calendar for a month:-
----------------------------
import calendar

cal = calendar.month(2008, 1)
print ("Here is the calendar:")
print (cal)


Arrays questions and Answers:-
----------------------------

1. Write a Python program to create an array of 5 integers and display the array items. Access individual element through indexes.  
 
from array import *
array_num = array('i', [1,3,5,7,9])
for i in array_num:
    print(i)
print("Access first three items individually")
print(array_num[0])
print(array_num[1])
print(array_num[2])

1                                                                      
3                                                                      
5                                                                      
7                                                                      
9                                                                      
Access first three items individually                                  
1                                                                      
3                                                                      
5

2. Write a Python program to append a new item to the end of the array.  

from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print("Original array: "+str(array_num))
print("Append 11 at the end of the array:")
array_num.append(11)
print("New array: "+str(array_num))

Original array: array('i', [1, 3, 5, 7, 9])                            
Append 11 at the end of the array:                                     
New array: array('i', [1, 3, 5, 7, 9, 11])

3. Write a Python program to reverse the order of the items in the array.  
 
from array import *
array_num = array('i', [1, 3, 5, 3, 7, 1, 9, 3])
print("Original array: "+str(array_num))
array_num.reverse()
print("Reverse the order of the items:")
print(str(array_num))

Original array: array('i', [1, 3, 5, 3, 7, 1, 9, 3])                   
Reverse the order of the items:                                        
array('i', [3, 9, 1, 7, 3, 5, 3, 1])

4. Write a Python program to get the length in bytes of one array item in the internal representation.  

from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print("Original array: "+str(array_num))
print("Length in bytes of one array item: "+str(array_num.itemsize))

Original array: array('i', [1, 3, 5, 7, 9])                            
Length in bytes of one array item: 4 

5. Write a Python program to get the current memory address and the length in elements of the buffer used to hold an array?s contents and also find the size of the memory buffer in bytes.   

from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print("Original array: "+str(array_num))
print("Current memory address and the length in elements of the buffer: "+str(array_num.buffer_info()))
print("The size of the memory buffer in bytes: "+str(array_num.buffer_info()[1] * array_num.itemsize))

Original array: array('i', [1, 3, 5, 7, 9])                            
Current memory address and the length in elements of the buffer: (39652
720, 5)                                                                
The size of the memory buffer in bytes: 20 

6. Write a Python program to get the number of occurrences of a specified element in an array.   

from array import *
array_num = array('i', [1, 3, 5, 3, 7, 9, 3])
print("Original array: "+str(array_num))
print("Number of occurrences of the number 3 in the said array: "+str(array_num.count(3)))

Original array: array('i', [1, 3, 5, 3, 7, 9, 3])                      
Number of occurrences of the number 3 in the said array: 3

7. Write a Python program to append items from inerrable to the end of the array.   

from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print("Original array: "+str(array_num))
array_num.extend(array_num)
print("Extended array: "+str(array_num))

Original array: array('i', [1, 3, 5, 7, 9])                            
Extended array: array('i', [1, 3, 5, 7, 9, 1, 3, 5, 7, 9])

8. Write a Python program to convert an array to an array of machine values and return the bytes representation.   

from array import *
print("Bytes to String: ")
x = array('b', [119, 51, 114, 101,  115, 111, 117, 114, 99, 101])
s = x.tobytes()
print(s)

Bytes to String:                                                       
b'w3resource'

9. Write a Python program to append items from a specified list.  
 
from array import *
num_list = [1, 2, 6, -8]
array_num = array('i', [])
print("Items in the list: " + str(num_list))
print("Append items from the list: ")
array_num.fromlist(num_list)
print("Items in the array: "+str(array_num))

Items in the list: [1, 2, 6, -8]                                       
Append items from the list:                                            
Items in the array: array('i', [1, 2, 6, -8]) 
 
10. Write a Python program to insert a new item before the second element in an existing array.  

from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print("Original array: "+str(array_num))
print("Insert new value 4 before 3:")
array_num.insert(1, 4)
print("New array: "+str(array_num))

Original array: array('i', [1, 3, 5, 7, 9])                            
Insert new value 4 before 3:                                           
New array: array('i', [1, 4, 3, 5, 7, 9]) 

11. Write a Python program to remove a specified item using the index from an array.  
 
from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print("Original array: "+str(array_num))
print("Remove the third item form the array:")
array_num.pop(2)
print("New array: "+str(array_num))
 


12. Write a Python program to remove the first occurrence of a specified element from an array.  

from array import *
array_num = array('i', [1, 3, 5, 3, 7, 1, 9, 3])
print("Original array: "+str(array_num))
print("Remove the first occurrence of 3 from the said array:")
array_num.remove(3)
print("New array: "+str(array_num))

Original array: array('i', [1, 3, 5, 3, 7, 1, 9, 3])                   
Remove the first occurrence of 3 from the said array:                  
New array: array('i', [1, 5, 3, 7, 1, 9, 3]) 

13. Write a Python program to convert an array to an ordinary list with the same items.  

from array import *
array_num = array('i', [1, 3, 5, 3, 7, 1, 9, 3])
print("Original array: "+str(array_num))
num_list = array_num.tolist()
print("Convert the said array to an ordinary list with the same items:")
print(num_list)

Original array: array('i', [1, 3, 5, 3, 7, 1, 9, 3])                   
Convert the said array to an ordinary list with the same items:        
[1, 3, 5, 3, 7, 1, 9, 3] 


Decorators in Python
---------------------
A decorator is a special kind of function that either takes a function and returns a function or takes a class and returns a 
class. The @ symbol is just syntactic sugar that allows you to decorate something in a way that’s easy to read.

1
2
3
4
5
6
7
8
9
10
11
12
&amp;amp;lt;br data-mce-bogus="1"&amp;amp;gt;
 
@my_decorator
def my_func(stuff):
     do_things
 
##Is equivalent to
 
def my_func(stuff):
     do_things
 
my_func = my_decorator(my_func)
Decorators are tough to understand initially, but the effort is worth it. There are various concepts like passing arguments, 
nesting, etc that can be the topics for advanced Python questions. You can find a tutorial on how decorators in general work 
here.

Also, you must be aware of @classmethod and @staticmethod decorators in Python.

@classmethod means: when this method is called, we pass the class as the first argument instead of the instance of that class 
(as we normally do with methods). This means you can use the class and its properties inside that method rather than a 
particular instance.

@staticmethod means: when this method is called, we don’t pass an instance of the class to it (as we normally do with methods).
This means you can put a function inside a class but you can’t access the instance of that class (this is useful when your 
method does not use the instance). This demonstration in Stackoverflow may be helpful to you


Why do we use if  __name__ == “__main__” ?
-----------------------------------------
When the Python interpreter reads a source file (due to import or due to commands from terminals), it executes all of the 
code found in it.

Before executing the code, it will define a few special variables. For example, if the python interpreter is running that 
module (the source file) as the main program, it sets the special name variable to have a value “main“. If this file is being 
imported from another module, name will be set to the module’s name.



Q1).What is Python?
Ans1: Python is a high-level, interpreted, interactive and object-oriented scripting language. Python is designed to be highly
readable. It uses English keywords frequently where as other languages use punctuation, and it h
as fewer syntactical constructions than other languages.

Q2).Name some of the features of Python.
Ans2: Following are some of the salient features of python

It supports functional and structured programming methods as well as OOP.
It can be used as a scripting language or can be compiled to byte-code for building large applications.
It provides very high-level dynamic data types and supports dynamic type checking.
It supports automatic garbage collection.
It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java.

Q4).Is python a case sensitive language?
Ans4: Yes! Python is a case sensitive programming language.

What are the supported data types in Python?
Python has five standard data types −

Numbers
String
List
Tuple
Dictionary

Q5).What is the output of print str if str = ‘Hello World!’?

Ans5: It will print complete string. Output would be Hello World!.

Q6).What is the output of print str[0] if str = ‘Hello World!’?

Ans6: It will print first character of the string. Output would be H.

Q7).What is the output of print str[2:5] if str = ‘Hello World!’?

Ans7: It will print characters starting from 3rd to 5th. Output would be llo.

Q8).What is the output of print str[2:] if str = ‘Hello World!’?

Ans8: It will print characters starting from 3rd character. Output would be llo World!.

Q9).What is the output of print str * 2 if str = ‘Hello World!’?

Ans9: It will print string two times. Output would be Hello World!Hello World!.

Q10).What is the output of print str + “TEST” if str = ‘Hello World!’?

Ans10: It will print concatenated string. Output would be Hello World!TEST.

Q11).What is the output of print list if list = [ ‘abcd’, 786 , 2.23, ‘john’, 70.2 ]?

Ans11: It will print concatenated lists. Output would be [ ‘abcd’, 786 , 2.23, ‘john’, 70.2 ].

Q12).What is the output of print list[0] if list = [ ‘abcd’, 786 , 2.23, ‘john’, 70.2 ]?

Ans12: It will print first element of the list. Output would be abcd.

Q13).What is the output of print list[1:3] if list = [ ‘abcd’, 786 , 2.23, ‘john’, 70.2 ]?

Ans13: It will print elements starting from 2nd till 3rd. Output would be [786, 2.23].

Q14).What is the output of print list[2:] if list = [ ‘abcd’, 786 , 2.23, ‘john’, 70.2 ]?

Ans14: It will print elements starting from 3rd element. Output would be [2.23, ‘john’, 70.200000000000003].

Q15).What is the output of print tinylist * 2 if tinylist = [123, ‘john’]?

Ans15: It will print list two times. Output would be [123, ‘john’, 123, ‘john’].

Q16).What is the output of print list + tinylist * 2 if list = [ ‘abcd’, 786 , 2.23, ‘john’, 70.2 ] and tinylist = [123, ‘john’]?

Ans16: It will print concatenated lists. Output would be [‘abcd’, 786, 2.23, ‘john’, 70.2, 123, ‘john’, 123, ‘john’].

Q17).What is tuples in Python?

Ans17: A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses.

Q18).What is the difference between tuples and lists in Python?

Ans18:The main differences between lists and tuples are − Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as read-only lists.

Q19).What is the output of print tuple if tuple = ( ‘abcd’, 786 , 2.23, ‘john’, 70.2 )?

Ans19:It will print complete tuple. Output would be (‘abcd’, 786, 2.23, ‘john’, 70.200000000000003).

Q20).What is the output of print tuple[0] if tuple = ( ‘abcd’, 786 , 2.23, ‘john’, 70.2 )?

Ans20: It will print first element of the tuple. Output would be abcd.

Q21).What is the output of print tuple[1:3] if tuple = ( ‘abcd’, 786 , 2.23, ‘john’, 70.2 )?

Ans21: It will print elements starting from 2nd till 3rd. Output would be (786, 2.23).

Q22).What is the output of print tuple[2:] if tuple = ( ‘abcd’, 786 , 2.23, ‘john’, 70.2 )?

Ans22: It will print elements starting from 3rd element. Output would be (2.23, ‘john’, 70.200000000000003).

Q23).What is the output of print tinytuple * 2 if tinytuple = (123, ‘john’)?

Ans23: It will print tuple two times. Output would be (123, ‘john’, 123, ‘john’).

Q24).What is the output of print tuple + tinytuple if tuple = ( ‘abcd’, 786 , 2.23, ‘john’, 70.2) and tinytuple = (123, ‘john’)?

Ans24: It will print concatenated tuples. Output would be (‘abcd’, 786, 2.23, ‘john’, 70.200000000000003, 123, ‘john’).

Q25).What are Python’s dictionaries?

Ans25: Python’s dictionaries are kind of hash table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs. A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object.

Q26).How will you create a dictionary in python?

Ans26: Dictionaries are enclosed by curly braces ({ }) and values can be assigned and accessed using square braces ([]).

dict = {}
dict[‘one’] = “This is one”
dict[2]     = “This is two”
tinydict = {‘name’: ‘john’,’code’:6734, ‘dept’: ‘sales’}

Q27).How will you get all the keys from the dictionary?

Ans27: Using dictionary.keys() function, we can get all the keys from the dictionary object.
print dict.keys()   # Prints all the keys

Q28).How will you get all the values from the dictionary?

Ans28: Using dictionary.values() function, we can get all the values from the dictionary object.
print dict.values()   # Prints all the values

Q29).How will you convert a string to an int in python?

Ans29: int(x [,base]) – Converts x to an integer. base specifies the base if x is a string.

Q30).How will you convert a string to a long in python?

Ans30: long(x [,base] ) – Converts x to a long integer. base specifies the base if x is a string.


Q31).How will you convert a string to a float in python?

Ans31: float(x) − Converts x to a floating-point number.

Q32).How will you convert a object to a string in python?

Ans32: str(x) − Converts object x to a string representation.

Q33).How will you convert a object to a regular expression in python?

Ans33: repr(x) − Converts object x to an expression string.

Q34).How will you convert a String to an object in python?

Ans34: eval(str) − Evaluates a string and returns an object.

Q35).How will you convert a string to a tuple in python?

Ans35: tuple(s) − Converts s to a tuple.

Q36).How will you convert a string to a list in python?

Ans36: list(s) − Converts s to a list.

Q37).How will you convert a string to a set in python?

Ans37: set(s) − Converts s to a set.

Q38).How will you create a dictionary using tuples in python?

Ans38: dict(d) − Creates a dictionary. d must be a sequence of (key,value) tuples.

Q39).How will you convert a string to a frozen set in python?

Ans39: frozenset(s) − Converts s to a frozen set.

Q40).How will you convert an integer to a character in python?

Ans40: chr(x) − Converts an integer to a character.


Q41).How will you convert an integer to an unicode character in python?

Ans41: unichr(x) − Converts an integer to a Unicode character.

Q42).How will you convert a single character to its integer value in python?

Ans42: ord(x) − Converts a single character to its integer value.

Q43).How will you convert an integer to hexadecimal string in python?

Ans43: hex(x) − Converts an integer to a hexadecimal string.

Q44).How will you convert an integer to octal string in python?

Ans44: oct(x) − Converts an integer to an octal string.

Q45).What is the purpose of ** operator?

Ans45: ** Exponent − Performs exponential (power) calculation on operators. a**b = 10 to the power 20 if a = 10 and b = 20.

Q46).What is the purpose of // operator?

Ans46: // Floor Division − The division of operands where the result is the quotient in which the digits after the decimal point are removed.

Q47).What is the purpose of is operator?
Ans47: is − Evaluates to true if the variables on either side of the operator point to the same object and false otherwise. x is y, here is results in 1 if id(x) equals id(y).

Q48).What is the purpose of not in operator?

Ans48: not in − Evaluates to true if it does not finds a variable in the specified sequence and false otherwise. x not in y, here not in results in a 1 if x is not a member of sequence y.

Q49).What is the purpose break statement in python?

Ans49: break statement − Terminates the loop statement and transfers execution to the statement immediately following the loop.

Q50).What is the purpose continue statement in python?

Ans50: Continue statement − Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.


Q51).What is the purpose pass statement in python?

Ans51:pass statement − The pass statement in Python is used when a statement is required syntactically but you do not want any command or code to execute.

Q52).How can you pick a random item from a list or tuple?

Ans52: choice(seq) − Returns a random item from a list, tuple, or string.

Q53).How can you pick a random item from a range?

Ans53: randrange ([start,] stop [,step]) − returns a randomly selected element from range(start, stop, step).

Q54).How can you get a random number in python?

Ans54: random() − returns a random float r, such that 0 is less than or equal to r and r is less than 1.

Q55).How will you set the starting value in generating random numbers?

Ans55: seed([x]) − Sets the integer starting value used in generating random numbers. Call this function before calling any other random module function. Returns None.

Q56).How will you randomizes the items of a list in place?
Ans56: shuffle(lst) − Randomizes the items of a list in place. Returns None.

Q57).How will you capitalizes first letter of string?

Ans57: capitalize() − Capitalizes first letter of string.

Q58).How will you check in a string that all characters are alphanumeric?

Ans58: isalnum() − Returns true if string has at least 1 character and all characters are alphanumeric and false otherwise.

Q59).How will you check in a string that all characters are digits?

Ans59: isdigit() − Returns true if string contains only digits and false otherwise.

Q60).How will you check in a string that all characters are in lowercase?

Ans60: islower() − Returns true if string has at least 1 cased character and all cased characters are in lowercase and false otherwise.


Q61).How will you check in a string that all characters are numerics?

Ans61: isnumeric() − Returns true if a unicode string contains only numeric characters and false otherwise.

Q62).How will you check in a string that all characters are whitespaces?

Ans62:isspace() − Returns true if string contains only whitespace characters and false otherwise.

Q63).How will you check in a string that it is properly titlecased?

Ans63: istitle() − Returns true if string is properly “titlecased” and false otherwise.

Q64).How will you check in a string that all characters are in uppercase?

Ans64: isupper() − Returns true if string has at least one cased character and all cased characters are in uppercase and false otherwise.

Q65).How will you merge elements in a sequence?

Ans65: join(seq) − Merges (concatenates) the string representations of elements in sequence seq into a string, with separator string.

Q66).How will you get the length of the string?

Ans66: len(string) − Returns the length of the string.

Q67).How will you get a space-padded string with the original string left-justified to a total of width columns?

Ans67: just(width[, fillchar]) − Returns a space-padded string with the original string left-justified to a total of width columns.

Q68).How will you convert a string to all lowercase?
Ans68: lower() − Converts all uppercase letters in string to lowercase.

Q69).How will you remove all leading whitespace in string?

Ans69: strip() − Removes all leading whitespace in string.

Q70).How will you get the max alphabetical character from the string?

Ans70: max(str) − Returns the max alphabetical character from the string str.


0Q71).How will you get the min alphabetical character from the string?

Ans71: min(str) − Returns the min alphabetical character from the string str.

Q72).How will you replaces all occurrences of old substring in string with new string?

Ans72: replace(old, new [, max]) − Replaces all occurrences of old in string with new or at most max occurrences if max given.

Q73).How will you remove all leading and trailing whitespace in string?

Ans73:strip([chars]) − Performs both lstrip() and rstrip() on string.

Q74).How will you change case for all letters in string?

Ans74: swapcase() − Inverts case for all letters in string.

Q75).How will you get titlecased version of string?

Ans75: title() − Returns “titlecased” version of string, that is, all words begin with uppercase and the rest are lowercase.

Q76).How will you convert a string to all uppercase?

Ans76:upper() − Converts all lowercase letters in string to uppercase.

Q77).How will you check in a string that all characters are decimal?

Ans77: isdecimal() − Returns true if a unicode string contains only decimal characters and false otherwise.

Q78).What is the difference between del() and remove() methods of list?

Ans78: To remove a list element, you can use either the del statement if you know exactly which element(s) you are deleting or the remove() method if you do not know.

Q79).What is the output of len([1, 2, 3])?
Ans79: 3.

Q80).What is the output of [1, 2, 3] + [4, 5, 6]?
Ans80: [1, 2, 3, 4, 5, 6]


Q81).What is the output of [‘Hi!’] * 4?

Ans81: [‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]

Q82).What is the output of 3 in [1, 2, 3]?
Ans82: True

Q83).What is the output of for x in [1, 2, 3]: print x?
Ans83: 1 2 3

Q84).What is the output of L[2] if L = [1,2,3]?
Ans84: 3, Offsets start at zero.

Q85).What is the output of L[-2] if L = [1,2,3]?
Ans85: L[-1] = 3, L[-2]=2, L[-3]=1

Q86).What is the output of L[1:] if L = [1,2,3]?
Ans86: 2, 3, Slicing fetches sections.

Q87).How will you compare two lists?
Ans87: cmp(list1, list2) − Compares elements of both lists.

Q88).How will you get the length of a list?
Ans88: len(list) − Gives the total length of the list.

Q89).How will you get the max valued item of a list?
Ans89: max(list) − Returns item from the list with max value.

Q90).How will you get the min valued item of a list?
Ans90: min(list) − Returns item from the list with min value.

Python Training in Bangalore
Q91).How will you get the index of an object in a list?
Ans91: list.index(obj) − Returns the lowest index in list that obj appears.

Q92).How will you insert an object at given index in a list?
Ans92: list.insert(index, obj) − Inserts object obj into list at offset index.

Q93).How will you remove last object from a list?
Ans93: list.pop(obj=list[-1]) − Removes and returns last object or obj from list.

Q94).How will you remove an object from a list?
Ans94: list.remove(obj) − Removes object obj from list.

Q95).How will you reverse a list?
Ans95: list.reverse() − Reverses objects of list in place.

Q96).How will you sort a list?
Ans96: list.sort([func]) − Sorts objects of list, use compare func if given.

Q97).Name five modules that are included in python by default (many people come searching for this, so I included some more examples of modules which are often used)

Ans97: 
datetime           (used to manipulate date and time)
re                         (regular expressions)
urllib, urllib2  (handles many HTTP things)
string                  (a collection of different groups of strings for example all lower_case letters etc)
itertools            (permutations, combinations and other useful iterables)
ctypes                (from python docs: create and manipulate C data types in Python)
email                  (from python docs: A package for parsing, handling, and generating email messages)
__future__      (Record of incompatible language changes. like division operator is different and much better when imported from __future__)
sqlite3               (handles database of SQLite type)
unittest             (from python docs: Python unit testing framework, based on Erich Gamma’s JUnit and Kent Beck’s Smalltalk testing framework)
xml                     (xml support)
logging              (defines logger classes. enables python to log details on severity level basis)
os                        (operating system support)
pickle                (similar to json. can put any data structure to external files)
subprocess    (from docs: This module allows you to spawn processes, connect to their input/output/error pipes, and obtain their return codes)
webbrowser  (from docs: Interfaces for launching and remotely controlling Web browsers.)
traceback       (Extract, format and print Python stack traces)

Q98).Name a module that is not included in python by default

Ans98:mechanize
django
gtk
A lot of other can be found at pypi.

Q99).What is __init__.py used for?

Ans99:It declares that the given directory is a  package. #Python Docs (From Endophage‘s comment)

Q100).When is pass used for?

Ans100:pass does nothing. It is used for completing the code where we need something. For eg:

1
2

class abc():
pass

Devops Training in Banaglore
Q101).What is a docstring?

Ans101: docstring is the documentation string for a function. It can be accessed by

function_name.__doc__

it is declared as:

1
2

def function_name():
“””your docstring”””

Writing documentation for your progams is a good habit and makes the code more understandable and reusable.

Q102).What is list comprehension?

Ans102: Creating a list by doing some operation over data that can be accessed using an iterator. For eg:

1
2

3

>>>[ord(i) for i in string.ascii_uppercase]
[65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]

>>>

Q103).What is map?

Ans103: map executes the function given as the first argument on all the elements of the iterable given as the second argument.
If the function given takes in more than 1 arguments, then many iterables are given.

Q104).What is the difference between a tuple and a list?

Ans104:A tuple is immutable i.e. can not be changed. It can be operated on only. But a list is mutable. Changes can be done 
internally to it.

tuple initialization: a = (2,4,5)
list initialization: a = [2,4,5]

The methods/functions provided with each types are also different. Check them out yourself.



Deep Copy : 
-----------
When the copied variable is has its own memory location. Now changes made on deeply copied variable will not affect the 
original one.

Shallow Copy: 
-------------
The new variable refers to the original variable. In this case,if the new one altered the changes are reflected on the 
original variable as well.


1.What is Python?

Python is a high-level, interpreted, interactive and object-oriented scripting language. Python is designed to be highly readable.
It uses English keywords frequently where as other languages use punctuation, and it has fewer syntactical constructions than 
other languages.

2.Name some of the features of Python.

Following are some of the salient features of python −

It supports functional and structured programming methods as well as OOP.

It can be used as a scripting language or can be compiled to byte-code for building large applications.

It provides very high-level dynamic data types and supports dynamic type checking.

It supports automatic garbage collection.

It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java.

3.What is the purpose of PYTHONPATH environment variable?

PYTHONPATH − It has a role similar to PATH. This variable tells the Python interpreter where to locate the module files imported
into a program. It should include the Python source library directory and the directories containing Python source code. 
PYTHONPATH is sometimes preset by the Python installer.

4.What is the purpose of PYTHONSTARTUP environment variable?
PYTHONSTARTUP − It contains the path of an initialization file containing Python source code. It is executed every time you 
start the interpreter. It is named as .pythonrc.py in Unix and it contains commands that load utilities or modify PYTHONPATH.

5.What is the purpose of PYTHONCASEOK environment variable?
PYTHONCASEOK − It is used in Windows to instruct Python to find the first case-insensitive match in an import statement. 
Set this variable to any value to activate it.

6.What is the purpose of PYTHONHOME environment variable?
PYTHONHOME − It is an alternative module search path. It is usually embedded in the PYTHONSTARTUP or PYTHONPATH directories to 
make switching module libraries easy.

7.Is python a case sensitive language?
Yes! Python is a case sensitive programming language.

Question 6: Give an overview of the Data Types used in Python

Python has immutable and mutable data types. Immutable data types are data types that cannot be modified during runtime. 
Mutable data types can be modified during runtime. Python has the following build-in data types:

Lists (mutable)
Sets (mutable)
Dictionaries (mutable)
Tuples (immutable)
String (immutable)
Number (float, int) (immutable)


Question 3: How does Python handle Compile-time and Run-time code checking?

Python supports compile-time code checking up to some amount. Most checks like checks for variable types are postponed until 
run-time code checking. Even if you use a custom function which is not defined, you will pass the compile-time checking. 
During run-time, Python raises exceptions if something is not right.


Question 4: Name a few well-known Python packages

There are a few extremely popular Python packages in the wild:

Pandas: A package providing flexible data structures for working with relational or labeled data.
NumPy: A package which allows you to work with numerical based data structures like tensors.
Matplotlib: A 2D rendering engine written for Python. More information about Matplotlib can be found in this post.
Tensorflow: A package used for constructing computational graphs. Neural network and many machine learning models depend on 
these computational graphs. For example, you can build a GRU using Tensorflow.

Question 5: How is memory managed in Python?

Python has build-in garbage collection, which recycles and free unused memory and gives it back to its private heap space.

All Python objects and data structures are allocated to resourced using a private heap in Python. The Python interpreter takes 
care of this private heap.



The match Function:-
-------------------
This function attempts to match RE pattern to string with optional flags.

Here is the syntax for this function −

re.match(pattern, string, flags=0)

Prameter & Description
-------------------	
pattern
-------
This is the regular expression to be matched.

string
------
This is the string, which would be searched to match the pattern at the beginning of string.

flags
-----
You can specify different flags using bitwise OR (|).

The re.match function returns a match object on success, None on failure. We usegroup(num) or groups() function of match object
to get matched expression.

Match Object Method & Description
---------------------------------
group(num=0)
-----------

This method returns entire match (or specific subgroup num)

groups()
--------
This method returns all matching subgroups in a tuple (empty if there weren't any) 
 
 
Example
#!/usr/bin/python
import re

line = "Cats are smarter than dogs"

matchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I)

if matchObj:
   print "matchObj.group() : ", matchObj.group()
   print "matchObj.group(1) : ", matchObj.group(1)
   print "matchObj.group(2) : ", matchObj.group(2)
else:
   print "No match!!"
When the above code is executed, it produces following result −

matchObj.group() :  Cats are smarter than dogs
matchObj.group(1) :  Cats
matchObj.group(2) :  smarter


The search Function
--------------------
This function searches for first occurrence of RE pattern within string with optional flags.

Here is the syntax for this function −

re.search(pattern, string, flags=0)


Example
#!/usr/bin/python
import re

line = "Cats are smarter than dogs";

searchObj = re.search( r'(.*) are (.*?) .*', line, re.M|re.I)

if searchObj:
   print "searchObj.group() : ", searchObj.group()
   print "searchObj.group(1) : ", searchObj.group(1)
   print "searchObj.group(2) : ", searchObj.group(2)
else:
   print "Nothing found!!"
When the above code is executed, it produces following result −

searchObj.group() :  Cats are smarter than dogs
searchObj.group(1) :  Cats
searchObj.group(2) :  smarter

Matching Versus Searching:-
-------------------------
Python offers two different primitive operations based on regular expressions: match checks for a match only at the beginning 
of the string, while search checks for a match anywhere in the string (this is what Perl does by default).

Example
#!/usr/bin/python
import re

line = "Cats are smarter than dogs";

matchObj = re.match( r'dogs', line, re.M|re.I)
if matchObj:
   print "match --> matchObj.group() : ", matchObj.group()
else:
   print "No match!!"

searchObj = re.search( r'dogs', line, re.M|re.I)
if searchObj:
   print "search --> searchObj.group() : ", searchObj.group()
else:
   print "Nothing found!!"
When the above code is executed, it produces the following result −

No match!!
search --> matchObj.group() :  dogs

Search and Replace:-
-------------------
One of the most important re methods that use regular expressions is sub.

Syntax
re.sub(pattern, repl, string, max=0)
This method replaces all occurrences of the RE pattern in string with repl, substituting all occurrences unless max provided.
This method returns modified string.

Example
#!/usr/bin/python
import re

phone = "2004-959-559 # This is Phone Number"

# Delete Python-style comments
num = re.sub(r'#.*$', "", phone)
print "Phone Num : ", num

# Remove anything other than digits
num = re.sub(r'\D', "", phone)    
print "Phone Num : ", num
When the above code is executed, it produces the following result −

Phone Num :  2004-959-559
Phone Num :  2004959559

 
 
 
 
 
 
 
 
 
 
Regular Expression Modifiers: Option Flags:-
---------------------------------------------
Regular expression literals may include an optional modifier to control various aspects of matching. The modifiers are 
specified as an optional flag. You can provide multiple modifiers using exclusive OR (|)

Modifier & Description:-
----------------------

re.I:-
----
Performs case-insensitive matching.

	
re.L:-
----
Interprets words according to the current locale. This interpretation affects the alphabetic group (\w and \W), 
as well as word boundary behavior(\b and \B).

re.M:-
----
Makes $ match the end of a line (not just the end of the string) and makes ^ match the start of any line 
(not just the start of the string).
	
re.S:-
----
Makes a period (dot) match any character, including a newline.

re.U:-
----
Interprets letters according to the Unicode character set. This flag affects the behavior of \w, \W, \b, \B.

re.X:-
----
Permits "cuter" regular expression syntax. It ignores whitespace (except inside a set [] or when escaped by a backslash) and 
treats unescaped # as a comment marker. 

Regular Expression Patterns:-
---------------------------

Except for control characters, (+ ? . * ^ $ ( ) [ ] { } | \), all characters match themselves. You can escape a 
control character by preceding it with a backslash.

Pattern & Description:-
----------------------
^:-
-
Matches beginning of line.

$:-
--
Matches end of line.
. :-

Matches any single character except newline. Using m option allows it to match newline as well.
	
[...] :-
------
Matches any single character in brackets.

[^...]:-
------
Matches any single character not in brackets

re* :-
---
Matches 0 or more occurrences of preceding expression.

re+ :-
---
Matches 1 or more occurrence of preceding expression.

re? :-
---
Matches 0 or 1 occurrence of preceding expression.

re{ n} :-
------
Matches exactly n number of occurrences of preceding expression.

re{ n,}:-
-------
Matches n or more occurrences of preceding expression.

re{ n, m}:-
---------
Matches at least n and at most m occurrences of preceding expression.

a| b :-
----
Matches either a or b.

(re) :-
----
Groups regular expressions and remembers matched text.

(?imx):-
------
Temporarily toggles on i, m, or x options within a regular expression. If in parentheses, only that area is affected.

(?-imx) :-
-------
Temporarily toggles off i, m, or x options within a regular expression. If in parentheses, only that area is affected.

(?: re) :-
-------
Groups regular expressions without remembering matched text.

(?imx: re) :-
----------
Temporarily toggles on i, m, or x options within parentheses.

(?-imx: re) :-
-----------
Temporarily toggles off i, m, or x options within parentheses.

(?#...) :-
-------
Comment.

(?= re):-
-------
Specifies position using a pattern. Doesn't have a range.

(?! re) :-
-------
Specifies position using pattern negation. Doesn't have a range.

(?> re) :-
-------
Matches independent pattern without backtracking.

\w :-
--
Matches word characters.

\W :-
--
Matches nonword characters.

\s :-
--
Matches whitespace. Equivalent to [\t\n\r\f].

\S :-
--
Matches nonwhitespace.

\d :-
---
Matches digits. Equivalent to [0-9].

\D :-
--
Matches nondigits.

\A :-
--
Matches beginning of string.

\Z :-
--
Matches end of string. If a newline exists, it matches just before newline.

\z :-
--
Matches end of string.

\G :-
--
Matches point where last match finished.

\b :-
--
Matches word boundaries when outside brackets. Matches backspace (0x08) when inside brackets.

\B :-
--
Matches nonword boundaries.

\n, \t, etc. :-
-------------
Matches newlines, carriage returns, tabs, etc.

\1...\9 :-
-------
Matches nth grouped subexpression.

\10 :-
----
Matches nth grouped subexpression if it matched already. Otherwise refers to the octal representation of a character code.


Character classes:-
-----------------
Example & Description :-
----------------------	

[Pp]ython :-
---------
Match "Python" or "python"

rub[ye] :-
-------
Match "ruby" or "rube"

[aeiou] :-
-------
Match any one lowercase vowel

[0-9] :-
-----
Match any digit; same as [0123456789]

[a-z] :-
-----
Match any lowercase ASCII letter

[A-Z] :-
-----
Match any uppercase ASCII letter

[a-zA-Z0-9] :-
-----------
Match any of the above

[^aeiou] :-
--------
Match anything other than a lowercase vowel

[^0-9] :-
------
Match anything other than a digit


Nongreedy repetition :-
--------------------
This matches the smallest number of repetitions −

Example & Description :-
---------------------	

<.*> :-
----
Greedy repetition: matches "<python>perl>"

<.*?> :-
-----
Nongreedy: matches "<python>" in "<python>perl>"


Grouping with Parentheses :-
-------------------------
Example & Description :-
---------------------	
\D\d+ :-
-----
No group: + repeats \d

(\D\d)+ :-
-------
Grouped: + repeats \D\d pair

([Pp]ython(, )?)+ :-
-----------------
Match "Python", "Python, python, python", etc.

what is regular expression:-
--------------------------
A regular expression is a special sequence of characters that helps you match or find other strings or sets of strings, 
using a specialized syntax held in a pattern. Regular expressions are widely used in UNIX world.

The module re provides full support for Perl-like regular expressions in Python. The re module raises the exception re.error 
if an error occurs while compiling or using a regular expression.

What is numpy:-
--------------
NumPy, which stands for Numerical Python, is a library consisting of multidimensional array objects and a collection of 
routines for processing those arrays. Using NumPy, mathematical and logical operations on arrays can be performed. 



Question1. What Is Numpy?
Answer :

NumPy is a Python extension module that provides efficient operation on arrays of homogeneous data. It allows python to serve 
as a high-level language for manipulating numerical data, much like IDL, MATLAB, or Yorick.

Question2. Why Should I Use Numpy Rather Than Idl, Matlab, Octave, Or Yorick?
Answer :

As always, you should choose the programming tools that suit your problem and your environment. Advantages many people cite 
are that it is open-source, it doesn’t cost anything, it uses the general-purpose language (Python) rather than a sui 
generisprogramming language, and it is relatively easy  to connect existing C and Fortran code to the Python interpreter.

Question3. What Is A Numpy Array?
Answer :

A NumPy array is a multidimensional array of objects all of the same type. In memory, it is an object which points to a 
block of memory, keeps track of the type of data stored in that memory, keeps track of how many dimensions there are and how 
large each one is, and - importantly - the spacing between elements along each axis.




space for an array, and record arrays, where each element can have a custom, compound data type.

Question4. What Advantages Do Numpy Arrays Offer Over (nested) Python Lists?
Answer :
Python’s lists are efficient general-purpose containers. They support (fairly) efficient insertion, deletion, appending, and 
concatenation, and Python’s list comprehensions make them easy to construct and manipulate. However, they have certain 
limitations: they don’t support “vectorized” operations like elementwise addition and multiplication, and the fact that they 
can contain objects of differing types mean that Python must store type information for every element, and must execute type 
dispatching code when operating on each element. This also means that very few list operations can be carried out by efficient 
C loops – each iteration would require type checks and other Python API bookkeeping.

Question5. What’s The Story With Numeric, Numarray, And Numpy?

Answer :

The short version is that Numeric was the original package that provided efficient homogeneous numeric arrays for Python, 
but some developers felt it lacked certain essential features, so they began developing an independent implementation called 
numarray. Having two incompatible implementations of array was clearly a disaster in the making, so NumPy was designed to be 
an improvement on both.


Question6. What Is Scipy?
Answer :

SciPy is a set of open source (BSD licensed) scientific and numerical tools for Python. It currently supports special 
functions, integration, ordinary differential equation (ODE) solvers, gradient optimization, parallel programming tools, 
an expression-to-C++ compiler for fast execution, and others. A good rule of thumb is that if it’s covered in a general 
textbook on numerical computing (for example, the well-known Numerical Recipes series), it’s probably implemented in scipy.


Question8. What Are Scipy’s Licensing Terms?

Answer :
SciPy’s license is free for both commercial and non-commercial.

Question13. What Is The Difference Between Numpy And Scipy?
Answer :

In an ideal world, NumPy would contain nothing but the array data type and the most basic operations: indexing, sorting, 
reshaping, basic elementwise functions, et cetera. All numerical code would reside in SciPy. However, one of NumPy’s important 
goals is compatibility, so NumPy tries to retain all features supported by either of its predecessors. Thus NumPy contains 
some linear algebra functions, even though these more properly belong in SciPy. In any case, SciPy contains more 
fully-featured versions of the linear algebra modules, as well as many other numerical algorithms. If you are doing 
scientific computing with python, you should probably install both NumPy and SciPy. Most new features belong in SciPy rather 
than NumPy.


Question14. How Do I Make Plots Using Numpy/scipy?
Answer :

Plotting functionality is beyond the scope of NumPy and SciPy, which focus on numerical objects and algorithms. 
Several packages exist that integrate closely with NumPy to produce high quality plots, such as the immensely popular 
Matplotlib and the extensible, modular toolkit Chaco.

Question15. How Do I Make 3d Plots/visualizations Using Numpy/scipy?
Answer :

Like 2D plotting, 3D graphics is beyond the scope of NumPy and SciPy, but just as in the 2D case, packages exist that 
integrate with NumPy. Matplotlib provides basic 3D plotting in the mplot3d subpackage, whereas Mayavi provides a wide range 
of high-quality 3D visualization features, utilizing the powerful VTK engine.


Question16. Why Both Numpy.linalg And Scipy.linalg? What’s The Difference?
Answer :

One of the design goals of NumPy was to make it buildable without a Fortran compiler, and if you don’t have LAPACK available 
NumPy will use its own implementation. SciPy requires a Fortran compiler to be built, and heavily depends on wrapped Fortran 
code.

The linalg modules in NumPy and SciPy have some common functions but with different docstrings, and scipy.linalgcontains 
functions not found in numpy.linalg, such as functions related to LU decomposition and the Schur decomposition, multiple ways 
of calculating the pseudoinverse, and matrix transcendentals like the matrix logarithm. Some functions that exist in both have 
augmented functionality in scipy.linalg; for example scipy.linalg.eig() can take a second matrix argument for solving 
generalized eigenvalue problems.



Question20. What Is The Preferred Way To Check For An Empty (zero Element) Array?

Answer :
If you are certain a variable is an array, then use the size attribute. If the variable may be a list or other sequence type, 
use len().

The size attribute is preferable to len because:

>>> a = numpy.zeros((1,0))
>>> a.size
0
whereas
>>> len(a)
1

Question21. I Want To Load Data From A Text File. How Do I Make This Code More Efficient?
Answer :
Use numpy.loadtxt(). Even if your text file has header and footer lines or comments, loadtxt can almost certainly read it; 
it is convenient and efficient.

If you find this still too slow, you should consider changing to a more efficient file format than plain text. There are a 
large number of alternatives, depending on your needs (and on which version of NumPy/SciPy you are using):

Text files: slow, huge, portable, human-readable; built into NumPy
Raw binary: no metadata, totally unportable, fast; built into NumPy
pickle: somewhat slow, somewhat portable (may be incompatible with different NumPy versions); built into NumPy
MATLAB format: portable; built into SciPy (scipy.io.loadmat())
HDF5: high-powered kitchen-sink format; both PyTables and h5py provide a NumPy friendly interface on top of the core HDF5 
library written in C.
FITS: standard kitchen-sink format in astronomy; the astropy library provides a convenient Python interface through its io.fits
package.
.npy: NumPy native binary data format, simple, efficient, portable; built into NumPy as of 1.0.5.



39) What is monkey patching in Python?

Monkey patching is a technique that helps the programmer to modify or extend other code at runtime. Monkey patching 
comes handy in testing but it is not a good practice to use it in production environment as debugging the code could become 
difficult.


Overview of OOP Terminology
Class − A user-defined prototype for an object that defines a set of attributes that characterize any object of the class. 
The attributes are data members (class variables and instance variables) and methods, accessed via dot notation.

Class variable − A variable that is shared by all instances of a class. Class variables are defined within a class but 
outside any of the class's methods. Class variables are not used as frequently as instance variables are.

Data member − A class variable or instance variable that holds data associated with a class and its objects.

Function overloading − The assignment of more than one behavior to a particular function. The operation performed varies by
the types of objects or arguments involved.

Instance variable − A variable that is defined inside a method and belongs only to the current instance of a class.

Inheritance − The transfer of the characteristics of a class to other classes that are derived from it.

Instance − An individual object of a certain class. An object obj that belongs to a class Circle, for example, is an instance 
of the class Circle.

Instantiation − The creation of an instance of a class.

Method − A special kind of function that is defined in a class definition.

Object − A unique instance of a data structure that's defined by its class. An object comprises both data members 
(class variables and instance variables) and methods.

Operator overloading − The assignment of more than one function to a particular operator.


Python OOPs Concepts:-
---------------------
Python is an object-oriented programming language. It allows us to develop applications using Object Oriented approach. 
In Python, we can easily create and use classes and objects.

Major principles of object-oriented programming system are given below

Object
Class
Method
Inheritance
Polymorphism
Data Abstraction
Encapsulation

Object
------
Object is an entity that has state and behavior. It may be anything. It may be physical and logical. 
For example: mouse, keyboard, chair, table, pen etc.

Everything in Python is an object, and almost everything has attributes and methods. All functions have a built-in attribute __doc__, which returns the doc string defined in the function source code.

Class
------
Class can be defined as a collection of objects. It is a logical entity that has some specific attributes and methods. 
For example: if you have an employee class then it should contain an attribute and method i.e. an email id, name, age, salary 
etc.

Syntax:

class ClassName:  
    <statement-1>  
    .  
    .  
    .  
    <statement-N>  


Method
------
Method is a function that is associated with an object. In Python, method is not unique to class instances. 
Any object type can have methods.

Inheritance
-----------
Inheritance is a feature of object-oriented programming. It specifies that one object acquires all the properties and 
behaviors of parent object. By using inheritance you can define a new class with a little or no changes to the existing class. 
The new class is known as derived class or child class and from which it inherits the properties is called base class or parent
class.

It provides re-usability of the code.

Polymorphism :-
-------------
Polymorphism is made by two words "poly" and "morphs". Poly means many and Morphs means form, shape. 
It defines that one task can be performed in different ways. For example: You have a class animal and all animals talk. 
But they talk differently. Here, the "talk" behavior is polymorphic in the sense and totally depends on the animal. 
So, the abstract "animal" concept does not actually "talk", but specific animals (like dogs and cats) have a concrete 
implementation of the action "talk".

Encapsulation
-------------
Encapsulation is also the feature of object-oriented programming. It is used to restrict access to methods and variables. 
In encapsulation, code and data are wrapped together within a single unit from being modified by accident.

Data Abstraction
-----------------
Data abstraction and encapsulation both are often used as synonyms. Both are nearly synonym because data abstraction is 
achieved through encapsulation.

Abstraction is used to hide internal details and show only functionalities. Abstracting something means to give names to things,
so that the name captures the core of what a function or a whole program does.

Object-oriented vs Procedure-oriented Programming languages :-
-----------------------------------------------------------
Index	Object-oriented Programming	Procedural Programming
1.	Object-oriented programming is an problem solving approach and used where computation is done by using objects.	
Procedural programming uses a list of instructions to do computation step by step.
2.	It makes development and maintenance easier.	
In procedural programming, It is not easy to maintain the codes when project becomes lengthy.
3.	It simulates the real world entity. So real world problems can be easily solved through oops.	
It doesn't simulate the real world. It works on step by step instructions divided in small parts called functions.
4.	It provides data hiding. so it is more secure than procedural languages. You cannot access private data from anywhere.	
Procedural language doesn't provide any proper way for data binding so it is less secure.
5.	Example of object-oriented programming languages are: C++, Java, .Net, Python, C# etc.	
Example of procedural languages are: C, Fortran, Pascal, VB etc.

1) What is Linux?
Linux is a UNIX based operating system. It was first introduced by Linus Torvalds. It is an open source operating system 
that was designed to provide free and a low cost operating system for the computer users.

2) What is the difference between UNIX and Linux?
UNIX was originally started as a propriety operating system for Bell laboratories, which later release their commercial 
version while Linux is a free, open source and a non propriety operating system for the mass uses.

3) What is Linux Kernel?
Linux Kernel is low level system software. It is used to manage the hardware resources for the users. It provides an interface 
for user-level interaction.

4) Is it legal to edit Linux Kernel?
Yes. You can edit Linux Kernel because it is released under General Public License (GPL) and any one can edit it. 
It comes under the category of free and open source software.

5) What is LILO?
LILO is a boot loader for Linux. It is used to load the Linux operating system into the main memory to begin its operations.


 
6) What is the advantage of open source?
Open source facilitates you to distribute your software, including source codes freely to anyone who is interested. So, you can
add features and even debug and correct errors of the source code.

7) What are the basic components of Linux?
Just like other operating systems, Linux has all components like kernel, shells, GUIs, system utilities and application 
programs.

8) What is the advantage of Linux?
Every aspect comes with additional features and it provides a free downloading facility for all codes.

9) What is Swap Space?
Swap space is used to specify a space which is used by Linux to hold some concurrent running program temporarily. 
It is used when RAM does not have enough space to hold all programs that are executing.

10) What is BASH?
BASH is a short form of Bourne Again SHell. It was a replacement to the original Bourne shell, written bu Steve Bourne.

11) What is the basic difference between BASH and DOS?
BASH commands are case sensitive while DOS commands are not case sensitive.
DOS follows a convention in naming files. In DOS, 8 character file name is followed by a dot and 3 characters for the extension. 
BASH doesn't follow such convention.

12) What is a root account?
The root account is like a system administrator account. It provides you full control of the system. You can create and 
maintain user accounts, assign different permission for each account etc.

13) What is CLI?
CLI stands for Command Line Interface. It is an interface that allows users to type declarative commands to instruct the 
computer to perform operations.

14) What is GUI?
GUI stands for Graphical User Interface. It uses the images and the icons which are clicked by the users to communicate with 
the system. It is more attractive and user-friendly because the use of the images and icons.

15) Which popular office suite is available free for both Microsoft and Linux?
Open Office Suite is available free for both Microsoft and Linux. You can install it on both of them.

16) Suppose your company is recently switched from Microsoft to Linux and you have some MS Word document to save and work in 
Linux, what will you do?
Install Open Office Suite on Linux. It facilitates you to work with Microsoft documents.

17) What is SMTP?
SMTP stands for Simple Mail Transfer Protocol. It is an internet standard for mail transmission.

18) What is Samba? Why is it used?
Samba service is used to connect Linux machines to Microsoft network resources by providing Microsoft SMB support.

19) What are the basic commands for user management?
last,
chage,
chsh,
lsof,
chown,
chmod,
useradd,
userdel,
newusers etc.
20) What is the maximum length for a file name in Linux?
255 characters.

21) Is Linux Operating system virus free?
No, There is no operating system till date that is virus free but Linux is known to have less number of viruses.

22) Which partition stores the system configuration files in Linux system?
/stc partition.

23) Which command is used to uncompress gzip files?
gunzip command is used to uncompress gzip files.

24) Why do developers use MD5 options on passwords?
MD5 is an encryption method so it is used to encrypt the passwords before saving.

25) What is a virtual desktop?
The virtual desktop is used as an alternative to minimizing and maximizing different windows on the current desktop. 
Virtual desktop facilitates you to open one or more programs on a clean slate rather than minimizing or restoring all the 
needed programs.

26) What is the difference between soft and hard mounting points?
In the soft mount, if the client fails to connect the server, it gives an error report and closes the connection whereas in 
hard mount, if the client fails to access the server, the connection hangs; and once the system is up, it again accesses the 
server.

27) Does the Alt+Ctrl+Del key combination work in Linux?
Yes, it works like windows.

28) What are the file permissions in Linux?
There are 3 types of permissions in Linux OS that are given below:

Read: User can read the file and list the directory.
Write: User can write new files in the directory .
Execute: User can access and run the file in a directory.
29) What are the modes used in VI editor?
There are 3 types of modes in vi Editor:

Regular mode or command mode
Insertion mode or edit mode
Replacement mode or Ex mode
30) How to exit from vi editor?
The following commands are used to exit from vi editor.

:wq saves the current work and exits the VI.
:q! exits the VI without saving current work.
31) How to delete information from a file in vi?
The following commands are used to delete information from vi editor.

x deletes a current character.
dd deletes the current line.
32) How to create a new file or modify an existing file in vi?
vi filename  

Q:2 How To check Memory stats and CPU stats ?

Ans:  Using ‘free’ & ‘vmstat’ command we can display the physical and virtual memory statistics respectively.With the help of
‘sar’ command we see the CPU utilization & other stats.

Q:3 What does Sar provides and at which location Sar logs are stored ?

Ans: Sar Collect, report, or save system activity information. The default version of the sar command (CPU utilization report) 
might be one of the first facilities the  user  runs  to  begin system  activity investigation, because it monitors major 
system resources. If CPU utilization is near 100 percent (user + nice + system), the workload sampled is CPU-bound.

By  default log files of Sar command  is located at  /var/log/sa/sadd file, where the dd parameter indicates the current day.

Q:4 How to increase the size of LVM partition ?

– Use the lvextend command (lvextend -L +100M /dev/<Name of the LVM Partition> , in this example we are extending the size by 
100MB.
– resize2fs /dev/<Name of the LVM Partition>
– check the size of partition using ‘df -h’ command

Q:5 How to reduce or shrink the size of LVM partition ?

Ans: Below are the logical Steps to reduce size of LVM partition :
-Umount the filesystem using umount command,
-use resize2fs command , e.g resiz2fs /dev/mapper/myvg-mylv 10G
-Now use the lvreduce command , e.g lvreduce -L 10G /dev/mapper/myvg-mylv

Above Command will shrink the size & will make the filesystem size 10GB.

 Q:6 How to create partition from the raw disk ?

Ans: Using fdisk utility we can create partitions from the raw disk.Below are the steps to create partition from the raw dsik :

– fdisk  /dev/hd* (IDE) or /dev/sd* (SCSI)
– Type n to create a new partition
–  After creating partition , type w command to write the changes to the partition table.

 Q:7 Where the kernel modules are located ?

Ans: The ‘/lib/modules/kernel-version/’ directory stores all kernel modules or compiled drivers in Linux operating system. 
Also with ‘lsmod’ command we can see all the installed kernel modules.

Q:8 What is umask ?

Ans: umask stands for ‘User file creation mask’, which determines the settings of a mask that controls which file permissions 
are set for files and directories when they are created.

Q:9 How to set the umask permanently for a user?

Ans: To set this value permanently for a user, it has to be put in the appropriate profile file which depends on the default 
shell of the user.

Q:10 How to change the default run level in linux ?

Ans: To change the run level we have to edit the file “/etc/inittab” and change initdefault entry ( id:5:initdefault:). 
Using ‘init’ command we change the run level temporary like ‘init 3’ , this command will move the system in runlevl 3.

Q:11 How to share a directory using nfs ?

Ans: To share a directory using nfs , first edit the configuration file ‘/etc/exportfs’ , add a entry like
‘/<directory-name>  <ip or Network>(Options)’ and then restart the nfs service.

Q:12 How to check and mount nfs share ?

Ans: Using ‘showmount’ command we can see what directories are shared via nfs e.g ‘showmount -e <ip address of nfs server>’.
Using mount command we can mount the nfs share on linux machine.

Q:13 What are the default ports used for SMTP,DNS,FTP,DHCP,SSH and squid ?
Ans: Service      Port
SMTP          25
DNS            53
FTP             20 (data transfer) , 21 ( Connection established)
DHCP         67/UDP(dhcp server) , 68/UDP(dhcp client)
SSH            22
Squid         3128

Q:14 What is Network Bonding ?

Ans: Network bonding is the aggregation of multiple Lan cards into a single bonded interface to provide fault tolerance and 
high performance. Network bonding is also known as NIC Teaming.

Q:15 What  are the different modes of Network bonding in Linux ?

Ans: Below are list of modes used in Network Bonding :

balance-rr or 0 – round-robin mode for fault tolerance and load balancing.
active-backup or 1 – Sets active-backup mode for fault tolerance.
balance-xor or 2 – Sets an XOR (exclusive-or) mode for fault tolerance and load balancing.
broadcast or 3 – Sets a broadcast mode for fault tolerance. All transmissions are sent on all slave interfaces.
802.3ad or 4  – Sets an IEEE 802.3ad dynamic link aggregation mode. Creates aggregation groups that share the same speed & 
duplex settings.
balance-tlb or 5 –  Sets a Transmit Load Balancing (TLB) mode for fault tolerance & load balancing.
balance-alb or 6 –  Sets an Active Load Balancing (ALB) mode for fault tolerance & load balancing.

Q:16 How to check and verify the status the bond interface.

Ans: Using the command ‘cat /proc/net/bonding/bond0’ , we can check which mode is enabled and what lan cards are used in this 
bond. In this example we have one only one bond interface but we can have multiple bond interface like bond1,bond2 and so on.

Q:17 How to check default route and routing table ?

Ans: Using the Commands ‘netstat -nr’ and ‘route -n’ we can see the default route and routing tables.

Q:18 How to check which ports are listening in my Linux Server ?

Ans:  Use the Command ‘netstat –listen’ and ‘lsof -i’

Q:19 List the services that are enabled at a particular run level in linux server ?

Ans: With the help of command ‘chkconfig –list | grep 5:on’ we can list all the service that are enabled in run level5. 
For other run levels just replace 5 with the respective run level.

Q:20 How to enable a service at a particular run level ?

Ans: We can enable a service using the Command ‘chkconfig <Service-Name> on –level 3’

Q:21 How to upgrade Kernel in Linux ?

Ans: We should never upgrade Linux Kernel , always install the new New kernel using rpm command because upgrading a kenel 
can make your linux box in a unbootable state.

Q:22 How To scan newly asssigned luns on linux box without rebooting ?

Ans: There are two ways to scan newly assigned luns :
Method:1 if sg3 rpm is installed , then run the command ‘rescan-scsi-bus.sh’
Method:2 Run the Command ,  echo ” – – – ” > /sys/class/scsi_host/hostX/scan

Q:23 How  to find WWN numbers of HBA cards in Linux Server ?

Ans: We can find the WWN numbers of HBA cards using the command ‘systool -c fc_host -v | grep port_name’

Q:24 How to add & change the Kernel parameters ?

Ans: To Set the kernel parameters in linux , first edit the file ‘/etc/sysctl.conf’ after making the changes save the file 
and run the command ‘sysctl -p’ , this command will make the changes permanently without rebooting the machine.

Q:25 What is Puppet Server ?

Ans: Puppet is an open-source & enterprise software for configuration management toll in UNIX like  operating system.  
Puppet is a  IT automation software used to push configuration to its clients (puppet agents) using code. Puppet code can do a 
variety of tasks from installing new software, to check file permissions, or updating user accounts & lots of other tasks.

Q:26 What are manifests in Puppet ?

Ans: Manifests in Puppet are the files in which the client configuration is specified.

Q:27 Which Command is used to sign requested certificates in Puppet Server ?

Ans: ‘puppetca  –sign hostname-of-agent’ in (2.X)  & ‘puppet ca  sign hostname-of-agent’ in  (3.X)

Q:28  At which location  Puppet Master Stores Certificates ?

Ans:  /var/lib/puppet/ssl/ca/signed

Q:29 How to find all the regular files in a directory  ?

Ans: using the command ‘find /<directory -type f’.

Q:30 What is load average in Linux ?

Ans: Load  Average is defined as the average sum of the number of process waiting in the run queue and number of process 
currently executing over the period of 1,5 and 15  minutes. Using the ‘top’ and ‘uptime’ command we find the load average of a 
Linux sever.

os module:-
------------
The os module provides a big range of useful methods to manipulate files and directories.

Sr.No.	Methods with Description
1	os.access(path, mode)
Use the real uid/gid to test for access to path.

2	os.chdir(path)
Change the current working directory to path

3	os.chflags(path, flags)
Set the flags of path to the numeric flags.

4	os.chmod(path, mode)
Change the mode of path to the numeric mode.

5	os.chown(path, uid, gid)
Change the owner and group id of path to the numeric uid and gid.

6	os.chroot(path)
Change the root directory of the current process to path.

7	os.close(fd)
Close file descriptor fd.

8	os.closerange(fd_low, fd_high)
Close all file descriptors from fd_low (inclusive) to fd_high (exclusive), ignoring errors.

9	os.dup(fd)
Return a duplicate of file descriptor fd.

10	os.dup2(fd, fd2)
Duplicate file descriptor fd to fd2, closing the latter first if necessary.

11	os.fchdir(fd)
Change the current working directory to the directory represented by the file descriptor fd.

12	os.fchmod(fd, mode)
Change the mode of the file given by fd to the numeric mode.

13	os.fchown(fd, uid, gid)
Change the owner and group id of the file given by fd to the numeric uid and gid.

14	os.fdatasync(fd)
Force write of file with filedescriptor fd to disk.

15	os.fdopen(fd[, mode[, bufsize]])
Return an open file object connected to the file descriptor fd.

16	os.fpathconf(fd, name)
Return system configuration information relevant to an open file. name specifies the configuration value to retrieve.

17	os.fstat(fd)
Return status for file descriptor fd, like stat().

18	os.fstatvfs(fd)
Return information about the filesystem containing the file associated with file descriptor fd, like statvfs().

19	os.fsync(fd)
Force write of file with filedescriptor fd to disk.

20	os.ftruncate(fd, length)
Truncate the file corresponding to file descriptor fd, so that it is at most length bytes in size.

21	os.getcwd()
Return a string representing the current working directory.

22	os.getcwdu()
Return a Unicode object representing the current working directory.

23	os.isatty(fd)
Return True if the file descriptor fd is open and connected to a tty(-like) device, else False.

24	os.lchflags(path, flags)
Set the flags of path to the numeric flags, like chflags(), but do not follow symbolic links.

25	os.lchmod(path, mode)
Change the mode of path to the numeric mode.

26	os.lchown(path, uid, gid)
Change the owner and group id of path to the numeric uid and gid. This function will not follow symbolic links.

27	os.link(src, dst)
Create a hard link pointing to src named dst.

28	os.listdir(path)
Return a list containing the names of the entries in the directory given by path.

29	os.lseek(fd, pos, how)
Set the current position of file descriptor fd to position pos, modified by how.

30	os.lstat(path)
Like stat(), but do not follow symbolic links.

31	os.major(device)
Extract the device major number from a raw device number.

32	os.makedev(major, minor)
Compose a raw device number from the major and minor device numbers.

33	os.makedirs(path[, mode])
Recursive directory creation function.

34	os.minor(device)
Extract the device minor number from a raw device number.

35	os.mkdir(path[, mode])
Create a directory named path with numeric mode mode.

36	os.mkfifo(path[, mode])
Create a FIFO (a named pipe) named path with numeric mode mode. The default mode is 0666 (octal).

37	os.mknod(filename[, mode=0600, device])
Create a filesystem node (file, device special file or named pipe) named filename.

38	os.open(file, flags[, mode])
Open the file file and set various flags according to flags and possibly its mode according to mode.

39	os.openpty()
Open a new pseudo-terminal pair. Return a pair of file descriptors (master, slave) for the pty and the tty, respectively.

40	os.pathconf(path, name)
Return system configuration information relevant to a named file.

41	os.pipe()
Create a pipe. Return a pair of file descriptors (r, w) usable for reading and writing, respectively.

42	os.popen(command[, mode[, bufsize]])
Open a pipe to or from command.

43	os.read(fd, n)
Read at most n bytes from file descriptor fd. Return a string containing the bytes read. If the end of the file referred to
by fd has been reached, an empty string is returned.

44	os.readlink(path)
Return a string representing the path to which the symbolic link points.

45	os.remove(path)
Remove the file path.

46	os.removedirs(path)
Remove directories recursively.

47	os.rename(src, dst)
Rename the file or directory src to dst.

48	os.renames(old, new)
Recursive directory or file renaming function.

49	os.rmdir(path)
Remove the directory path

50	os.stat(path)
Perform a stat system call on the given path.

51	os.stat_float_times([newvalue])
Determine whether stat_result represents time stamps as float objects.

52	os.statvfs(path)
Perform a statvfs system call on the given path.

53	os.symlink(src, dst)
Create a symbolic link pointing to src named dst.

54	os.tcgetpgrp(fd)
Return the process group associated with the terminal given by fd (an open file descriptor as returned by open()).

55	os.tcsetpgrp(fd, pg)
Set the process group associated with the terminal given by fd (an open file descriptor as returned by open()) to pg.

56	os.tempnam([dir[, prefix]])
Return a unique path name that is reasonable for creating a temporary file.

57	os.tmpfile()
Return a new file object opened in update mode (w+b).

58	os.tmpnam()
Return a unique path name that is reasonable for creating a temporary file.

59	os.ttyname(fd)
Return a string which specifies the terminal device associated with file descriptor fd. If fd is not associated with a 
terminal device, an exception is raised.

60	os.unlink(path)
Remove the file path.

61	os.utime(path, times)
Set the access and modified times of the file specified by path.

62	os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])
Generate the file names in a directory tree by walking the tree either top-down or bottom-up.

63	os.write(fd, str)
Write the string str to file descriptor fd. Return the number of bytes actually written.


sys module :-
-----------

The sys module allows you to use stdin() and stdout(), as well as stderr(), but, most interestingly, we can utilize dargv().
To many, this is a confusing concept, but it is pretty simple and very useful once you learn it. The idea of sys.argv is to 
allow you to pass arguments through to Python from the command line.

This ability acts as a bridge to the ability to communicate between Python and other languages, which can then communicate 
back through the shell to interact.

With stdout and stdin, we can pass messages and errors through to the command line, or just use it for logging purposes.

1Q).What is Pandas/Python Pandas?
Ans1: Pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with 
“relational” or “labeled” data both easy and intuitive. It aims to be the fundamental high-level building block for doing 
practical, real world data analysis in Python.

2Q). What is Python pandas used for?
Ans2: pandas is a software library written for the Python programming language for data manipulation and analysis. 
In particular, it offers data structures and operations for manipulating numerical tables and time series. pandas is free 
software released under the three-clause BSD license.

 3Q). What is a pandas DataFrame?
Ans3: DataFrame is a 2-dimensional labeled data structure with columns of potentially different types. You can think of it 
like a spreadsheet or SQL table, or a dict of Series objects. It is generally the most commonly used pandas object.

Q4). What is NP Python?
Ans4: NumPy (pronounced /ˈnʌmpaɪ/ (NUM-py) or sometimes /ˈnʌmpi/ (NUM-pee)) is an extension to the Python programming language,
adding support for large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical 
functions to operate on these arrays.

Q5).What is Matplotlib?
matplotlib is a plotting library for the Python programming language and its numerical mathematics extension NumPy. 
It provides an object-oriented API for embedding plots into applications using general-purpose GUI toolkits like 
wxPython, Qt, or GTK+.


Q6).What can I import from NumPy?
Ans6: numpy is the top package name, and doing import numpy doesn’timport submodule numpy.f2py . … The link is established when
you do import numpy.f2py. In your above code: import numpy as np # np is an alias pointing tonumpy, but at this point numpy is 
not linked to numpy.f2py import numpy.

Q7).What is Scipy?
Ans7: SciPy (pronounced “Sigh Pie”) is open-source software for mathematics, science, and engineering. It is also the name of a
very popular conference on scientific programming with Python. The SciPy library depends on NumPy, which provides convenient 
and fast N-dimensional array manipulation.

Q8).What is plot ly?
Ans8: Plotly, also known by its URL, Plot.ly, is an online analytics and data visualization tool, headquartered in Montreal, 
Quebec.

Q9).What is PIP for Python?
Ans9: pip is a package management system used to install and manage software packages written in Python. Many packages can be 
found in the Python Package Index (PyPI). Python 2.7.9 and later (on the python2 series), and Python 3.4 and later include pip (pip3 for Python 3) by default.

Q10).What is Sympy?
Ans10: SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) 
while keeping the code as simple as possible in order to be comprehensible and easily extensible.


Important differences between Python 2.x and Python 3.x with examples
---------------------------------------------------------------------
Division operator
print function
Unicode
xrange
Error Handling
_future_ module

6. Python Override Method :-
--------------------------
A subclass may change the functionality of a Python method in the superclass. It does so by redefining it. This is termed 
python method overriding.

7. Python Method Overloading :-
------------------------------
Method Overloading in python is providing a facility that different versions of the method be able to be called. 

1. What is a Database?
A database is a collection of information in an organized form for faster and better access, storage and manipulation. It can also be defined as a collection of tables, schema, views and other database objects.

2. What is Database Testing?
It is AKA back-end testing or data testing.
Database testing involves in verifying the integrity of data in the front end with the data present in the back end. It validates the schema, database tables, columns, indexes, stored procedures, triggers, data duplication, orphan records, junk records. It involves in updating records in a database and verifying the same on the front end.

3. What is the difference between GUI Testing and Database Testing?

GUI Testing is AKA User Interface Testing or Front-end testing
Database Testing is AKA back-end testing or data testing.
GUI Testing deals with all the testable items that are open to the user to interaction such as Menus, Forms etc.
Database Testing deals with all the testable items that are generally hidden from the user.
The tester who is performing GUI Testing doesn’t need to know Structured Query Language
The tester who is performing Database Testing needs to know Structured Query Language
GUI Testing includes invalidating the text boxes, check boxes, buttons, drop-downs, forms etc., majorly the look and feel of the overall application
Database Testing involves in verifying the integrity of data in the front end with the data present in the back end. It validates the schema, database tables, columns, indexes, stored procedures, triggers, data duplication, orphan records, junk records. It involves in updating records in a database and verifying the same on the front end.
4. What is a Table in a Database?
A table is a database object used to store records in a field in the form of columns and rows that holds data.

5. What is a Field in a Database?
A field in a Database table is a space allocated to store a particular record within a table.

6. What is a Record in a Database?
A record (also called a row of data) is an ordered set of related data in a table.

7. What is a column in a Table?
A column is a vertical entity in a table that contains all information associated with a specific field in a table.

8. What is DBMS?
Database Management System is a collection of programs that enables a user to store, retrieve, update and delete information from a database.

9. What is RDBMS?
RDBMS stands for Relational Database Management System. RDBMS is a database management system (DBMS) that is based on the relational model. Data from relational database can be accessed using Structured Query Language (SQL)

10. What are the popular Database Management Systems in the IT Industry?
Oracle, MySQL, Microsoft SQL Server, PostgreSQL, Sybase, MongoDB, DB2, and Microsoft Access etc.,

11. What is SQL?
SQL Overview: SQL stands for Structured Query Language. It is an American National Standard Institute (ANSI) standard. It is a standard language for accessing and manipulating databases. Using SQL, some of the action we could do are to create databases, tables, stored procedures (SP’s), execute queries, retrieve, insert, update, delete data against a database.

12. What are the different types of SQL commands?
SQL commands are segregated into following types:


 
DDL – Data Definition Language
DML – Data Manipulation Language
DQL – Data Query Language
DCL – Data Control Language
TCL – Transaction Control Language
View Complete Post
13. What are the different DDL commands in SQL?
DDL commands are used to define or alter the structure of the database.

CREATE: To create databases and database objects
ALTER: To alter existing database objects
DROP: To drop databases and databases objects
TRUNCATE: To remove all records from a table but not its database structure
RENAME: To rename database objects
14. What are the different DML commands in SQL?
DML commands are used for managing data present in the database.

SELECT: To select specific data from a database
INSERT: To insert new records into a table
UPDATE: To update existing records
DELETE: To delete existing records from a table
15. What are the different DCL commands in SQL?
DCL commands are used to create roles, grant permission and control access to the database objects.

GRANT: To provide user access
DENY: To deny permissions to users
REVOKE: To remove user access
16. What are the different TCL commands in SQL?
TCL commands are used to manage the changes made by DML statements.

COMMIT: To write and store the changes to the database
ROLLBACK: To restore the database since the last commit
17. What is an Index?
An index is used to speed up the performance of queries. It makes faster retrieval of data from the table. The index can be created on one column or a group of columns.

18. What is a View?
A view is like a subset of a table which is stored logically in a database. A view is a virtual table. It contains rows and columns similar to a real table. The fields in the view are fields from one or more real tables. Views do not contain data of their own. They are used to restrict access to the database or to hide data complexity.


CREATE VIEW view_name AS SELECT column_name1, column_name2 FROM table_name WHERE CONDITION;
1
CREATE VIEW view_name AS SELECT column_name1, column_name2 FROM table_name WHERE CONDITION;
19. What are the advantages of Views?
Some of the advantages of Views are

Views occupy no space
Views are used to simply retrieve the results of complicated queries that need to be executed often.
Views are used to restrict access to the database or to hide data complexity.
20. What is a Subquery ? 
A Subquery is a SQL query within another query. It is a subset of a Select statement whose return values are used in filtering the conditions of the main query.

21. What is a temp table?
Ans. A temp table is a temporary storage structure to store the data temporarily.

22. How to avoid duplicate records in a query? 
The SQL SELECT DISTINCT query is used to return only unique values. It eliminates all the duplicated values.
View Detailed Post

23. What is the difference between Rename and Alias?
‘Rename’ is a permanent name given to a table or column
‘Alias’ is a temporary name given to a table or column.

24. What is a Join?
Join is a query, which retrieves related columns or rows from multiple tables.

25. What are the different types of joins?
Types of Joins are as follows:

INNER JOIN
LEFT JOIN
RIGHT JOIN
OUTER JOIN
View Complete Post
26. What is the difference between an inner and outer join?
An inner join returns rows when there is at least some matching data between two (or more) tables that are being compared.
An outer join returns rows from both tables that include the records that are unmatched from one or both the tables.

27. What are SQL constraints?
SQL constraints are the set of rules that enforced some restriction while inserting, deleting or updating of data in the databases.

28. What are the constraints available in SQL?
Some of the constraints in SQL are – Primary Key, Foreign Key, Unique Key, SQL Not Null, Default, Check and Index constraint.


 
29. What is a Unique constraint?
A unique constraint is used to ensure that there are no duplication values in the field/column.

30. What is a Primary Key?
A PRIMARY KEY constraint uniquely identifies each record in a database table. All columns participating in a primary key constraint must not contain NULL values.

31. Can a table contain multiple PRIMARY KEY’s?

The short answer is no, a table is not allowed to contain multiple primary keys but it allows to have one composite primary key consisting of two or more columns.

32. What is a Composite PRIMARY KEY?
Composite PRIMARY KEY is a primary key created on more than one column (combination of multiple fields) in a table.

33. What is a FOREIGN KEY?
A FOREIGN KEY is a key used to link two tables together. A FOREIGN KEY in a table is linked with the PRIMARY KEY of another table.

34. Can a table contain multiple FOREIGN KEY’s?
A table can have many FOREIGN KEY’s.

35. What is the difference between UNIQUE and PRIMARY KEY constraints?
There should be only one PRIMARY KEY in a table whereas there can be any number of UNIQUE Keys.
PRIMARY KEY doesn’t allow NULL values whereas Unique key allows NULL values.

36. What is a NULL value?
A field with a NULL value is a field with no value. A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation. Assume, there is a field in a table is optional and it is possible to insert a record without adding a value to the optional field then the field will be saved with a NULL value.

37. What is the difference between NULL value, Zero, and Blank space?
As I mentioned earlier, Null value is field with no value which is different from zero value and blank space.
Null value is a field with no value.
Zero is a number
Blank space is the value we provide. The ASCII value of space is CHAR(32).

38. How to Test for NULL Values?
A field with a NULL value is a field with no value. NULL value cannot be compared with other NULL values. Hence, It is not possible to test for NULL values with comparison operators, such as =, <, or <>. For this, we have to use the IS NULL and IS NOT NULL operators.


SELECT column_names FROM table_name WHERE column_name IS NULL;
1
SELECT column_names FROM table_name WHERE column_name IS NULL;

SELECT column_names FROM table_name WHERE column_name IS NOT NULL;
1
SELECT column_names FROM table_name WHERE column_name IS NOT NULL;
39. What is SQL NOT NULL constraint?
NOT NULL constraint is used to ensure that the value in the filed cannot be a NULL

40. What is a CHECK constraint?
A CHECK constraint is used to limit the value that is accepted by one or more columns.

E.g. ‘Age’ field should contain only the value greater than 18.


CREATE TABLE EMP_DETAILS(EmpID int NOT NULL, NAME VARCHAR (30) NOT NULL, Age INT CHECK (AGE &gt; 18), PRIMARY KEY (EmpID));
1
CREATE TABLE EMP_DETAILS(EmpID int NOT NULL, NAME VARCHAR (30) NOT NULL, Age INT CHECK (AGE &gt; 18), PRIMARY KEY (EmpID));
41. What is a DEFAULT constraint?
DEFAULT constraint is used to include a default value in a column when no value is supplied at the time of inserting a record.

42. What is Normalization?
Normalization is the process of table design to minimize the data redundancy. There are different types of Noramalization forms in SQL.

First Normal Form
Second Normal Form
Third Normal Form
Boyce and Codd Normal Form
43. What is Stored procedure?
A Stored Procedure is a collection of SQL statements that have been created and stored in the database to perform a particular task. The stored procedure accepts input parameters and processes them and returns a single value such as a number or text value or a result set (set of rows).

44. What is a Trigger?
A Trigger is a SQL procedure that initiates an action in response to an event (Insert, Delete or Update) occurs. When a new Employee is added to an Employee_Details table, new records will be created in the relevant tables such as Employee_Payroll, Employee_Time_Sheet etc.,

45. Explain SQL Data Types?
In SQL Server, each column in a database table has a name and a data type. We need to decide what type of data to store inside each and every column of a table while creating a SQL table.

View Detailed Post

46. What are the possible values that can be stored in a BOOLEAN data field?
TRUE and FALSE


 
47. What is the largest value that can be stored in a BYTE data field?
The largest number that can be represented in a single byte is 11111111 or 255. The number of possible values is 256 (i.e. 255 (the largest possible value) plus 1 (zero), or 28).

48. What are Operators available in SQL?
SQL Operator is a reserved word used primarily in an SQL statement’s WHERE clause to perform operations, such as arithmetic operations and comparisons. These are used to specify conditions in an SQL statement.

There are three types of Operators.

Arithmetic Operators
Comparison Operators
Logical Operators
View Detailed Post

49. Which TCP/IP port does SQL Server run?
By default it is 1433

50. List out the ACID properties and explain? 
Following are the four properties of ACID. These guarantees that the database transactions are processed reliably.

Atomicity
Consistency
Isolation
Durability

51. Define the SELECT INTO statement.
The SELECT INTO statement copies data from one table into a new table. The new table will be created with the column-names and types as defined in the old table. You can create new column names using the AS clause.


SELECT * INTO newtable FROM oldtable WHERE condition;
1
SELECT * INTO newtable FROM oldtable WHERE condition;
52. What is the difference between Delete, Truncate and Drop command?
The difference between the Delete, Truncate and Drop command is

Delete command is a DML command, it is used to delete rows from a table. It can be rolled back.
Truncate is a DDL command, it is used to delete all the rows from the table and free the space containing the table. It cant be rolled back.
Drop is a DDL command, it removes the complete data along with the table structure(unlike truncate command that removes only the rows). All the tables’ rows, indexes, and privileges will also be removed.
53. What is the difference between Delete and Truncate?
The difference between the Delete, and Truncate are

DELETE	TRUNCATE
Delete statement is used to delete rows from a table. It can be rolled back.	Truncate statement is used to delete all the rows from the table and free the space containing the table. It cant be rolled back.
We can use WHERE condition in DELETE statement and can delete required rows	We cant use WHERE condition in TRUNCATE statement. So we cant delete required rows alone
We can delete specific rows using DELETE	We can only delete all the rows at a time using TRUNCATE
Delete is a DML command	Truncate is a DDL command
Delete maintains log and performance is slower than Truncate	Truncate maintains minimal log and performance wise faster
We need DELETE permission on Table to use DELETE command	We need at least ALTER permission on the table to use TRUNCATE command
54. What is the difference between Union and Union All command?
This is one of the tricky SQL Interview Questions. Interviewer may ask you this question in another way as what are the advantages of Union All over Union.

Both Union and Union All concatenate the result of two tables but the way these two queries handle duplicates are different.

Union: It omits duplicate records and returns only distinct result set of two or more select statements.
Union All: It returns all the rows including duplicates in the result set of different select statements.

Performance wise Union All is faster than Union, Since Union All doesn’t remove duplicates. Union query checks the duplicate values which consumes some time to remove the duplicate records.

Assume: Table1 has 10 records, Table2 has 10 records. Last record from both the tables are same.

If you run Union query.


SELECT * FROM Table1
UNION
SELECT * FROM Table2
1
2
3
SELECT * FROM Table1
UNION
SELECT * FROM Table2
Output: Total 19 records

If you run Union query.


SELECT * FROM Table1
UNION ALL
SELECT * FROM Table2
1
2
3
SELECT * FROM Table1
UNION ALL
SELECT * FROM Table2
Output: Total 20 records

Data type of all the columns in the two tables should be same.

55. What is the difference between Having and Where clause?
Where clause is used to fetch data from a database that specifies particular criteria whereas a Having clause is used along with ‘GROUP BY’ to fetch data that meets particular criteria specified by the Aggregate functions. Where clause cannot be used with Aggregate functions, but the Having clause can.

56. What are aggregate functions in SQL?
SQL aggregate functions return a single value, calculated from values in a column. Some of the aggregate functions in SQL are as follows

AVG() – This function returns the average value
COUNT() – This function returns the number of rows
MAX() – This function returns the largest value
MIN() – This function returns the smallest value
ROUND() – This function rounds a numeric field to the number of decimals specified
SUM() – This function returns the sum
View Detailed Post


 
57. What are string functions in SQL?
SQL string functions are used primarily for string manipulation. Some of the widely used SQL string functions are

LEN() – It returns the length of the value in a text field
LOWER() – It converts character data to lower case
UPPER() – It converts character data to upper case
SUBSTRING() – It extracts characters from a text field
LTRIM() – It is to remove all whitespace from the beginning of the string
RTRIM() – It is to remove all whitespace at the end of the string
CONCAT() – Concatenate function combines multiple character strings together
REPLACE() –  To update the content of a string.
View Detailed Post

Practical SQL Interview Questions:
58. How to add new Employee details in an Employee_Details table with the following details
Employee_Name: John, Salary: 5500, Age: 29?


INSERT into Employee_Details (Employee_Name, Salary, Age) VALUES (‘John’, 5500 , 29);
1
INSERT into Employee_Details (Employee_Name, Salary, Age) VALUES (‘John’, 5500 , 29);
View Detailed Post

59. How to add a column ‘Salary’ to a table Employee_Details?


ALTER TABLE Employee_Details ADD (Salary);
1
ALTER TABLE Employee_Details ADD (Salary);
View Detailed Post

60. How to change a value of the field ‘Salary’ as 7500 for an Employee_Name ‘John’ in a table Employee_Details?


UPDATE Employee_Details set Salary = 7500 where Employee_Name = ‘John’;
1
UPDATE Employee_Details set Salary = 7500 where Employee_Name = ‘John’;
View Detailed Post

61. Write an SQL Query to select all records from the table?


Select * from table_name;
1
Select * from table_name;
View Detailed Post

62. How To Get List of All Tables From A DataBase?
To view the tables available on a particular DataBase


USE TestDB
GO
SELECT * FROM sys.Tables
GO
1
2
3
4
USE TestDB
GO
SELECT * FROM sys.Tables
GO
63. Define SQL Delete statement.
The SQL Delete statement is used to delete records from a table.


DELETE FROM table_name WHERE some_column=some_value;
1
DELETE FROM table_name WHERE some_column=some_value;
View Detailed Post

64. Write the command to remove all Players named Sachin from the Players table.


DELETE from Players WHERE Player_Name = ‘Sachin’
1
DELETE from Players WHERE Player_Name = ‘Sachin’
65. How to fetch values from TestTable1 that are not in TestTable2 without using NOT keyword?


--------------
| TestTable1 |
--------------
|     11     |
|     12     |
|     13     |
|     14     |
--------------
1
2
3
4
5
6
7
8
--------------
| TestTable1 |
--------------
|     11     |
|     12     |
|     13     |
|     14     |
--------------

--------------
| TestTable2 |
--------------
|     11     |
|     12     |
--------------
1
2
3
4
5
6
--------------
| TestTable2 |
--------------
|     11     |
|     12     |
--------------
By using the except keyword


SELECT * FROM TestTable1 EXCEPT SELECT * FROM TestTable2;
1
SELECT * FROM TestTable1 EXCEPT SELECT * FROM TestTable2;
66. How to get each name only once from an employee table?
By using the DISTINCT keyword, we could get each name only once.


SELECT DISTINCT employee_name FROM employee_table;
1
SELECT DISTINCT employee_name FROM employee_table;
67. How to rename a column in the output of SQL query?
By using SQL AS keyword


SELECT column_name AS new_name FROM table_name;
1
SELECT column_name AS new_name FROM table_name;
68. What is the order of SQL SELECT?
Order of SQL SELECT statement is as follows

SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY.

69. How to display the current date in SQL.
By using query


SELECT GetDate();
1
SELECT GetDate();
70. Write an SQL Query to find an Employee_Name whose Salary is equal or greater than 5000 from the below table Employee_Details.


|  Employee_Name   |  Salary|
-----------------------------
|  John            |  2500  |
|  Emma            |  3500  |
|  Mark            |  5500  |
|  Anne            |  6500  |
-----------------------------
1
2
3
4
5
6
7
|  Employee_Name   |  Salary|
-----------------------------
|  John            |  2500  |
|  Emma            |  3500  |
|  Mark            |  5500  |
|  Anne            |  6500  |
-----------------------------
Syntax:


SELECT Employee_Name FROM Employee_Details WHERE Salary>=5000;
1
SELECT Employee_Name FROM Employee_Details WHERE Salary>=5000;
Output:


|  Employee_Name   |  Salary|
-----------------------------
|  Mark            |  5500  |
|  Anne            |  6500  |
-----------------------------
1
2
3
4
5
|  Employee_Name   |  Salary|
-----------------------------
|  Mark            |  5500  |
|  Anne            |  6500  |
-----------------------------
71. Write an SQL Query to find list of Employee_Name start with ‘E’ from the below table

|  Employee_Name   |  Salary|
-----------------------------
|  John            |  2500  |
|  Emma            |  3500  |
|  Mark            |  5500  |
|  Anne            |  6500  |
-----------------------------
1
2
3
4
5
6
7
|  Employee_Name   |  Salary|
-----------------------------
|  John            |  2500  |
|  Emma            |  3500  |
|  Mark            |  5500  |
|  Anne            |  6500  |
-----------------------------
Syntax:

SELECT * FROM Employee_Details WHERE Employee_Name like 'E%';
1
SELECT * FROM Employee_Details WHERE Employee_Name like 'E%';
Output:

|  Employee_Name   |  Salary|
-----------------------------
|  Emma            |  3500  |
-----------------------------
1
2
3
4
|  Employee_Name   |  Salary|
-----------------------------
|  Emma            |  3500  |
-----------------------------
72. Write SQL SELECT query that returns the FirstName and LastName from Employee_Details table. 

SELECT FirstName, LastName FROM Employee_Details;
1
SELECT FirstName, LastName FROM Employee_Details;
73. How to rename a Table?

SP_RENAME TABLE 'SCOREBOARD', 'OVERALLSCORE'
1
SP_RENAME TABLE 'SCOREBOARD', 'OVERALLSCORE'
To rename Table Name & Column Name

sp_rename OldTableName,NewTableName
sp_rename 'TableName.OldColumnName', 'NewColumnName'
1
2
sp_rename OldTableName,NewTableName
sp_rename 'TableName.OldColumnName', 'NewColumnName'
74. How to select all the even number records from a table? 
To select all the even number records from a table:

Select * from table where id % 2 = 0 

1
2
Select * from table where id % 2 = 0 
 
75. How to select all the odd number records from a table? 
To select all the odd number records from a table:

Select * from table where id % 2 != 0
1
Select * from table where id % 2 != 0
76. What is the SQL CASE statement?
SQL Case statement allows embedding an if-else like clause in the SELECT statement.
77. Can you display the result from the below table TestTable based on the criteria M,m as M and F, f as F and Null as N and g, k, I as U


SELECT Gender from TestTable
1
SELECT Gender from TestTable

|  Gender  |
------------
|     M    |
|     F    |
|   NULL   |
|     m    |
|     f    | 
|     g    | 
|     H    | 
|     i    | 
------------
1
2
3
4
5
6
7
8
9
10
11
|  Gender  |
------------
|     M    |
|     F    |
|   NULL   |
|     m    |
|     f    | 
|     g    | 
|     H    | 
|     i    | 
------------
By using the below syntax we could achieve the output as required.


SELECT Gender,
case 
when Gender='i' then 'U' 
when Gender='g' then 'U'
when Gender='H' then 'U'
when Gender='NULL' then 'N'
else upper(Gender)
end as newgender from TestTable GROUP BY Gender
1
2
3
4
5
6
7
8
SELECT Gender,
case 
when Gender='i' then 'U' 
when Gender='g' then 'U'
when Gender='H' then 'U'
when Gender='NULL' then 'N'
else upper(Gender)
end as newgender from TestTable GROUP BY Gender
78. What will be the result of the query below? 


select case when null = null then 'True' else 'False' end as Result;
1
select case when null = null then 'True' else 'False' end as Result;
This query returns “False”. In the above question, we could see null = null is not the proper way to compare a null value. To compare a value with null, we use IS operator in SQL.

So the correct way is as follows


select case when null is null then 'True' else 'False' end as Result;
1
select case when null is null then 'True' else 'False' end as Result;
79. What will be the result of the query below? 


select case when null is null then 'Queries In SQL Server' else 'Queries In MySQL' end as Result;
1
select case when null is null then 'Queries In SQL Server' else 'Queries In MySQL' end as Result;
This query will returns “Queries In SQL Server”.

80. How do you update F as M and M as F from the below table TestTable? 


|  Name    |  Gender  |
------------------------
|  John    |     M    |
|  Emma    |     F    |
|  Mark    |     M    |
|  Anne    |     F    |
------------------------
1
2
3
4
5
6
7
|  Name    |  Gender  |
------------------------
|  John    |     M    |
|  Emma    |     F    |
|  Mark    |     M    |
|  Anne    |     F    |
------------------------
By using the below syntax we could achieve the output as required.


UPDATE TestTable SET Gender = CASE Gender WHEN 'F' THEN 'M' ELSE 'F' END
1
UPDATE TestTable SET Gender = CASE Gender WHEN 'F' THEN 'M' ELSE 'F' END
81. Describe SQL comments?
Single Line Comments: Single line comments start with two consecutive hyphens (–) and ended by the end of the line
Multi-Line Comments: Multi-line comments start with /* and end with */. Any text between /* and */ will be ignored.

82. How to get unique records from a table?
By using DISTINCT keyword.


SELECT DISTINCT Col1, Col2 from Table1
1
SELECT DISTINCT Col1, Col2 from Table1


Different Types of SQL JOINs
Here are the different types of the JOINs in SQL:

(INNER) JOIN: Returns records that have matching values in both tables
LEFT (OUTER) JOIN: Return all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Return all records from the right table, and the matched records from the left table
FULL (OUTER) JOIN: Return all records when there is a match in either left or right table.


What Is Linux :-
--------------
In the simple language Linux is an operating system (OS). We all are familiar with other operating systems like Microsoft 
windows, Apple Mac OS, iOS, Google android, etc, just like them linux is also an operating system.

An operating system is a software that enables communication between computer hardware and software. It conveys input to get 
processed by the processor and brings output to the hardware to display it. This is the basic function of an operating system. 
Although, it performs many other important tasks, let's not talk about that.

Linux is around us since mid 90s. It can be used from wristwatches to supercomputers. It is everywhere in our phones, laptops, 
PCs, cars and even in refrigerators.It is very much famous among the developers and normal computer users.

Structure Of Linux Operating System :-
-----------------------------------
An operating system is a collection of software, each designed for a specific function.

Linux OS has following components:

1) Kernel :-
---------
kernel is the core of the operating system. It establishes communication between devices and software. Moreover, it manages 
the system resources. Basically it has four responsibilities:

device management: A system has many devices connected to it like CPU, memory device, sound cards, graphic cards, etc. 
A kernel stores all the data related to all the devices in device driver (without this kernel won't be able to control the 
devices). Thus kernel knows what a device can do and how to manipulate it to bring out the best performance. It also manages 
communication between all the devices. Kernel has certain rules that has to be followed by all the devices.
Memory management: Another function that kernel has to manage is the memory management. Kernel keeps a track of used and 
unused memory and make sure that processes shouldn't manipulate data of each other using virtual memory address.
Process management: In process management kernel assign enough time and gives priorities to processes before handling CPU to 
other process. It also deals with security and ownership information.
Handling system calls: Handling system calls means a programmer can write a query or ask the kernel to perform a task.

2) System Libraries
System libraries are special programs that helps in accessing the kernel's features. A kernel has to be triggered to perform a 
task and this triggering is done by the applications. But applications must know how to place a system call because each kernel
has a different set of system calls. Programmers have developed standard library of procedures to communicate with kernel. 
Each operating system supports these standards and then these are transferred to system calls for that operating system.

Most well known system library for Linux is glibc (GNU C library).

3) System Tools

Linux OS has a set of utility tools which are usually simple commands. It is a software which GNU project has written and 
publish under their open source license so that software is freely available to everyone.

With the help of commands you can access your files, edit and manipulate data in your directories or files, change location of 
files or anything.

4) Development Tools
With the above three components your OS is running and working. But to update your system you have additional tools and 
libraries. These additional tools and libraries are written by the programmers and are called tool chain. A tool chain is a 
vital development tool used by the developers to produce a working application.

5) End User Tools
These end tools make a system unique for a user. End tools are not required for the operating system but are necessary for a 
user.

Some examples of end tools are graphic design tools, office suites, browsers, multimedia players, etc.

Open Source Operating System

Most OS come in a compiled format means the main source code has run through a program called compiler that translates the 
source code into a language which is known to the computer.

Modifying this compiled code is really a tough job.

On the other hand, open source is completely different. The source code is included with the compiled version and allows 
modification by anyone having some knowledge. It gives us freedom to run the program, freedom to change the code according to 
our use, freedom to redistribute its copies and freedom to distribute copies which are modified by us.

In short, Linux is an operating system that is "for the people, by the people"


Linux Features :-
--------------
Multiuser capability: Multiple users can access the same system resources like memory, hard disk, etc. But they have to use 
different terminals to operate.
Multitasking: More than one function can be performed simultaneously by dividing the CPU time intelligently.
Portability: Portability doesn't mean it is smaller in file size or can be carried in pen drives or memory cards. It means 
that it support different types of hardware.
Security: It provides security in three ways namely authenticating (by assigning password and login ID), authorization 
(by assigning permission to read, write and execute) and encryption (converts file into an unreadable format).
Live CD/USB: Almost all Linux distros provide live CD/USB so that users can run/try it without installing it.
Graphical User Interface (X Window system): Linux is command line based OS but it can be converted to GUI based by installing 
packages.
Support's customized keyboard: As it is used worldwide, hence supports different languages keyboards.
Application support: It has its own software repository from where users can download and install many applications.
File System: Provides hierarchical file system in which files and directories are arranged.
Open Source: Linux code is freely available to all and is a community based development project.


Linux Directories :-
-----------------
What are Commands :-
-----------------
A command is an instruction given to our computer by us to do whatever we want. In Mac OS, and Linux it is called terminal, 
whereas, in windows it is called command prompt. Commands are always case sensitive.

Commands are executed by typing in at the command line followed by pressing enter key.

This command further passes to the shell which reads the command and execute it. Shell is a method for the user to interact 
with the system. Default shell in Linux is called bash (Bourne-Again Shell).

There are two types of shell commands:

Built-in shell commands: They are part of a shell. Each shell has some built in commands.
External/Linux commands: Each external command is a separate executable program written in C or other programming languages.
Linux Directory Commands
Directory Command	Description
pwd	The pwd command stands for (print working directory). It displays the current working location or directory of the user. 
It displays the whole working path starting with /. It is a built-in command.
ls	The ls command is used to show the list of a folder. It will list out all the files in the directed folder.
cd	The cd command stands for (change directory). It is used to change to the directory you want to work from the present 
directory.
mkdir	With mkdir command you can create your own directory.
rmdir	The rmdir command is used to remove a directory from your system.




Pandas:-
------

Pandas is an open-source, BSD-licensed Python library providing high-performance, easy-to-use data structures and data 
analysis tools for the Python programming language. Python with Pandas is used in a wide range of fields including academic 
and commercial domains including finance, economics, Statistics, analytics, etc.

Key Features of Pandas :-
----------------------
Fast and efficient DataFrame object with default and customized indexing.
Tools for loading data into in-memory data objects from different file formats.
Data alignment and integrated handling of missing data.
Reshaping and pivoting of date sets.
Label-based slicing, indexing and subsetting of large data sets.
Columns from a data structure can be deleted or inserted.
Group by data for aggregation and transformations.
High performance merging and joining of data.
Time Series functionality.


Use of decorator :-
----------------
Decorators provide a simple syntax for calling higher-order functions. By definition, a decorator is a function that takes 
another function and extends the behavior of the latter function without explicitly modifying it.

what is the difference between iterator and generator in python :-
---------------------------------------------------------------
A Python Generator function lends us a sequence of values to python iterate on and a Python iterator returns us an iterator 
object- one value at a time.

Lets discuss the comparison in Detail:

While creating a Python Generator, we use function. But to create an iterator in Python we use iter() and next() functions.
A generator use ‘yield’ keyword which Python iterator doesn't.
Python Generator saves the state of local variable every time yield pauses the loop in python. Iterator dose not use local 
variables. It just needs iterable to iterate on.
A generator can have any number of ‘yield’ statement.
You cam implement your own iterator using python class. A generator does not need a class.
You can either use a Python function or a comprehension to write Python Generator. For iterator you have to use iter() and 
next() functions.
We can write fast and compact code with Python Generator. This is an advantage over python iterators. They are also simpler to 
code than iterators.
Python iterator is more memory efficient. See how
>>> def func():
 i=1 
 while i>0: 
 yield i 
 i-=1 
>>> for i in func(): 
 print(i)
1

>>> func().__sizeof__()
32

Here, we got 32. But for a python iterator, we get 16.

16

9. A generator returns a generator, but an iterator returns an iterator object.

>>> f=func() 
>>> type(f)
<class ‘generator’>

iterator returns an iterator object

>>> i=iter({1,3,2})
>>> type(i)
<class ‘set_iterator’>

10. Python Generators provide more functionality as co-routines.


Python Programming Exercises 7:-
------------------------------

1. In previous exercise sets we used specific modules, for example, random to generate random numbers, math to access mathematical
functions and sys for system variables. To access the contents of a module we use the import keyword. For example:

>>> import math

Modules in the standard library have a top-level help page to give you an overview of the contents of the module (remember, press
’q’ to exit the help pages):
>>> help(math)
Or you can access the help page of a specific variable or function:
>>> help(math.sqrt)
In Python3 you can also see what is in a module by typing the name of the module, a dot and pressing tab twice.
>>> math.

2. Instead of importing an entire module, we can import a single function or variable using the from keyword, for example:
>>> from math import sqrt
>>> sqrt(9)
3.0

This can be useful if we know we are going to use the function alot and want our code to look neater. The downside is that we
cannot have a function called, for example, sqrt() in our own code.

3. Sometimes modules change names from one version to another or have long names that we want to avoid typing all the time.
Instead of using from we can rename the module using as.
For example, the English do not use the word math, but use the far more pleasing, maths. If I wanted to change that in my code I
could do this:

>>> import math as maths
>>> maths.sqrt(9)
3.0

This only works with modules however, not the functions inside a module (because they are not modules, they are functions):
>>> import math.sqrt as squareroot
Traceback (most recent call last):
File "<frozen importlib._bootstrap>", line 2218, in _find_and_load_unlocked
AttributeError: ’module’ object has no attribute ’__path__’
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
ImportError: No module named ’math.sqrt’; ’math’ is not a package


Instead we use a combination of the from keyword and the as keyword to rename functions or variables:
>>> from math import sqrt as squareroot
>>> squareroot(9)
3.0

4. time module: if you want to time something, get the current date or pause the execution of your script, then you can use the time
module.
time.time() returns the current time in seconds since the epoch (the epoch is defined as Thursday 1st January 1970
https://en.wikipedia.org/wiki/Unix_time):
>>> import time
>>> time.time()
1427791906.13485
time.ctime(s) converts a time, s, measured in seconds past the epoch into a human-readable string. If you do not provide an
argument, then it returns the current date and time:
>>> current_time = time.time()
>>> time.ctime(current_time)
’Tue Mar 31 11:55:39 2015’
>>> time.ctime()
’Tue Mar 31 11:55:51 2015’
time.sleep(s) waits for at least s seconds and then returns:
>>> time.sleep(3)
>>> time.sleep(0.5)

5. glob module: despite the strange name, the glob module is immensely useful for processing large numbers of files. It takes a
single string argument that you use to specify a pattern to match files. Patterns are strings that map to file names. For example, in
a useless example we can find all files called “file.py” in the current directory:
3
>>> import glob
>>> glob.glob("file.py")
We never want to get a list of all files with a specific file name (such a list would be zero or one items long, so we may as well
just use an if statement). To match all files in the current directory, we can use the asterisks character to mean “match any thing”.
>>> glob.glob("*")
To match a subset of files we can use the asterisks to match parts of file names. For example, to match all .py files:
>>> glob.glob("*.py")
Play around with this to ensure you understand how the asterisks works

6. random module: in a previous set of exercises we used random.randint(a, b) to generate random integers between a and
b, inclusive:
>>> import random
>>> random.randint(1, 10)
random.random() generates a real-valued random number in the interval [0, 1):
>>> random.random()
random.shuffle(list) permutes the list into a random ordering in place, i.e. it does not return a permuted copy of the
original list:
>>> x = [1,2,3,4,5]
>>> random.shuffle(x)
>>> print(x)

random.sample(list, k) randomly selects k elements from list (k cannot exceed len(list)) and returns a new list containing
those elements:
>>> x = [1,2,3,4,5]
>>> random.sample(x, 2)
[5, 1]
7. collections module: lists and dictionaries are the work-horses of all Python scripts, but the collections module contains additional
data structures that can make your programs cleaner and easier to understand.
If we are counting the number of times something occurs, a dictionary with the counts as values is a natural choice:
1 counts = {}
2 for i in "llanfairpwllgwyngyll": # Llanfairpwllgwyngyll is a village in Wales, if you were wondering...
3 if i not in counts :
4 counts[i] = 0
5 counts[i] += 1
6
7 print(counts)
Lines 3 and 4 are necessary because we cannot index the dictionary, counts, on line 5 with the key without having first initialised
its associated value to zero. Instead, we can use collections.Counter:

import collections
counts = collections.Counter()
for i in "llanfairpwllgwyngyll":
counts[i] += 1
print(counts)

A similar data structure is collections.defaultdict which needs to be initialised with an argument stating what the default value of
a key is. Here is the same example using collections.defaultdict:
import collections
counts = collections.defaultdict(int)
for i in "llanfairpwllgwyngyll":
counts[i] += 1
print(counts)
defaultdict is more general than Counter and we can, for example, set the default value to be an empty list. Here I have used
defaultdict to reimplement the answer to question 14 from exercise set 4 (invert a dictionary):
import collections
def invert_dict(d) :os.path.exists(f) return True if f exists (does not check kind of file)
os.path.samefile(f1, f2) returns True if f1 and f2 refer to the same file
os.path.abspath(p) returns the absolute (i.e. complete) file path for the relative path p

tmp = collections.defaultdict(list)
for k in d :
tmp[d[k]].append(k)
return dict(tmp) # this just converts defaultdict to dict
d = invert_dict({"key1": "value1", "key2": "value2", "key3": "value1"})
print(d)

8. os.path module: in the last set of exercises we saw how opening a non-existent file can throw a FileNotFoundError, but we could
have checked ahead of time using functions in the os.path module:
import os.path
import sys
filename = "file.py" # <--- change these
directory = "python_files" # <--- change these
if not os.path.isdir(directory) :
print("Error: directory {} does not exist!".format(directory))
sys.exit(1)
fullpath = os.path.join(directory, filename)
if not os.path.isdir(fullpath) :
print("Error: file {} does not exist!".format(fullpath))
sys.exit(1)
These functions (and a few other useful ones) have the following properties:
os.path.isdir(d) returns True if d exists and d is a directory
os.path.isfile(f) returns True if f exists and f is a file
os.path.join(· · ·) returns a path joining together all arguments using the special directory path separator for the current operating
system (i.e. Windows=’\’, UNIX=’/’)
os.path.exists(f) return True if f exists (does not check kind of file)
os.path.samefile(f1, f2) returns True if f1 and f2 refer to the same file
os.path.abspath(p) returns the absolute (i.e. complete) file path for the relative path p

9. urllib.request module: webpages are just files that are accessible from a remote server. urllib.request provides the
function urlopen(url) that will provide a file-like object for us to read the data in url. This is especially useful for REST APIs
like the one used by Ensembl:
from urllib.request import urlopen
url = "http://rest.ensembl.org/sequence/id/ENST00000283243?content-type=text/x-fasta;type=protein"
f = urlopen(url)
for line in f :
print(line.decode(’utf-8’), end="")
f.close()

10. getopt module: the getopt module provides a function called getopt(args, argstr) that can be used to easily create a clean
command line interface for your script.
getopt(args, shortopts) takes two arguments: args, a list of arguments from the command line (excluding the program name,
i.e. sys.argv[1:]) and shortopts, a string describing what flags are to be accepted. If you want to accept just a single flag, for
example -a, then the shortopts is “a”. If the flag -a takes an argument, then you need to append a colon to indicate this in
shortopts (“a:”). This string can contain as many flags as necessary, in any order. For example, to accept the flags -a, -b and
-c with -a and -c accepting arguments, the string would be “a:bc:”.

Here is a complete example that you can alter for use in your projects:
import getopt
import sys
def usage() :
print("Usage: {} [-h] [-v] [-x ARGUMENT]".format(sys.argv[0]))
verbose = False
x_argument = None
try :
opts,args = getopt.getopt(sys.argv[1:], "hvx:")
except getopt.GetoptError as goe :
print(goe)
usage()
sys.exit(1)
for o,a in opts :
if o == ’-v’ :
verbose = True
elif o == ’-h’ :
usage()
sys.exit(0)
elif o == ’-x’ :
x_argument = a
else :
print("Error: unhandled option ({})".format(o))
sys.exit(1)
print("verbose = {}\nx_argument = {}".format(verbose, x_argument))

If you copy-paste this script into a file (that I will call “cli.py” in these examples) the arguments -h (print script usage information),
-v (set a variable called verbose to True) and -x ARGUMENT (set a variable called x argument to the value given as
ARGUMENT) can be given in any order:
python3 cli.py -h
python3 cli.py -v -x HELLO
python3 cli.py -x 123 -v
python3 cli.py -x ABC

Pandas :-
-------

                    
				############ PANDAS #########
			    =============================
               Python Pandas Tutorial
	           ======================
    
 Pandas is an open-source, BSD-licensed Python library providing high-performance, easy-to-use data structures and
 data analysis tools for the Python programming language. Python with Pandas is used in a wide range of fields including
 academic and commercial domains including finance, economics, Statistics, analytics, etc.In this tutorial, we will learn
 the various features of Python Pandas and how to use them in practice.

Audience:
--------
    This tutorial has been prepared for those who seek to learn the basics and various functions of Pandas. 
	It will be specifically useful for people working with data cleansing and analysis. After completing this tutorial, 
	you will find yourself at a moderate level of expertise from where you can take yourself to higher levels of expertise.

Prerequisites:
-------------
    You should have a basic understanding of Computer Programming terminologies. A basic understanding of any of the
	programming languages is a plus. Pandas library uses most of the functionalities of NumPy. 
	It is suggested that you go through our tutorial on NumPy before proceeding with this tutorial. 
	You can access it from − NumPy Tutorial.

=>  Python Pandas - Introduction:-
    ============================
 
    Pandas is an open-source Python Library providing high-performance data manipulation and analysis tool using its powerful
	data structures. The name Pandas is derived from the word Panel Data – an Econometrics from Multidimensional data.

    In 2008, developer Wes McKinney started developing pandas when in need of high performance, flexible tool for analysis 
	of data.

    Prior to Pandas, Python was majorly used for data munging and preparation. It had very little contribution towards 
	data analysis. Pandas solved this problem. Using Pandas, we can accomplish five typical steps in the processing and 
	analysis of data, regardless of the origin of data — load, prepare, manipulate, model, and analyze.

    Python with Pandas is used in a wide range of fields including academic and commercial domains including finance, 
	economics, Statistics, analytics, etc.

Key Features of Pandas:-
----------------------
    > Fast and efficient DataFrame object with default and customized indexing.
    > Tools for loading data into in-memory data objects from different file formats.
    > Data alignment and integrated handling of missing data.
    > Reshaping and pivoting of date sets.
    > Label-based slicing, indexing and subsetting of large data sets.
    > Columns from a data structure can be deleted or inserted.
    > Group by data for aggregation and transformations.
    > High performance merging and joining of data.
    > Time Series functionality.

=> Python Pandas - Environment Setup:-
   ================================
  
       Standard Python distribution doesn't come bundled with Pandas module. A lightweight alternative is to install 
	   NumPy using popular Python package installer, pip.

     > pip install pandas
      
	  If you install Anaconda Python package, Pandas will be installed by default with the following −

     Window:
	 -------
     1.Anaconda: is a free Python distribution for SciPy stack. It is also available for Linux and Mac.
     2.Canopy:  is available as free as well as commercial distribution with full SciPy stack for Windows, Linux and Mac.
     3.Python (x,y): is a free Python distribution with SciPy stack and Spyder IDE for Windows OS.

     Linux:
	 -----
     Package managers of respective Linux distributions are used to install one or more packages in SciPy stack.

     //For Ubuntu Users:

	     sudo apt-get install python-numpy python-scipy python-matplotlibipythonipythonnotebook
         python-pandas python-sympy python-nose
     
	 //For Fedora Users:

         sudo yum install numpyscipy python-matplotlibipython python-pandas sympy
         python-nose atlas-devel
	
=> Introduction to Data Structures:-
   ===============================
 
Pandas deals with the following three data structures −

     Series
     DataFrame
     Panel
         These data structures are built on top of Numpy array, which means they are fast.

Dimension & Description:

      The best way to think of these data structures is that the higher dimensional data structure is a container of its 
	  lower dimensional data structure. For example, DataFrame is a container of Series, Panel is a container of DataFrame.

            Data Structure			Dimensions	              Description
			-------------           ----------                -----------
              Series	                1	             1D labeled homogeneous array, sizeimmutable.
              Data Frames	            2	             General 2D labeled, size-mutable tabular structure with potentially heterogeneously typed columns.
              Panel	                    3	             General 3D labeled, size-mutable array.
			  
     Building and handling two or more dimensional arrays is a tedious task, burden is placed on the user to consider the 
     orientation of the data set when writing functions. But using Pandas data structures, the mental effort of the user 
     is reduced.

     For example, with tabular data (DataFrame) it is more semantically helpful to think of the index (the rows) and 
	 the columns rather than axis 0 and axis 1.

Mutability:
----------
     All Pandas data structures are value mutable (can be changed) and except Series all are size mutable. Series is size 
	 immutable.

     Note: − DataFrame is widely used and one of the most important data structures. Panel is used much less.

Series:
------
     Series is a one-dimensional array like structure with homogeneous data. For example, the following series is a
	 collection of integers 10, 23, 56, …................

             10	23	56	17	52	61	73	90	26	72
Key Points:
----------
     > Homogeneous data
     > Size Immutable
     > Values of Data Mutable
     > DataFrame
     > DataFrame is a two-dimensional array with heterogeneous data. For example,

     Name	    Age	     Gender	     Rating
	 ----      ----      ------      ------
     Steve	    32	      Male	      3.45
     Lia	    28	      Female	  4.6
     Vin	    45	      Male	      3.9
     Katie	    38	      Female	  2.78
	 
     The table represents the data of a sales team of an organization with their overall performance rating. 
     The data is represented in rows and columns. Each column represents an attribute and each row represents a person.

Data Type of Columns:
--------------------
The data types of the four columns are as follows −

          Column    	Type
		  ------        ----
           Name	      String
           Age	      Integer
           Gender	  String
           Rating	  Float
     Key Points:
	 
         Heterogeneous data
         Size Mutable
         Data Mutable
Panel:-
------
     Panel is a three-dimensional data structure with heterogeneous data. It is hard to represent the panel in graphical 
	 representation. But a panel can be illustrated as a container of Data Frame.

     Key Points:
	 
          Heterogeneous data
          Size Mutable
          Data Mutable
		  
=> Python Pandas - Series:-
   =======================
  
     Series is a one-dimensional labeled array capable of holding data of any type (integer, string, float, python objects,
	 etc.). The axis labels are collectively called index.

pandas.Series:
-------------
      A pandas Series can be created using the following constructor −

      pandas.Series( data, index, dtype, copy)
    The parameters of the constructor are as follows −

        S.No	Parameter & Description
		----    -----------------------
         1	     data 
                 data takes various forms like ndarray, list, constants

         2	     index
                 Index values must be unique and hashable, same length as data. Default np.arrange(n) if no index is passed.
         
		 3	     dtype
                 dtype is for data type. If None, data type will be inferred

         4	     copy
                 Copy data. Default False

    A series can be created using various inputs like −

        . Array
        . Dict
        . Scalar value or constant
        . Create an Empty Series
     
	 A basic series, which can be created is an Empty Series.

Example
        #import the pandas library and aliasing as pd
        import pandas as pd
        s = pd.Series()
        print s
Its output is as follows −

        Series([], dtype: float64)

Create a Series from ndarray:
----------------------------

        If data is an ndarray, then index passed must be of the same length. If no index is passed, then by default 
		index will be range(n) where n is array length, i.e., [0,1,2,3…. range(len(array))-1].

Example 1
       #import the pandas library and aliasing as pd
       import pandas as pd 
       import numpy as np
       data = np.array(['a','b','c','d'])
       s = pd.Series(data)
       print s
Its output is as follows −

0   a
1   b
2   c
3   d
dtype: object
We did not pass any index, so by default, it assigned the indexes ranging from 0 to len(data)-1, i.e., 0 to 3.

Example 2
    #import the pandas library and aliasing as pd
    import pandas as pd
    import numpy as np
    data = np.array(['a','b','c','d'])
    s = pd.Series(data,index=[100,101,102,103])
    print s
Its output is as follows −

100  a
101  b
102  c
103  d
dtype: object
We passed the index values here. Now we can see the customized indexed values in the output.

Create a Series from dict:
-------------------------

A dict can be passed as input and if no index is specified, then the dictionary keys are taken in a sorted order to construct index. If index is passed, the values in data corresponding to the labels in the index will be pulled out.

Example 1
    #import the pandas library and aliasing as pd
    import pandas as pd
    import numpy as np
    data = {'a' : 0., 'b' : 1., 'c' : 2.}
    s = pd.Series(data)
    print s
Its output is as follows −

a 0.0
b 1.0
c 2.0
dtype: float64
Observe − Dictionary keys are used to construct index.

Example 2
    #import the pandas library and aliasing as pd
    import pandas as pd
    import numpy as np
    data = {'a' : 0., 'b' : 1., 'c' : 2.}
    s = pd.Series(data,index=['b','c','d','a'])
    print s
Its output is as follows −

b 1.0
c 2.0
d NaN
a 0.0
dtype: float64
Observe − Index order is persisted and the missing element is filled with NaN (Not a Number).

Create a Series from Scalar:
----------------------------

If data is a scalar value, an index must be provided. The value will be repeated to match the length of index

      #import the pandas library and aliasing as pd
      import pandas as pd
      import numpy as np
      s = pd.Series(5, index=[0, 1, 2, 3])
      print s
Its output is as follows −

0  5
1  5
2  5
3  5
dtype: int64
Accessing Data from Series with Position
Data in the series can be accessed similar to that in an ndarray.

Example 1
     Retrieve the first element. As we already know, the counting starts from zero for the array, which means the first 
	 element is stored at zeroth position and so on.

     import pandas as pd
     s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

     #retrieve the first element
     print s[0]
Its output is as follows −

    1
Example 2
      Retrieve the first three elements in the Series. If a : is inserted in front of it, all items from that 
	  index onwards will be extracted. If two parameters (with : between them) is used, 
	  items between the two indexes (not including the stop index)

      import pandas as pd
      s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

      #retrieve the first three element
      print s[:3]
Its output is as follows −

a  1
b  2
c  3
dtype: int64

Example 3:

     Retrieve the last three elements.

     import pandas as pd
     s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

     #retrieve the last three element
     print s[-3:]
Its output is as follows −

c  3
d  4
e  5
dtype: int64

Retrieve Data Using Label (Index):-
---------------------------------
       
	   A Series is like a fixed-size dict in that you can get and set values by index label.

Example 1:

     Retrieve a single element using index label value.

        import pandas as pd 
        s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

        #retrieve a single element
        print s['a']
Its output is as follows −

    1
Example 2:

      Retrieve multiple elements using a list of index label values.

        import pandas as pd
        s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

        #retrieve multiple elements
        print s[['a','c','d']]
Its output is as follows −

a  1
c  3
d  4
dtype: int64

Example 3:

      If a label is not contained, an exception is raised.

     import pandas as pd
     s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

     #retrieve multiple elements
     print s['f']
Its output is as follows −

…
     KeyError: 'f'
	 

=> Python Pandas - DataFrame:-
   =========================
  
A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns.

Features of DataFrame
---------------------
>Potentially columns are of different types
>Size – Mutable
>Labeled axes (rows and columns)
>Can Perform Arithmetic operations on rows and columns
Structure:
--------

Let us assume that we are creating a data frame with student’s data.

   rows, colums  is called structure.
pandas.DataFrame:-
-----------------
A pandas DataFrame can be created using the following constructor −

pandas.DataFrame( data, index, columns, dtype, copy)
      The parameters of the constructor are as follows −

S.No	Parameter & Description
----    -----------------------
1	     data
         data takes various forms like ndarray, series, map, lists, dict, constants and also another DataFrame.

2	     index
         For the row labels, the Index to be used for the resulting frame is Optional Default np.arrange(n) if no 
		 index is passed.

3	     columns
         For column labels, the optional default syntax is - np.arrange(n). This is only true if no index is passed.

4	     dtype
         Data type of each column.

4	     copy
         This command (or whatever it is) is used for copying of data, if the default is False.

Create DataFrame:
-----------------
A pandas DataFrame can be created using various inputs like −

>Lists
>dict
>Series
>Numpy ndarrays
>Another DataFrame

  In the subsequent sections of this chapter, we will see how to create a DataFrame using these inputs.

Create an Empty DataFrame:
-------------------------
A basic DataFrame, which can be created is an Empty Dataframe.

Example:

     #import the pandas library and aliasing as pd
     import pandas as pd
     df = pd.DataFrame()
     print df
  Its output is as follows −

    Empty DataFrame
    Columns: []
    Index: []
Create a DataFrame from Lists:
-----------------------------
The DataFrame can be created using a single list or a list of lists.

Example 1:
---------

     import pandas as pd
     data = [1,2,3,4,5]
     df = pd.DataFrame(data)
     print df
  Its output is as follows −

          0
     0    1
     1    2
     2    3
     3    4
     4    5
Example 2:
--------
    import pandas as pd
    data = [['Alex',10],['Bob',12],['Clarke',13]]
    df = pd.DataFrame(data,columns=['Name','Age'])
    print df
  Its output is as follows −

      Name      Age
0     Alex      10
1     Bob       12
2     Clarke    13

Example 3:
---------
import pandas as pd
data = [['Alex',10],['Bob',12],['Clarke',13]]
df = pd.DataFrame(data,columns=['Name','Age'],dtype=float)
print df
Its output is as follows −

      Name     Age
0     Alex     10.0
1     Bob      12.0
2     Clarke   13.0
     Note − Observe, the dtype parameter changes the type of Age column to floating point.
     ----
Create a DataFrame from Dict of ndarrays / Lists:
------------------------------------------------
       All the ndarrays must be of same length. If index is passed, then the length of the index should equal to the 
       length of the arrays.

     If no index is passed, then by default, index will be range(n), where n is the array length.

Example 1:
---------
     import pandas as pd
     data = {'Name':['Tom', 'Jack', 'Steve', 'Ricky'],'Age':[28,34,29,42]}
     df = pd.DataFrame(data)
     print df
Its output is as follows −

      Age      Name
0     28        Tom
1     34       Jack
2     29      Steve
3     42      Ricky
   Note :− Observe the values 0,1,2,3. They are the default index assigned to each using the function range(n).
   ----
Example 2:
---------
Let us now create an indexed DataFrame using arrays.

   import pandas as pd
   data = {'Name':['Tom', 'Jack', 'Steve', 'Ricky'],'Age':[28,34,29,42]}
   df = pd.DataFrame(data, index=['rank1','rank2','rank3','rank4'])
   print df
 Its output is as follows −

         Age    Name
rank1    28      Tom
rank2    34     Jack
rank3    29    Steve
rank4    42    Ricky

   Note − Observe, the index parameter assigns an index to each row.
   ----
Create a DataFrame from List of Dicts:
-------------------------------------
   List of Dictionaries can be passed as input data to create a DataFrame. The dictionary keys are by default 
   taken as column names.

Example 1:
---------
   The following example shows how to create a DataFrame by passing a list of dictionaries.

import pandas as pd
data = [{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]
df = pd.DataFrame(data)
print df

Its output is as follows −
    ------
    a    b      c
0   1   2     NaN
1   5   10   20.0
Note − Observe, NaN (Not a Number) is appended in missing areas.

Example 2:
---------
The following example shows how to create a DataFrame by passing a list of dictionaries and the row indices.

import pandas as pd
data = [{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]
df = pd.DataFrame(data, index=['first', 'second'])
print df

Its output is as follows −
    ------
        a   b       c
first   1   2     NaN
second  5   10   20.0

Example 3:
---------
     The following example shows how to create a DataFrame with a list of dictionaries, row indices, and column indices.

     import pandas as pd
     data = [{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]
     #With two column indices, values same as dictionary keys
     df1 = pd.DataFrame(data, index=['first', 'second'], columns=['a', 'b'])
     #With two column indices with one index with other name
     df2 = pd.DataFrame(data, index=['first', 'second'], columns=['a', 'b1'])
     print df1
     print df2

Its output is as follows :−
    ------

#df1 output
         a  b
first    1  2
second   5  10

#df2 output
         a  b1
first    1  NaN
second   5  NaN
 
 Note :− Observe, df2 DataFrame is created with a column index other than the dictionary key; thus, appended 
 -----   the NaN’s in place. Whereas, df1 is created with column indices same as dictionary keys, so NaN’s appended.
 
Create a DataFrame from Dict of Series:-
--------------------------------------
       Dictionary of Series can be passed to form a DataFrame. The resultant index is the union of all the series 
	   indexes passed.

Example:
-------
     import pandas as pd

     d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']),
          'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

     df = pd.DataFrame(d)
     print df
Its output is as follows −
    ------
      one    two
a     1.0    1
b     2.0    2
c     3.0    3
d     NaN    4

  Note − Observe, for the series one, there is no label ‘d’ passed, but in the result, for the d label, 
  ----        NaN is appended with NaN.
  
  Let us now understand column selection, addition, and deletion through examples.

- Column Selection:
  ---------------
We will understand this by selecting a column from the DataFrame.

Example:
-------
     import pandas as pd
     d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']),
          'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
     df = pd.DataFrame(d)
     print df ['one']
	 
Its output is as follows −
    ------

a     1.0
b     2.0
c     3.0
d     NaN

Name: o ne, dtype: float64

- Column Addition:
  ---------------
We will understand this by adding a new column to an existing data frame.

Example:

     import pandas as pd
     d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']),
           'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
     df = pd.DataFrame(d)
     # Adding a new column to an existing DataFrame object with column label by passing new series
     print ("Adding a new column by passing as Series:")
     df['three']=pd.Series([10,20,30],index=['a','b','c'])
     print df
     print ("Adding a new column using the existing columns in DataFrame:")
     df['four']=df['one']+df['three']
     print df
Its output is as follows −

Adding a new column by passing as Series:
     one   two   three
a    1.0    1    10.0
b    2.0    2    20.0
c    3.0    3    30.0
d    NaN    4    NaN

Adding a new column using the existing columns in DataFrame:
      one   two   three    four
a     1.0    1    10.0     11.0
b     2.0    2    20.0     22.0
c     3.0    3    30.0     33.0
d     NaN    4     NaN     NaN
 
- Column Deletion:
  ---------------
   Columns can be deleted or popped; let us take an example to understand how.

Example:

# Using the previous DataFrame, we will delete a column
# using del function
import pandas as pd

d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
     'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd']), 
     'three' : pd.Series([10,20,30], index=['a','b','c'])}

df = pd.DataFrame(d)
print ("Our dataframe is:")
print df

# using del function
print ("Deleting the first column using DEL function:")
del df['one']
print df

# using pop function
print ("Deleting another column using POP function:")
df.pop('two')
print df

Its output is as follows −
    ------
Our dataframe is:
      one   three  two
 a     1.0    10.0   1
b     2.0    20.0   2
c     3.0    30.0   3
d     NaN     NaN   4

Deleting the first column using DEL function:
      three    two
a     10.0     1
b     20.0     2
c     30.0     3
d     NaN      4

Deleting another column using POP function:
   three
a  10.0
b  20.0
c  30.0
d  NaN

Row Selection, Addition, and Deletion:
--------------------------------------

      We will now understand row selection, addition and deletion through examples. 
	  Let us begin with the concept of selection.

- Selection by Label:
  ------------------
Rows can be selected by passing row label to a loc function.

import pandas as pd

d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
     'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

df = pd.DataFrame(d)
print df.loc['b']

Its output is as follows −
    ------
one 2.0
two 2.0
Name: b, dtype: float64
      The result is a series with labels as column names of the DataFrame. And, the Name of the series is the label with which it is retrieved.

- Selection by integer location:
  ---------------------------
Rows can be selected by passing integer location to an iloc function.

   import pandas as pd

   d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']),
     'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

   df = pd.DataFrame(d)
   print df.iloc[2]
Its output is as follows −
    ------
one   3.0
two   3.0
Name: c, dtype: float64

- Slice Rows:
  ----------
   Multiple rows can be selected using ‘ : ’ operator.

    import pandas as pd

    d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
        'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

    df = pd.DataFrame(d)
    print df[2:4]
Its output is as follows −
    -----
      one    two
c     3.0     3
d     NaN     4

- Addition of Rows:
--------------------
   Add new rows to a DataFrame using the append function. This function will append the rows at the end.

   import pandas as pd

   df = pd.DataFrame([[1, 2], [3, 4]], columns = ['a','b'])
   df2 = pd.DataFrame([[5, 6], [7, 8]], columns = ['a','b'])

   df = df.append(df2)
   print df
Its output is as follows −
   -------
   a  b
0  1  2
1  3  4
0  5  6
1  7  8
- Deletion of Rows:
  ----------------
    Use index label to delete or drop rows from a DataFrame. If label is duplicated, then multiple rows will be dropped.

    If you observe, in the above example, the labels are duplicate. Let us drop a label and will see 
	how many rows will get dropped.

  import pandas as pd

  df = pd.DataFrame([[1, 2], [3, 4]], columns = ['a','b'])
  df2 = pd.DataFrame([[5, 6], [7, 8]], columns = ['a','b'])

  df = df.append(df2)

  # Drop rows with label 0
  df = df.drop(0)

  print df
Its output is as follows −
    ------
  a b
1 3 4
1 7 8
In the above example, two rows were dropped because those two contain the same label 0.


=> PYTHON PANDAS PANEL:-
   ===================
       
	   A panel is a 3D container of data. The term Panel data is derived from econometrics and is partially responsible
		for the name pandas − pan(el)-da(ta)-s.

        The names for the 3 axes are intended to give some semantic meaning to describing operations involving panel data. They are −

        items − axis 0, each item corresponds to a DataFrame contained inside.

        major_axis − axis 1, it is the index (rows) of each of the DataFrames.

        minor_axis − axis 2, it is the columns of each of the DataFrames.

pandas.Panel():
--------------
        A Panel can be created using the following constructor −

           pandas.Panel(data, items, major_axis, minor_axis, dtype, copy)
		   
Create Panel:
------------

   A Panel can be created using multiple ways like −

     > From ndarrays
     > From dict of DataFrames
     > From 3D ndarray

	 # creating an empty panel
     import pandas as pd
     import numpy as np
     data = np.random.rand(2,4,5)
     p = pd.Panel(data)
     print p
 Its output is as follows −
     ------
    <class 'pandas.core.panel.Panel'>
   Dimensions: 2 (items) x 4 (major_axis) x 5 (minor_axis)
   Items axis: 0 to 1
   Major_axis axis: 0 to 3
   Minor_axis axis: 0 to 4
 Note :− Observe the dimensions of the empty panel and the above panel, all the objects are different.
 -----
From dict of DataFrame Objects:
-----------------------------
    #creating an empty panel
    import pandas as pd
    import numpy as np

    data = {'Item1' : pd.DataFrame(np.random.randn(4, 3)), 
        'Item2' : pd.DataFrame(np.random.randn(4, 2))}
    p = pd.Panel(data)
    print p
Its output is as follows −
    ------

     <class 'pandas.core.panel.Panel'>
     Dimensions: 2 (items) x 4 (major_axis) x 5 (minor_axis)
     Items axis: 0 to 1
     Major_axis axis: 0 to 3
     Minor_axis axis: 0 to 4

Create an Empty Panel:
---------------------
     An empty panel can be created using the Panel constructor as follows −

      #creating an empty panel
      import pandas as pd
      p = pd.Panel()
      print p
	  
Its output is as follows −
    -------
    <class 'pandas.core.panel.Panel'>
    Dimensions: 0 (items) x 0 (major_axis) x 0 (minor_axis)
    Items axis: None
    Major_axis axis: None
    Minor_axis axis: None

Selecting the Data from Panel:
-----------------------------
    Select the data from the panel using −

    Items
    Major_axis
    Minor_axis
    Using Items
         # creating an empty panel
         import pandas as pd
         import numpy as np
         data = {'Item1' : pd.DataFrame(np.random.randn(4, 3)), 
                 'Item2' : pd.DataFrame(np.random.randn(4, 2))}
         p = pd.Panel(data)
         print p['Item1']
    Its output is as follows −
        ------
            0          1          2
  0    0.488224  -0.128637   0.930817
  1    0.417497   0.896681   0.576657
  2   -2.775266   0.571668   0.290082
  3   -0.400538  -0.144234   1.110535
  We have two items, and we retrieved item1. The result is a DataFrame with 4 rows and 3 columns, which are the Major_axis and Minor_axis dimensions.

Using major_axis:
----------------
    Data can be accessed using the method panel.major_axis(index).

    # creating an empty panel
    import pandas as pd
    import numpy as np
    data = {'Item1' : pd.DataFrame(np.random.randn(4, 3)), 
           'Item2' : pd.DataFrame(np.random.randn(4, 2))}
    p = pd.Panel(data)
    print p.major_xs(1)
Its output is as follows −
    ------
      Item1       Item2
  0   0.417497    0.748412
  1   0.896681   -0.557322
  2   0.576657       NaN
Using minor_axis:
---------------
   Data can be accessed using the method panel.minor_axis(index).

    # creating an empty panel
    import pandas as pd
    import numpy as np
    data = {'Item1' : pd.DataFrame(np.random.randn(4, 3)), 
        'Item2' : pd.DataFrame(np.random.randn(4, 2))}
    p = pd.Panel(data)
    print p.minor_xs(1)

Its output is as follows −
    ------
       Item1       Item2
   0   -0.128637   -1.047032
   1    0.896681   -0.557322
   2    0.571668    0.431953
   3   -0.144234    1.302466
 Note: − Observe the changes in the dimensions.
-------
	
	
=> Python Pandas - Function Application:-
   ==================================== 

  To apply your own or another library’s functions to Pandas objects, you should be aware of the three 
  important methods. The methods have been discussed below. The appropriate method to use depends on whether your function expects to operate on an entire DataFrame, row- or column-wise, or element wise.

   Table wise Function Application: pipe()
   Row or Column Wise Function Application: apply()
   Element wise Function Application: applymap()

Table-wise Function Application:
-------------------------------
   Custom operations can be performed by passing the function and the appropriate number of parameters
   as pipe arguments. Thus, operation is performed on the whole DataFrame.

For example, add a value 2 to all the elements in the DataFrame. Then,

adder function:
--------------
    The adder function adds two numeric values as parameters and returns the sum.

    def adder(ele1,ele2):
    return ele1+ele2
    We will now use the custom function to conduct operation on the DataFrame.

    df = pd.DataFrame(np.random.randn(5,3),columns=['col1','col2','col3'])
    df.pipe(adder,2)

  Row or Column Wise Function Application:
  ---------------------------------------
  Arbitrary functions can be applied along the axes of a DataFrame or Panel using the apply() method,
  which, like the descriptive statistics methods, takes an optional axis argument. By default, the operation performs column wise, taking each column as an array-like.	

  
Element Wise Function Application:
----------------------------------
    Not all functions can be vectorized (neither the NumPy arrays which return another array nor any value), the methods 
    applymap() on DataFrame and analogously map() 
    on Series accept any Python function taking a single value and returning a single value.
	

=> PYTHON PANDAS-REINDEXING:-
   ========================	
      Reindexing changes the row labels and column labels of a DataFrame. To reindex means to conform the data to
	  match a given set of labels along a particular axis.

      Multiple operations can be accomplished through indexing like −

          > Reorder the existing data to match a new set of labels.

          > Insert missing value (NA) markers in label locations where no data for the label existed.
    Reindex to Align with Other Objects:
	-----------------------------------
       You may wish to take an object and reindex its axes to be labeled the same as another object. 
       Consider the following example to understand the same.	
 	
	Note: − Here, the df1 DataFrame is altered and reindexed like df2. The column names should be matched or
    -----    else NAN will be added for the entire column label. 

	Filling while ReIndexing:
	-----------------------
         reindex() takes an optional parameter method which is a filling method with values as follows −

         pad/ffill − Fill values forward

         bfill/backfill − Fill values backward   

         nearest − Fill from the nearest index values

Example:

        import pandas as pd
        import numpy as np

        df1 = pd.DataFrame(np.random.randn(6,3),columns=['col1','col2','col3'])
        df2 = pd.DataFrame(np.random.randn(2,3),columns=['col1','col2','col3'])

        # Padding NAN's
        print df2.reindex_like(df1)

        # Now Fill the NAN's with preceding Values
        print ("Data Frame with Forward Fill:")
        print df2.reindex_like(df1,method='ffill')

		Its output is as follows −
            ------
         col1        col2       col3
0    1.311620   -0.707176   0.599863
1   -0.423455   -0.700265   1.133371
2         NaN         NaN        NaN
3         NaN         NaN        NaN
4         NaN         NaN        NaN
5         NaN         NaN        NaN

Data Frame with Forward Fill:
         col1        col2        col3
0    1.311620   -0.707176    0.599863
1   -0.423455   -0.700265    1.133371
2   -0.423455   -0.700265    1.133371
3   -0.423455   -0.700265    1.133371
4   -0.423455   -0.700265    1.133371
5   -0.423455   -0.700265    1.133371
Note − The last four rows are padded.

    Limits on Filling while Reindexing:
	-----------------------------------
       The limit argument provides additional control over filling while reindexing. Limit specifies the maximum 
       count of consecutive matches.
       Let us consider the following example to understand the same

    Renaming:
	--------
        The rename() method allows you to relabel an axis based on some mapping (a dict or Series) or an arbitrary function.

        Let us consider the following example to understand this −	   

		
=> Python Pandas - Iteration:-
   =========================
	The behavior of basic iteration over Pandas objects depends on the type. When iterating over a Series,
	it is regarded as array-like, and basic iteration produces the values. Other data structures, like DataFrame and Panel, follow the dict-like convention of iterating over the keys of the objects.

    In short, basic iteration (for i in object) produces −

    Series − values

    DataFrame − column labels

    Panel − item labels

    Iterating a DataFrame:
    ----------------------
    Iterating a DataFrame gives column names. Let us consider the following example to understand the same.
	
	To iterate over the rows of the DataFrame, we can use the following functions −

        > iteritems() − to iterate over the (key,value) pairs

        > iterrows() − iterate over the rows as (index,series) pairs

        > itertuples() − iterate over the rows as namedtuples

    iteritems(): Iterates over each column as key, value pair with label as key and column value as a Series object.
	iterrows(): returns the iterator yielding each index value along with a series containing the data in each row.
	itertuples():  method will return an iterator yielding a named tuple for each row in the DataFrame. 
                   The first element of the tuple will be the row’s corresponding index value,
                   while the remaining values are the row values.
				   
=> Python Pandas - Sorting:-
   ========================
   
    There are two kinds of sorting available in Pandas. They are −

       a) By label
       b) By Actual Value
	a) BY label:
	------------
               	 Using the sort_index() method, by passing the axis arguments and the
	             order of sorting, DataFrame can be sorted. By default, sorting is done on row labels in ascending order.
    b) By Actual Value:
	------------------
    	        ike index sorting, sort_values() is the method for sorting by values. 
				It accepts a 'by' argument which will use the column name of the DataFrame with 
				which the values are to be sorted.
				
    Sorting Algorithm:
	-----------------
	        sort_values() provides a provision to choose the algorithm from mergesort, heapsort and quicksort. Mergesort is the only stable algorithm.

        import pandas as pd
        import numpy as np

         unsorted_df = pd.DataFrame({'col1':[2,1,1,1],'col2':[1,3,2,4]})
         sorted_df = unsorted_df.sort_values(by='col1' ,kind='mergesort')

         print sorted_df
		 
    Its output is as follows −
	    -----

       col1 col2
    1    1    3
    2    1    2
    3    1    4
    0    2    1
	
=>Python Pandas - Working with Text Data:-
  ======================================
  
        In this chapter, we will discuss the string operations with our basic Series/Index. 
		In the subsequent chapters, we will learn how to apply these string functions on the DataFrame.

    Pandas provides a set of string functions which make it easy to operate on string data. 
	Most importantly, these functions ignore (or exclude) missing/NaN values.

    Almost, all of these methods work with Python string functions 
	So, convert the Series Object to String Object and then perform the operation.
	
	
S.No	Function	            Description
----    --------                ------------
1	    lower()	                Converts strings in the Series/Index to lower case.
2	    upper()	                Converts strings in the Series/Index to upper case.
3	    len()	                Computes String length().
4	    strip()  	            Helps strip whitespace(including newline) from each string in the Series/index 
                                from both the sides.
5	    split(' ')	            Splits each string with the given pattern.
6	    cat(sep=' ')	        Concatenates the series/index elements with given separator.
7	    get_dummies()	        Returns the DataFrame with One-Hot Encoded values.
8	    contains(pattern)	    Returns a Boolean value True for each element if the substring contains in the element, 
                                else False.
9	    replace(a,b)	        Replaces the value a with the value b.
10	    repeat(value)	        Repeats each element with specified number of times.
11	    count(pattern)	        Returns count of appearance of pattern in each element.
12	    startswith(pattern)	    Returns true if the element in the Series/Index starts with the pattern.
13	    endswith(pattern)	    Returns true if the element in the Series/Index ends with the pattern.
14	    find(pattern)	        Returns the first position of the first occurrence of the pattern.
15	    findall(pattern)	    Returns a list of all occurrence of the pattern.
16	    swapcase	            Swaps the case lower/upper.
17	    islower()	            Checks whether all characters in each string in the Series/Index in lower case or not.
                                Returns Boolean
18	    isupper()	            Checks whether all characters in each string in the Series/Index in upper case or not. 
                                Returns Boolean.
19	    isnumeric()	            Checks whether all characters in each string in the Series/Index are numeric. 
                                Returns Boolean.
      
    for all simple example:
	
        import pandas as pd
        import numpy as np
        s = pd.Series(['Tom', 'William Rick', 'John', 'Alber@t', np.nan, '1234','SteveSmith'])
        print s.str.lower()
		
	Its output is as follows −

        0            tom
        1   william rick
        2           john
        3        alber@t
        4            NaN
        5           1234
        6    steve smith  
        dtype: object
		
=> Python Pandas - Options and Customization:-		
   ==========================================
      Pandas provide API to customize some aspects of its behavior, display is being mostly used.

    The API is composed of five relevant functions. They are −

       > get_option()
       > set_option()
       > reset_option()
       > describe_option()
       > option_context()
    Let us now understand how the functions operate.

get_option(param):
----------------
get_option takes a single parameter and returns the value as given in the output below −

display.max_rows
Displays the default number of value. Interpreter reads this value and displays the rows with this value as upper limit to display.

 import pandas as pd
 print pd.get_option("display.max_rows")

Its output is as follows −

 60
display.max_columns:

Displays the default number of value. Interpreter reads this value and displays the rows with this value as upper limit to display.

import pandas as pd
print pd.get_option("display.max_columns")
Its output is as follows −

20
Here, 60 and 20 are the default configuration parameter values.

set_option(param,value):
-----------------------
set_option takes two arguments and sets the value to the parameter as shown below −

display.max_rows
Using set_option(), we can change the default number of rows to be displayed.

import pandas as pd

pd.set_option("display.max_rows",80)

print pd.get_option("display.max_rows")
Its output is as follows −

80
display.max_rows
Using set_option(), we can change the default number of rows to be displayed.

import pandas as pd

pd.set_option("display.max_columns",30)

print pd.get_option("display.max_columns")
Its output is as follows −

30
reset_option(param):
-------------------
reset_option takes an argument and sets the value back to the default value.

display.max_rows
Using reset_option(), we can change the value back to the default number of rows to be displayed.

import pandas as pd

pd.reset_option("display.max_rows")
print pd.get_option("display.max_rows")
Its output is as follows −

60
describe_option(param):
----------------------
describe_option prints the description of the argument.

display.max_rows
Using reset_option(), we can change the value back to the default number of rows to be displayed.

import pandas as pd
pd.describe_option("display.max_rows")
Its output is as follows −

display.max_rows : int
   If max_rows is exceeded, switch to truncate view. Depending on
   'large_repr', objects are either centrally truncated or printed as
   a summary view. 'None' value means unlimited.

   In case python/IPython is running in a terminal and `large_repr`
   equals 'truncate' this can be set to 0 and pandas will auto-detect
   the height of the terminal and print a truncated object which fits
   the screen height. The IPython notebook, IPython qtconsole, or
   IDLE do not run in a terminal and hence it is not possible to do
   correct auto-detection.
   [default: 60] [currently: 60]
option_context():
-----------------
option_context context manager is used to set the option in with statement temporarily. Option values are restored automatically when you exit the with block −

display.max_rows
Using option_context(), we can set the value temporarily.

import pandas as pd
with pd.option_context("display.max_rows",10):
   print(pd.get_option("display.max_rows"))
   print(pd.get_option("display.max_rows"))
Its output is as follows −

10
10
See, the difference between the first and the second print statements. The first statement prints the value set by option_context() which is temporary within the with context itself. After the with context, the second print statement prints the configured value.

Frequently used Parameters:
--------------------------
S.No	Parameter	              Description
----    ---------                 -----------
1	display.max_rows	        Displays maximum number of rows to display
2	2 display.max_columns	    Displays maximum number of columns to display
3	display.expand_frame_repr	Displays DataFrames to Stretch Pages
4	display.max_colwidth	    Displays maximum column width
5	display.precision	        Displays precision for decimal numbers
	  

=> 

   The Python and NumPy indexing operators "[ ]" and attribute operator "." provide quick and easy access to 
   Pandas data structures across a wide range of use cases. However, since the type of the data to be accessed isn’t
   known in advance, directly using standard operators has some optimization limits. For production code,
   we recommend that you take advantage of the optimized pandas data access methods.

   Pandas now supports three types of Multi-axes indexing; the three types are mentioned in the following table −

       Indexing	     Description
	   --------      -----------
       .loc()	    Label based
       .iloc()	    Integer based
       .ix()	    Both Label and Integer based
   .loc():
   -------
          Pandas provide various methods to have purely label based indexing. When slicing, 
		  the start bound is also included. Integers are valid labels, but they refer to 
		  the label and not the position.

     .loc() has multiple access methods like −

        >  A single scalar label
        >  A list of labels
        >  A slice object
        >  A Boolean array
      loc takes two single/list/range operator separated by ','. The first one indicates the row and
	  the second one indicates columns.	 
   
    .iloc():
	--------
            Pandas provide various methods in order to get purely integer based indexing. 
			Like python and numpy, these are 0-based indexing.

        The various access methods are as follows −

            > An Integer
            > A list of integers
            > A range of values
Example 1:

      # import the pandas library and aliasing as pd
      import pandas as pd
      import numpy as np

      df = pd.DataFrame(np.random.randn(8, 4), columns = ['A', 'B', 'C', 'D'])

      # select all rows for a specific column
      print df.iloc[:4]

	Its output is as follows −

           A          B           C           D
    0   0.699435   0.256239   -1.270702   -0.645195
    1  -0.685354   0.890791   -0.813012    0.631615
    2  -0.783192  -0.531378    0.025070    0.230806
    3   0.539042  -1.284314    0.826977   -0.026251   


    .ix():
    -------
          Besides pure label based and integer based, Pandas provides a hybrid method for selections and subsetting
		  the object using the .ix() operator.

Example 1:
       import pandas as pd
       import numpy as np

       df = pd.DataFrame(np.random.randn(8, 4), columns = ['A', 'B', 'C', 'D'])

       # Integer slicing
       print df.ix[:4]
    Its output is as follows −

           A          B           C           D
    0   0.699435   0.256239   -1.270702   -0.645195
    1  -0.685354   0.890791   -0.813012    0.631615
    2  -0.783192  -0.531378    0.025070    0.230806
    3   0.539042  -1.284314    0.826977   -0.026251
    
	Use of Notations:
	----------------
                Getting values from the Pandas object with Multi-axes indexing uses the following notation −

         Object	         Indexers	                                     Return Type
         Series	         s.loc[indexer]	                            Scalar value
         DataFrame	     df.loc[row_index,col_index]	            Series object
         Panel	         p.loc[item_index,major_index, minor_index]	p.loc[item_index,major_index, minor_index]

		 Note − .iloc() & .ix() applies the same indexing options and Return value.
        ------
        Let us now see how each operation can be performed on the DataFrame object. 
		We will use the basic indexing operator '[ ]' −
		
=> Python Pandas - Statistical Functions:-
=========================================
		
        Statistical methods help in the understanding and analyzing the behavior of data. 
		We will now learn a few statistical functions, which we can apply on Pandas objects.

    Percent_change
          Series, DatFrames and Panel, all have the function pct_change(). 
		  This function compares every element with its prior element and computes the change percentage.

    import pandas as pd
    import numpy as np
    s = pd.Series([1,2,3,4,5,4])
    print s.pct_change()

    df = pd.DataFrame(np.random.randn(5, 2))
    print df.pct_change()
  
  Its output is as follows −

0        NaN
1   1.000000
2   0.500000
3   0.333333
4   0.250000
5  -0.200000
dtype: float64

            0          1
0         NaN        NaN
1  -15.151902   0.174730
2  -0.746374   -1.449088
3  -3.582229   -3.165836
4   15.601150  -1.860434
By default, the pct_change() operates on columns; if you want to apply the same row wise, then use axis=1() argument.

Covariance:
----------
           Covariance is applied on series data. The Series object has a method cov to compute covariance 
		   between series objects. NA will be excluded automatically.

Cov Series:

import pandas as pd
import numpy as np
s1 = pd.Series(np.random.randn(10))
s2 = pd.Series(np.random.randn(10))
print s1.cov(s2)

Its output is as follows −

-0.12978405324
           Covariance method when applied on a DataFrame, computes cov between all the columns.

import pandas as pd
import numpy as np
frame = pd.DataFrame(np.random.randn(10, 5), columns=['a', 'b', 'c', 'd', 'e'])
print frame['a'].cov(frame['b'])
print frame.cov()

Its output is as follows −

-0.58312921152741437

           a           b           c           d            e
a   1.780628   -0.583129   -0.185575    0.003679    -0.136558
b  -0.583129    1.297011    0.136530   -0.523719     0.251064
c  -0.185575    0.136530    0.915227   -0.053881    -0.058926
d   0.003679   -0.523719   -0.053881    1.521426    -0.487694
e  -0.136558    0.251064   -0.058926   -0.487694     0.960761
     Note: − Observe the cov between a and b column in the first statement and the same is the value returned by cov on DataFrame.

Correlation:
------------
            Correlation shows the linear relationship between any two array of values (series). 
			There are multiple methods to compute the correlation like pearson(default), spearman and kendall.

import pandas as pd
import numpy as np
frame = pd.DataFrame(np.random.randn(10, 5), columns=['a', 'b', 'c', 'd', 'e'])

print frame['a'].corr(frame['b'])

print frame.corr()

   Its output is as follows −

   -0.383712785514

           a          b          c          d           e
a   1.000000  -0.383713  -0.145368   0.002235   -0.104405
b  -0.383713   1.000000   0.125311  -0.372821    0.224908
c  -0.145368   0.125311   1.000000  -0.045661   -0.062840
d   0.002235  -0.372821  -0.045661   1.000000   -0.403380
e  -0.104405   0.224908  -0.062840  -0.403380    1.000000
           If any non-numeric column is present in the DataFrame, it is excluded automatically.

Data Ranking:
------------
         Data Ranking produces ranking for each element in the array of elements. In case of ties, assigns the mean rank.

import pandas as pd
import numpy as np
s = pd.Series(np.random.np.random.randn(5), index=list('abcde'))

s['d'] = s['b'] # so there's a tie

print s.rank()

  Its output is as follows −

a  1.0
b  3.5
c  2.0
d  3.5
e  5.0
dtype: float64
     Rank optionally takes a parameter ascending which by default is true; when false, data is reverse-ranked, with larger values assigned a smaller rank.

     Rank supports different tie-breaking methods, specified with the method parameter −

average − average rank of tied group

min     − lowest rank in the group

max     − highest rank in the group

first   − ranks assigned in the order they appear in the array	

=> Python Pandas - Window Functions:-
   ================================
   
           For working on numerical data, Pandas provide few variants like rolling, expanding and exponentially
		   moving weights for window statistics. Among these are sum, mean, median, variance, covariance, correlation, etc.
		   

        We will now learn how each of these can be applied on DataFrame objects.

.rolling() Function:
-------------------
        This function can be applied on a series of data. Specify the window=n argument and apply the appropriate 
        statistical function on top of it.
    Note:− Since the window size is 3, for first two elements there are nulls and from third the value 
	----   will be the average of the n, n-1 and n-2 elements. Thus we can also apply various functions as mentioned above.
    
.expanding() Function:
---------------------
        This function can be applied on a series of data. Specify the min_periods=n argument and 
		apply the appropriate statistical function on top of it.

.ewm() Function:
----------------
        ewm is applied on a series of data. Specify any of the com, span, halflife argument and apply 
        the appropriate statistical function on top of it. It assigns the weights exponentially.
		
=> Python Pandas - Aggregations:-
   ============================

        Once the rolling, expanding and ewm objects are created, several methods are available to perform aggregations on data.

Applying Aggregations on DataFrame:
-----------------------------------
      Let us create a DataFrame and apply aggregations on it.

      import pandas as pd
      import numpy as np

      df = pd.DataFrame(np.random.randn(10, 4),
      index = pd.date_range('1/1/2000', periods=10),
      columns = ['A', 'B', 'C', 'D'])

      print df

      r = df.rolling(window=3,min_periods=1)
      print r

	Its output is as follows −

                    A           B           C           D
2000-01-01   1.088512   -0.650942   -2.547450   -0.566858
2000-01-02   0.790670   -0.387854   -0.668132    0.267283
2000-01-03  -0.575523   -0.965025    0.060427   -2.179780
2000-01-04   1.669653    1.211759   -0.254695    1.429166
2000-01-05   0.100568   -0.236184    0.491646   -0.466081
2000-01-06   0.155172    0.992975   -1.205134    0.320958
2000-01-07   0.309468   -0.724053   -1.412446    0.627919
2000-01-08   0.099489   -1.028040    0.163206   -1.274331
2000-01-09   1.639500   -0.068443    0.714008   -0.565969
2000-01-10   0.326761    1.479841    0.664282   -1.361169

Rolling [window=3,min_periods=1,center=False,axis=0]                  
	

=> Python Pandas - Missing Data:-
   ============================	
   
        Missing data is always a problem in real life scenarios. Areas like machine learning and data mining 
        face severe issues in the accuracy of their model predictions because of poor quality of data caused
        by missing values. In these areas, missing value treatment is a major point of focus to make their models 
        more accurate and valid.

When and Why Is Data Missed?:
----------------------------
        Let us consider an online survey for a product. Many a times, people do not share 
		all the information related to them. Few people share their experience, but not 
		how long they are using the product; few people share how long they are using the product, 
		their experience but not their contact information. Thus, in some or the other way a part of 
		data is always missing, and this is very common in real time.

    Let us now see how we can handle missing values (say NA or NaN) using Pandas.

    # import the pandas library
    import pandas as pd
    import numpy as np

    df = pd.DataFrame(np.random.randn(5, 3), index=['a', 'c', 'e', 'f',
         'h'],columns=['one', 'two', 'three'])

    df = df.reindex(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])

    print df
	
  Its output is as follows −

         one        two      three
    a   0.077988   0.476149   0.965836
    b        NaN        NaN        NaN
    c  -0.390208  -0.551605  -2.301950
    d        NaN        NaN        NaN
    e  -2.000303  -0.788201   1.510072
    f  -0.930230  -0.670473   1.146615
    g        NaN        NaN        NaN
    h   0.085100   0.532791   0.887415
  Using reindexing, we have created a DataFrame with missing values. In the output, NaN means Not a Number .
	
Check for Missing Values:
-------------------------
        To make detecting missing values easier (and across different array dtypes), 
		Pandas provides the isnull() and notnull() functions, which are also methods on Series and DataFrame objects −
        
Calculations with Missing Data:
------------------------------
        When summing data, NA will be treated as Zero
        If the data are all NA, then the result will be NA
		
Cleaning / Filling Missing Data:
-------------------------------
        Pandas provides various methods for cleaning the missing values. 
		The fillna function can “fill in” NA values with non-null data in a couple of ways, 
		which we have illustrated in the following sections.

Replace NaN with a Scalar Value:
--------------------------------
        The following program shows how you can replace "NaN" with "0".

Fill NA Forward and Backward:
----------------------------
         Using the concepts of filling discussed in the ReIndexing Chapter we will fill the missing values.

         Method	             Action
		 ------              ------
         pad/fill	        Fill methods Forward
         bfill/backfill  	Fill methods Backward
		 
Drop Missing Values:
-------------------
       If you want to simply exclude the missing values, then use the dropna function along with the axis argument. 
       By default, axis=0, i.e., along row, which means that if any value within a row is NA then the whole row is excluded.

Replace Missing (or) Generic Values:
-----------------------------------
        Many times, we have to replace a generic value with some specific value. 
		We can achieve this by applying the replace method.

       Replacing NA with a scalar value is equivalent behavior of the fillna() function.
	   
=> Python Pandas - GroupBy:-
   ========================
         Any groupby operation involves one of the following operations on the original object. They are −

        > Splitting the Object

        > Applying a function

        > Combining the results

     In many situations, we split the data into sets and we apply some functionality on each subset. 
	 In the apply functionality, we can perform the following operations −

       > Aggregation    − computing a summary statistic

       > Transformation − perform some group-specific operation

       > Filtration     − discarding the data with some condition
	  
   Split Data into Groups:
    ----------------------
          Pandas object can be split into any of their objects. There are multiple ways to split an object like −

        obj.groupby('key')
        obj.groupby(['key1','key2'])
        obj.groupby(key,axis=1)
    Let us now see how the grouping objects can be applied to the DataFrame object
	
	Select a Group:
	--------------
        Using the get_group() method, we can select a single group
		
	Aggregations:
	------------
          An aggregated function returns a single aggregated value for each group. 
          Once the group by object is created, several aggregation operations can be performed on the grouped data.
	   
	Transformations:
	----------------
          Transformation on a group or a column returns an object that is indexed the same size of that is being grouped.
          Thus, the transform should return a result that is the same size as that of a group chunk.
          
    Filtration:
	----------
          Filtration filters the data on a defined criteria and returns the subset of data. The filter() function is used to 
          filter the data.

=> Python Pandas - Merging/Joining:-
   ===============================
   
        Pandas has full-featured, high performance in-memory join operations idiomatically very similar to 
		relational databases like SQL.

        Pandas provides a single function, merge, as the entry point for all standard database join operations 
		between DataFrame objects −

                     pd.merge(left, right, how='inner', on=None, left_on=None, right_on=None,
                     left_index=False, right_index=False, sort=True)
    
	Here, we have used the following parameters −

  left        − A DataFrame object.

  right       − Another DataFrame object.

  on          − Columns (names) to join on. Must be found in both the left and right DataFrame objects.

  left_on     − Columns from the left DataFrame to use as keys. Can either be column names or arrays
                with length equal to the length of the DataFrame.

  right_on    − Columns from the right DataFrame to use as keys. Can either be column names or arrays with 
                length equal to the length of the DataFrame.

  left_index  − If True, use the index (row labels) from the left DataFrame as its join key(s). 
                In case of a DataFrame with a MultiIndex (hierarchical), the number of levels must match the number of 
                join keys from the right DataFrame.

  right_index − Same usage as left_index for the right DataFrame.

  how         − One of 'left', 'right', 'outer', 'inner'. Defaults to inner. Each method has been described below.

  sort        − Sort the result DataFrame by the join keys in lexicographical order. 
                Defaults to True, setting to False will improve the performance substantially in many cases.
		  

   Merge Using 'how' Argument:
   --------------------------
     The how argument to merge specifies how to determine which keys are to be included in the resulting table.
	 If a key combination does not appear in either the left or the right tables, 
	 the values in the joined table will be NA.

     Here is a summary of the how options and their SQL equivalent names −

          MergeMethod	   SQLEquivalent	      Description
		  ----------      --------------        --------------
          left	         LEFT OUTER JOIN	  Use keys from left object
          right	         RIGHT OUTER JOIN	  Use keys from right object
          outer	         FULL OUTER JOIN	  Use union of keys
          inner	         INNER JOIN	          Use intersection of keys

    Inner Join:
	-----------
        Joining will be performed on index. Join operation honors the object on which it is called. 
		So, a.join(b) is not equal to b.join(a).

=> Python Pandas - Concatenation:-
   =============================
  
           Pandas provides various facilities for easily combining together Series, DataFrame, and Panel objects.

                 pd.concat(objs,axis=0,join='outer',join_axes=None,
                           ignore_index=False)
objs − This is a   sequence or mapping of Series, DataFrame, or Panel objects.

axis − {0, 1, ...}, default 0. This is the axis to concatenate along.

join − {‘inner’, ‘outer’}, default ‘outer’. How to handle indexes on other axis(es).
         Outer for union and inner for intersection.

            ignore_index − boolean, default False. If True, do not use the index values on the concatenation axis. 
			The resulting axis will be labeled 0, ..., n - 1.

join_axes − This is the list of Index objects. Specific indexes to use for the other (n-1) 
            axes instead of performing inner/outer set logic.

Concatenating Objects:
---------------------
            The concat function does all of the heavy lifting of performing concatenation operations along an axis. Let us create different objects and do concatenation. 
		  
Concatenating Using append:
---------------------------
        A useful shortcut to concat are the append instance methods on Series and DataFrame. 
		These methods actually predated concat. They concatenate along axis=0, namely the index −
		  
Time Series:
------------
     Pandas provide a robust tool for working time with Time series data, especially in the financial sector. 
	 While working with time series data, we frequently come across the following −

       > Generating sequence of time
       > Convert the time series to different frequencies
Pandas provides a relatively compact and self-contained set of tools for performing the above tasks.

Get Current Time:
-----------------
datetime.now() gives you the current date and time.		
		
		
Create a TimeStamp:
------------------
Time-stamped data is the most basic type of timeseries data that associates values with points in time. 
For pandas objects, it means using the points in time. Let’s take an example −

import pandas as pd
print pd.Timestamp('2017-03-01')

Its output is as follows −

2017-03-01 00:00:00
    
Converting to Timestamps:
------------------------
To convert a Series or list-like object of date-like objects, for example strings, epochs, or a mixture, 
you can use the to_datetime function. When passed, this returns a Series (with the same index),
 while a list-like is converted to a DatetimeIndex. Take a look at the following example −


=> Python Pandas - Date Functionality:-
   ==================================

Extending the Time series, Date functionalities play major role in financial data analysis. While working with Date data, we will frequently come across the following −

Generating sequence of dates
Convert the date series to different frequencies

Create a Range of Dates:
------------------------
Using the date.range() function by specifying the periods and the frequency, we can create the date series. By default, the frequency of range is Days.

import pandas as pd
print pd.date_range('1/1/2011', periods=5)
Its output is as follows −

DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03', '2011-01-04', '2011-01-05'],
dtype='datetime64[ns]', freq='D')

Change the Date Frequency:
-------------------------
import pandas as pd
print pd.date_range('1/1/2011', periods=5,freq='M')
Its output is as follows −

DatetimeIndex(['2011-01-31', '2011-02-28', '2011-03-31', '2011-04-30', '2011-05-31'],
dtype='datetime64[ns]', freq='M')

bdate_range:
------------
bdate_range() stands for business date ranges. Unlike date_range(), it excludes Saturday and Sunday.

import pandas as pd
print pd.date_range('1/1/2011', periods=5)
Its output is as follows −

DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03', '2011-01-04', '2011-01-05'],
dtype='datetime64[ns]', freq='D')
Observe, after 3rd March, the date jumps to 6th march excluding 4th and 5th. Just check your calendar for the days.

Convenience functions like date_range and bdate_range utilize a variety of frequency aliases. The default frequency for date_range is a calendar day while the default for bdate_range is a business day.

import pandas as pd
start = pd.datetime(2011, 1, 1)
end = pd.datetime(2011, 1, 5)
print pd.date_range(start, end)
Its output is as follows −

DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03', '2011-01-04', '2011-01-05'],
dtype='datetime64[ns]', freq='D')

Offset Aliases:
--------------
A number of string aliases are given to useful common time series frequencies. We will refer to these aliases as offset aliases.

Alias	Description	                  Alias	                              Description
B	    business day frequency	       BQS	         business quarter start frequency
D	    calendar day frequency	       A	         annual(Year) end frequency
W	    weekly frequency	           BA	         business year end frequency
M	    month end frequency	           BAS	         business year start frequency
SM	    semi-month end frequency	   BH	         business hour frequency
BM	    business month end frequency	H	         hourly frequency
MS	    month start frequency	        T, min	     minutely frequency
SMS	    SMS semi month start frequency	S	         secondly frequency
BMS	    business month start frequency	L, ms      	 milliseconds
Q	    quarter end frequency	        U, us	     microseconds
BQ	    business quarter end frequency	N	         nanoseconds
QS	    quarter start frequency		

=> Python Pandas - Timedelta:-
   =========================
  
    Timedeltas are differences in times, expressed in difference units, for example, days, hours, minutes, seconds.
	They can be both positive and negative.

    We can create Timedelta objects using various arguments as shown below −

String:
------
       By passing a string literal, we can create a timedelta object.

import pandas as pd

print pd.Timedelta('2 days 2 hours 15 minutes 30 seconds')
Its output is as follows −

2 days 02:15:30

Integer:
-------
By passing an integer value with the unit, an argument creates a Timedelta object.

import pandas as pd

print pd.Timedelta(6,unit='h')
Its output is as follows −

0 days 06:00:00

Data Offsets:
------------
Data offsets such as - weeks, days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds 
can also be used in construction.

import pandas as pd

print pd.Timedelta(days=2)
Its output is as follows −

2 days 00:00:00
to_timedelta()
 Using the top-level pd.to_timedelta, you can convert a scalar, array, list, or series from a recognized
 timedelta format/ value into a Timedelta type. It will construct Series if the input is a Series,
 a scalar if the input is scalar-like, otherwise will output a TimedeltaIndex.

import pandas as pd

print pd.Timedelta(days=2)
Its output is as follows −

2 days 00:00:00

Operations:
----------
          You can operate on Series/ DataFrames and construct timedelta64[ns] Series through subtraction operations
		  on datetime64[ns] Series, or Timestamps.

           Let us now create a DataFrame with Timedelta and datetime objects and perform some 
		   arithmetic operations on 
		        > Addition operation
				> Substraction operation
				
=> Python Pandas - Categorical Data:-
   ================================
Often in real-time, data includes the text columns, which are repetitive. Features like gender, country, 
and codes are always repetitive. These are the examples for categorical data.

Categorical variables can take on only a limited, and usually fixed number of possible values. 
Besides the fixed length, categorical data might have an order but cannot perform numerical operation. 
Categorical are a Pandas data type.

The categorical data type is useful in the following cases: −
-----------------------------------------------------------

> A string variable consisting of only a few different values. Converting such a string variable to a
  categorical variable will save some memory.

> The lexical order of a variable is not the same as the logical order (“one”, “two”, “three”).
  By converting to a categorical and specifying an order on the categories, sorting and min/max will 
  use the logical order instead of the lexical order.

> As a signal to other python libraries that this column should be treated as a categorical variable 
 (e.g. to use suitable statistical methods or plot types).

Object Creation:
--------------
Categorical object can be created in multiple ways.
  1. category      : By specifying the dtype as "category" in pandas object creation. 
  2. pd.Categorical: Using the standard pandas Categorical constructor, we can create a category object. 
  3. Renaming Categories: Renaming categories is done by assigning new values to 
                         the series.cat.categoriesseries.cat.categories property.
  4. Appending New Categories:  Using the Categorical.add.categories() method, new categories can be appended.
  5. Removing Categories: Using the Categorical.remove_categories() method, unwanted categories can be removed.
  6. Comparison of Categorical Data:
                    Comparing categorical data with other objects is possible in three cases −

               > comparing equality (== and !=) to a list-like object (list, Series, array, ...) 
                 of the same length as the categorical data.

               > all comparisons (==, !=, >, >=, <, and <=) of categorical data to another categorical Series,
				 when ordered==True and the categories are the same.

               > all comparisons of a categorical data to a scalar.

=> Python Pandas - Visualization:-
    ============================== 
		Basic Plotting: plot
        This functionality on Series and DataFrame is just a simple wrapper around the matplotlib libraries plot() method.

import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randn(10,4),index=pd.date_range('1/1/2000',
   periods=10), columns=list('ABCD'))

df.plot()

Its output is as follows −    draw " BARS FIG"

Basic Plotting:
--------------
If the index consists of dates, it calls gct().autofmt_xdate() to format the x-axis as shown in the above illustration.

We can plot one column versus another using the x and y keywords.

Plotting methods allow a handful of plot styles other than the default line plot. 
These methods can be provided as the kind keyword argument to plot(). These include −

    > bar or barh for bar plots
    > hist for histogram
    > box for boxplot
    > 'area' for area plots
    > 'scatter' for scatter plots

Bar Plot:
---------
Let us now see what a Bar Plot is by creating one. A bar plot can be created in the following way
               "DRAW − BARS fig

Histograms:
----------
Histograms can be plotted using the plot.hist() method. We can specify number of bins.			   
		 
Box Plots:
----------
Boxplot can be drawn calling Series.box.plot() and DataFrame.box.plot(), or DataFrame.boxplot() 
to visualize the distribution of values within each column.

For instance, here is a boxplot representing five trials of 10 observations of a uniform random variable on [0,1).

Scatter Plot:
------------
Scatter plot can be created using the DataFrame.plot.scatter() methods.

Pie Chart:
----------
Pie chart can be created using the DataFrame.plot.pie() method.
		 
=>Python Pandas - IO Tools:-
   =======================	
        The Pandas I/O API is a set of top level reader functions accessed like pd.read_csv() 
		that generally return a Pandas object.

      The two workhorse functions for reading text files (or the flat files) are read_csv() and read_table(). 
      They both use the same parsing code to intelligently convert tabular data into a DataFrame object −   

read.csv:
---------
     read.csv reads data from the csv files and creates a DataFrame object.
		 
=> Python Pandas - Sparse Data:-
   ===========================

    Sparse objects are “compressed” when any data matching a specific value (NaN / missing value, 
	though any value can be chosen) is omitted. A special SparseIndex object tracks where data has been
	“sparsified”. This will make much more sense in an example. All of the standard Pandas data structures 
	apply the to_sparse method −   

Sparse Dtypes:
-------------
Sparse data should have the same dtype as its dense representation. Currently, float64, int64 and booldtypes are supported.
Depending on the original dtype, fill_value default changes −

  > float64 − np.nan

  > int64 − 0

  > bool − False

=> Python Pandas - Caveats & Gotchas:-
   =================================
   
    Using If/Truth Statement with Pandas:
	--------------------------------------
    Pandas follows the numpy convention of raising an error when you try to convert something to a bool. 
	This happens in an if or when using the Boolean operations, and, or, or not. It is not clear what 
	the result should be. Should it be True because it is not zerolength? False because there are False values?
	It is unclear, so instead, Pandas raises a ValueError −
   
Bitwise Boolean:
---------------
Bitwise Boolean operators like == and != will return a Boolean series, which is almost always what is required anyways.

isin Operation:
---------------
This returns a Boolean series showing whether each element in the Series is exactly contained in 
the passed sequence of values.

Reindexing vs ix Gotcha:
-----------------------
Many users will find themselves using the ix indexing capabilities as a concise means of selecting data 
from a Pandas object 

=> Python Pandas - Comparison with SQL:-
   ===================================
   
           Since many potential Pandas users have some familiarity with SQL, this page is meant to provide 
         some examples of how various SQL operations can be performed using pandas.
   
   
SELECT:
-------
   In SQL, selection is done using a comma-separated list of columns that you select (or a * to select all columns) −

     syntax: SELECT total_bill, tip, smoker, time
             FROM tips
             LIMIT 5;   
   
WHERE:
------
Filtering in SQL is done via a WHERE clause.

    syntax: SELECT * FROM tips WHERE time = 'Dinner' LIMIT 5;

	         DataFrames can be filtered in multiple ways; the most intuitive of which is using Boolean indexing.

    ex:      tips[tips['time'] == 'Dinner'].head(5) 

GroupBy:
-------
        This operation fetches the count of records in each group throughout a dataset. 
		For instance, a query fetching us the number of tips left by sex −

    sybtax: SELECT sex, count(*)
            FROM tips
            GROUP BY sex;
The Pandas equivalent would be −

     Ex: tips.groupby('sex').size()
	 
Top N rows:
-----------
         SQL returns the top n rows using LIMIT −

    syntax: SELECT * FROM tips
            LIMIT 5 ;
The Pandas equivalent would be −

    Ex:    tips.head(5)
	
============================================================================================================================	
		 
		 
		                          ####### INTERVIEW QUESTIONS  ########
		  
1Q).What is Pandas/Python Pandas?
--------------------------------
     Pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with
     “relational” or “labeled” data both easy and intuitive. It aims to be the fundamental high-level building block for doing 
     practical, real world data analysis in Python.

2Q). What is Python pandas used for?
------------------------------------
     pandas is a software library written for the Python programming language for data manipulation and analysis.
	 In particular, it offers data structures and operations for manipulating numerical tables and time series. 
	 pandas is free software released under the three-clause BSD license.

3Q). What is a pandas DataFrame?
 --------------------------------
      DataFrame is a 2-dimensional labeled data structure with columns of potentially different types. 
	  You can think of it like a spreadsheet or SQL table, or a dict of Series objects. It is generally 
	  the most commonly used pandas object.

Q4). What is NP Python?
-----------------------
     NumPy (pronounced /ˈnʌmpaɪ/ (NUM-py) or sometimes /ˈnʌmpi/ (NUM-pee)) is an extension to the Python programming language,
	 adding support for large, multi-dimensional arrays and matrices, along with a large library of high-level 
	 mathematical functions to operate on these arrays.

Q5).What is Matplotlib?
----------------------
     matplotlib is a plotting library for the Python programming language and its numerical mathematics extension NumPy. 
     It provides an object-oriented API for embedding plots into applications using general-purpose GUI toolkits 
     like wxPython, Qt, or GTK+.
	 
Q6).What can I import from NumPy?
---------------------------------
     numpy is the top package name, and doing import numpy doesn’timport submodule numpy.f2py . 
	 The link is established when you do import numpy.f2py. 
	 In your above code: import numpy as np # np is an alias pointing tonumpy, but at this point numpy is not linked to numpy.
	 f2py import numpy.
	
Q7).What is Scipy?
-----------------
     SciPy (pronounced “Sigh Pie”) is open-source software for mathematics, science, and engineering. 
	 It is also the name of a very popular conference on scientific programming with Python. 
	 The SciPy library depends on NumPy, which provides convenient and fast N-dimensional array manipulation.

Q8).What is plot ly?
-------------------
     Plotly, also known by its URL, Plot.ly, is an online analytics and data visualization tool, headquartered in Montreal,
	 Quebec.

Q9).What is PIP for Python?
---------------------------
     pip is a package management system used to install and manage software packages written in Python.
	 Many packages can be found in the Python Package Index (PyPI). Python 2.7.9 and later (on the python2 series), 
	 and Python 3.4 and later include pip (pip3 for Python 3) by default.

Q10).What is Sympy?
-------------------
     SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) 
	 while keeping the code as simple as possible in order to be comprehensible and easily extensible.
	 
Q11.Important things you should know about Numpy and Pandas?
-----------------------------------------------------------

    > The data manipulation capabilities of pandas are built on top of the numpy library. In a way, numpy is a dependency of 
	  the pandas library.
    > Pandas is best at handling tabular data sets comprising different variable types (integer, float, double, etc.).
	  In addition, the pandas library can also be used to perform even the most naive of tasks such as loading 
	  data or doing feature engineering on time series data.
     
	> Numpy is most suitable for performing basic numerical computations such as mean, median, range, etc. 
	  Alongside, it also supports the creation of multi-dimensional arrays.
    > Numpy library can also be used to integrate C/C++ and Fortran code.
      Remember, python is a zero indexing language unlike R where indexing starts at one.
    > The best part of learning pandas and numpy is the strong active community support you'll get from around the world.
		
Q12.Table of Contents?
----------------------
    > Top of 5 points also..
    > Starting with Numpy
    > tarting with Pandas
    > Exploring an ML Data Set
    > Building a Random Forest Model
	

Q13.This set of Data Science Multiple Choice Questions & Answers (MCQs) focuses on “Pandas Data Structure”.

1. Which of the following thing can be data in Pandas ?
a) a python dict
b) an ndarray
c) a scalar value

Q14.Point out the correct statement:?

    NaN is the standard missing data marker used in pandas




                     ############## MY SQL ###########
					 =================================

					 
=>=> MySQL TUTORIAL :-
     ==============

	 What is MySQL:-
	 =============

	 MySQL is a fast, easy to use relational database. It is currently the most popular open-source database. 
It is very commonly used in conjunction with PHP scripts to create powerful and dynamic server-side applications.

MySQL is used for many small and big businesses. It is developed, marketed and supported by MySQL AB,
a Swedish company. It is written in C and C++.

->Reasons of popularity:-
-----------------------
MySQL is becoming so popular because of these following reasons:

> MySQL is an open-source database so you don't have to pay a single penny to use it.
> MySQL is a very powerful program so it can handle a large set of functionality of the
  most expensive and powerful database packages.
> MySQL is customizable because it is an open source database and the open-source GPL license 
  facilitates programmers to modify the SQL software according to their own specific environment.
> MySQL is quicker than other databases so it can work well even with the large data set.
> MySQL supports many operating systems with many languages like PHP, PERL, C, C++, JAVA, etc.
> MySQL uses a standard form of the well-known SQL data language.
> MySQL is very friendly with PHP, the most popular language for web development.
> MySQL supports large databases, up to 50 million rows or more in a table. The default file 
  size limit for a table is 4GB, but you can increase this (if your operating system can handle it) 
  to a theoretical limit of 8 million terabytes (TB).
  
-> History of MySQL:
  ----------------
MySQL is an open source database product that was created by MySQL AB, a company founded in 1995 in Sweden. 
In 2008, MySQL AB announced that it had agreed to be acquired by Sun Microsystems for approximately $1 billion.

Initial Efforts:-

The project of MySQL was started in 1979, when MySQL's inventor, Michael Widenius developed an in-house database tool called UNIREG for managing databases. After that UNIREG has been rewritten in several different languages and extended to handle big databases. After some time Michael Widenius contacted David Hughes, the author of mSQL, to see if Hughes would be interested in connecting mSQL to UNIREG's B+ ISAM handler to provide indexing to mSQL. That's the way MySQL came in existence.

MySQL is named after the daughter of Michael Widenius whose name is "My".

History by year:-

Year	Happenings
----    ----------
1995	MySQL AB founded by Michael Widenius (Monty), David Axmark and Allan Larsson in Sweden.
2000	MySQL goes open source and releases software under the terms of the GPL. Revenues dropped 80% 
        as a result, and it took a year to make up for it.
2001	Marten Mickos elected CEO at age 38. Marten was the CEO of a number of nordic companies before 
        joining MySQL, and comes with a sales and marketing background. 2 million active installations. 
		Raised series a with undisclosed amount from Scandinavian venture capitalists. Estimated to be around
		$1 to $2 million.
2002	MySQL launched us headquarters in addition to Swedish headquarters. 3 million active users. 
        Ended the year with $6.5 million in revenue with 1,000 paying customers.
2003	Raised a $19.5 million series b from benchmark capital and index ventures. 4 million active 
        installations and over 30,000 downloads per day. Ended the year with $12 million in revenue.
2004	With the main revenue coming from the oem dual-licensing model, MySQL decides to move more into 
        the enterprise market and to focus more on recurring revenue from end users rather than one-time 
		licensing fees from their oem partners. Ended the year with $20 million in revenue.
2005	MySQL launched the MySQL network modeled after the Redhat network. the MySQL network is a 
        subscription service targeted at end users that provides updates, alerts, notifications, 
		and product-level support designed to make it easier for companies to manage hundreds of MySQL servers.
		MySQL 5 ships and includes many new features to go after enterprise users (e.g. stored procedures, triggers,
		views, cursors, distributed transactions, federated storage engines, etc.) Oracle buys innobase, the 4-person
		and a Finland's company behind MySQL's innodb storage backend.
        ended the year with $34 million in revenue based on 3400 customers.
2006    Marten Mickos confirms that oracle tried to buy MySQL. Oracle' CEO Larry Ellison commented: 
        "we've spoken to them, in fact we've spoken to almost everyone. Are we interested? It's a tiny company. 
		I think the revenues from MySQL are between $30 million and $40 million. Oracle's revenue next year is 
		$15 billion." Oracle buys sleepycat, the company that provides MySQL with the Berkeley db transactional 
		storage engine. Marten Mickos announces that they are making MySQL ready for an IPO in 2008 on an projected 
		$100 million in revenues. 8 million active installations. MySQL has 320 employees in 25 countries, 
		70 percent of whom work from home, raised a $18 million series c based on a rumored valuation north of $300 million.
		MySQL is estimated to have a 33% market share measured in install base and 0.2% market share measured in revenue 
		(the database market was a $15 billion market in 2006). Ended the year with $50 million in revenue.
2007	Ended the year with $75 million in revenue.
2008	Sun Microsystems acquired MySQL AB for approximately $1 billion. Michael Widenius (Monty) and David Axmark,
        two of MySQL AB's co-founders, begin to criticize Sun publicly and leave Sun shortly after.
2009	Marten Mickos leaves Sun and becomes entrepreneur-in-residence at Benchmark Capital. Sun has now lost 
        the business and spiritual leaders that turned MySQL into a success.
        sun Microsystems and Oracle announced that they have entered into a definitive agreement under 
		which Oracle will acquire Sun common stock for $9.50 per share in cash. The transaction is valued at
		approximately $7.4 billion.

-> MySQL Features:-
------------------
> Relational Database Management System (RDBMS): MySQL is a relational database management system.
> Easy to use: MySQL is easy to use. You have to get only the basic knowledge of SQL. You can build and 
  interact with MySQL with only a few simple SQL statements.
> It is secure: MySQL consist of a solid data security layer that protects sensitive data from intruders. 
  Passwords are encrypted in MySQL.
> Client/ Server Architecture: MySQL follows a client /server architecture. There is a database server (MySQL)
  and arbitrarily many clients (application programs), which communicate with the server; that is, they query data, 
  save changes, etc.
> Free to download: MySQL is free to use and you can download it from MySQL official website.
> It is scalable: MySQL can handle almost any amount of data, up to as much as 50 million rows or more. 
  The default file size limit is about 4 GB. However, you can increase this number to a theoretical limit of 8 TB of data.
> Compatibale on many operating systems: MySQL is compatible to run on many operating systems, like Novell NetWare, 
   Windows* Linux*, many varieties of UNIX* (such as Sun* Solaris*, AIX, and DEC* UNIX), OS/2, FreeBSD*, and others. 
   MySQL also provides a facility that the clients can run on the same computer as the server or on another computer 
   (communication via a local network or the Internet).
> Allows roll-back: MySQL allows transactions to be rolled back, commit and crash recovery.
> High Performance: MySQL is faster, more reliable and cheaper because of its unique storage engine architecture.
> High Flexibility: MySQL supports a large number of embedded applications which makes MySQL very flexible.
> High Productivity: MySQL uses Triggers, Stored procedures and views which allows the developer to give a 
  higher productivity.

 -> Disadvantages / Drawback of MySQL:
   ---------------------------------
Following are the few disadvantages of MySQL:

MySQL version less than 5.0 doesn't support ROLE, COMMIT and stored procedure.
MySQL does not support a very large database size as efficiently.
MySQL doesn't handle transactions very efficiently and it is prone to data corruption.
MySQL is accused that it doesn't have a good developing and debugging tool compared to paid databases.
MySQL doesn't support SQL check constraints.

-> MySQL Data Types:-
  -----------------
  
A Data Type specifies a particular type of data, like integer, floating points, Boolean etc. 
It also identifies the possible values for that type, the operations that can be performed on that 
type and the way the values of that type are stored.

MySQL supports a lot number of SQL standard data types in various categories. 
It uses many different data types broken into mainly three categories: numeric, date and time, and string types.

1.Numeric Data Type:
....................

Data Type 
Syntax	          Description
---------          ----------
INT	              A normal-sized integer that can be signed or unsigned. If signed, the allowable range is 
                  from -2147483648 to 2147483647. If unsigned, the allowable range is from 0 to 4294967295. 
				  You can specify a width of up to 11 digits.
TINYINT	          A very small integer that can be signed or unsigned. If signed, the allowable range is
                  from -128 to 127. If unsigned, the allowable range is from 0 to 255. You can specify a width 
				  of up to 4 digits.
SMALLINT	      A small integer that can be signed or unsigned. If signed, the allowable range is 
                  from -32768 to 32767. If unsigned, the allowable range is from 0 to 65535. You can specify a 
				  width of up to 5 digits.
MEDIUMINT	      A medium-sized integer that can be signed or unsigned. If signed, the allowable range is 
                  from -8388608 to 8388607. If unsigned, the allowable range is from 0 to 16777215. You can specify
 				  a width of up to 9 digits.
BIGINT	          A large integer that can be signed or unsigned. If signed, the allowable range is 
                  from -9223372036854775808 to 9223372036854775807. If unsigned, the allowable range is 
				  from 0 to 18446744073709551615. You can specify a width of up to 20 digits.
FLOAT(m,d)	      A floating-point number that cannot be unsigned. You can define the display length (m) and 
                  the number of decimals (d). This is not required and will default to 10,2, where 2 is the number
 				  of decimals and 10 is the total number of digits (including decimals). Decimal precision can
				  go to 24 places for a float.
DOUBLE(m,d)	      A double precision floating-point number that cannot be unsigned. You can define the display 
                  length (m) and the number of decimals (d). This is not required and will default to 16,4, where 4 
				  is the number of decimals. Decimal precision can go to 53 places for a double. Real is a synonym for double.
DECIMAL(m,d)	  An unpacked floating-point number that cannot be unsigned. In unpacked decimals, each decimal 
                  corresponds to one byte. Defining the display length (m) and the number of decimals (d) is required. 
				  Numeric is a synonym for decimal.

2.Date and Time Data Type:
.........................

Data Type 
Syntax	      Maximum Size	                                                            Explanation
--------      -------------                                                             ------------
DATE	      Values range from '1000-01-01' to '9999-12-31'.	                        Displayed as 'yyyy-mm-dd'.
DATETIME	  Values range from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'.	        Displayed as 'yyyy-mm-dd hh:mm:ss'.
TIMESTAMP(m)  Values range from '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' TC.	Displayed as 'YYYY-MM-DD HH:MM:SS'.
TIME	      Values range from '-838:59:59' to '838:59:59'.	                        Displayed as 'HH:MM:SS'.
YEAR[(2|4)]	  Year value as 2 digits or 4 digits.	                                    Default is 4 digits.

3.String Data Types:
....................

Data Type 
Syntax	            Maximum Size	                                  Explanation
-------             -----------                                      -------------
CHAR(size)	    Maximum size of 255 characters.           	      Where size is the number of characters to store. 
                                                                  Fixed-length strings. Space padded on right to equal 
																  size characters.
VARCHAR(size)	Maximum size of 255 characters.	                  Where size is the number of characters to store.
                                                                  Variable-length string.
TINYTEXT(size)	Maximum size of 255 characters.	                  Where size is the number of characters to store.
TEXT(size)	    Maximum size of 65,535 characters.	              Where size is the number of characters to store.
MEDIUMTEXT(size Maximum size of 16,777,215 characters.	          Where size is the number of characters to store.
LONGTEXT(size)	Maximum size of 4GB or 4,294,967,295 characters.  Where size is the number of characters to store.
BINARY(size)	Maximum size of 255 characters.	                  Where size is the number of binary characters to store. 
                                                                  Fixed-length strings. Space padded on right to equal 
																  size characters.  (introduced in MySQL 4.1.2)
VARBINARY(size)	Maximum size of 255 characters.                   Where size is the number of characters to store. 
                                                                  Variable-length string.(introduced in MySQL 4.1.2)

4.Large Object Data Types (LOB) Data Types:
...........................................

Data Type
 Syntax	       Maximum Size
 -------       ------------
TINYBLOB	Maximum size of 255 bytes.
BLOB(size)	Maximum size of 65,535 bytes.
MEDIUMBLOB	Maximum size of 16,777,215 bytes.
LONGTEXT	Maximum size of 4gb or 4,294,967,295 characters.
  
-> How to install MySQL:-
   --------------------
Download MySQL:
--------------
Follow these steps:

> Go to MySQL official website http://www.mysql.com/downloads/
> Choose the version number for MySQL community server which you want.

Installing MySQL on Windows:
---------------------------
Your downloaded MySQL is neatly packaged with an installer. Download the installer package, 
unzip it anywhere and run setup.exe.

By default, this process will install everything under C:\mysql.

Verify MySQL installation:
--------------------------
Once MySQL has been successfully installed, the base tables have been initialized, and the server has been started, 
you can verify its working via some simple tests.

Open your MySQL Command Line Client, it should be appeared with a mysql> prompt. If you have set any password,
write your password here. Now, you are connected to the MySQL server and you can execute all the SQL command at mysql>
prompt as follows:

For example: Check the already created databases with show databases command:

What is Primary key:
-------------------
A primary key is a single field or combination of fields that contains a unique record. It must be filled.
None of the field of primary key can contain a null value. A table can have only one primary key.


=> MYSQL DATABASE:-
   =============== 
   
MySQL Create Database:
------======---------
You can create a MySQL database by using MySQL Command Line Client.

Open the MySQL console and write down password, if you set one while installation. You will get the following:

syntax: CREATE DATABASE database_name;
Example: CREATE DATABASE employees;  
 
MySQL SELECT Database:
------======---------
SELECT Database is used in MySQL to select a particular database to work with. 
This query is used when multiple databases are available with MySQL Server.

You can use SQL command USE to select a particular database.

Syntax:  USE database_name;  
Example: USE customers;  

MySQL Drop Database:
-----======----------
You can drop/delete/remove a MySQL database easily with the MySQL command. You should be careful while 
deleting any database because you will lose your all the data available in your database.

Syntax:  DROP DATABASE database_name;  
Example: DROP DATABASE employees;  

=> TABLE & VIEW:-
   ============

-> MySQL CREATE TABLE:
   ------======-------
The MySQL CREATE TABLE command is used to create a new table into the database.
A table creation command requires three things:

Name of the table
Names of fields
Definitions for each field

Syntax:   CREATE TABLE table_name (column_name column_type...);   
Example:  CREATE TABLE cus_tbl(  cus_id INT NOT NULL AUTO_INCREMENT,  
                                 cus_firstname VARCHAR(100) NOT NULL,  
                                 cus_surname VARCHAR(100) NOT NULL,  
                                 PRIMARY KEY ( cus_id ) ); 
								 
see the table: SELECT* FROM cus_tbl; 
           
Note:
----

Here, NOT NULL is a field attribute and it is used because we don't want this field to be NULL. 
If you will try to create a record with NULL value, then MySQL will raise an error.
The field attribute AUTO_INCREMENT specifies MySQL to go ahead and add the next available number 
to the id field.PRIMARY KEY is used to define a column as primary key. You can use multiple columns separated
by comma to define a primary key.

-> MySQL ALTER Table:
   -----======------
MySQL ALTER statement is used when you want to change the name of your table or any table field. 
It is also used to add or delete an existing column in a table.

The ALTER statement is always used with "ADD", "DROP" and "MODIFY" commands according to the situation.

1) ADD a column in the table:
----------------------------
Syntax:     ALTER TABLE table_name  
            ADD new_column_name column_definition  
            [ FIRST | AFTER column_name ];  

Parameters:
----------
table_name               : It specifies the name of the table that you want to modify.

new_column_name          : It specifies the name of the new column that you want to add to the table.

column_definition        : It specifies the data type and definition of the column (NULL or NOT NULL, etc).

FIRST | AFTER column_name: It is optional. It tells MySQL where in the table to create the column. 
                           If this parameter is not specified, the new column will be added to the end of the table.

Example:
-------

In this example, we add a new column "cus_age" in the existing table "cus_tbl".

Use the following query to do this:    ALTER TABLE cus_tbl  
                                       ADD cus_age varchar(40) NOT NULL;  
see the table:  SELECT* FROM cus_tbl; 									   
  
-> MySQL TRUNCATE Table:
   -----=========------
MYSQL TRUNCATE statement removes the complete data without removing its structure.

The TRUNCATE TABLE statement is used when you want to delete the complete data from a table without 
removing the table structure.

Syntax:   TRUNCATE TABLE  table_name;  
Example:  TRUNCATE TABLE  cus_tbl;  

see the table: SELECT* FROM cus_tbl; 

-> MySQL DROP Table:
   ------====------
MYSQL DROP table statement removes the complete data with structure.

Syntax:  DROP TABLE  table_name;  
Example: DROP TABLE  cus_tbl; 
 
MySQL TRUNCATE Table vs DROP Table:
----------------------------------
You can also use DROP TABLE command to delete complete table but it will remove complete table data and 
structure both. You need to re-create the table again if you have to store some data. 
But in the case of TRUNCATE TABLE, it removes only table data not structure. You don't need to re-create 
the table again because the table structure already exists.

-> MySQL View:
   -----=====
In MySQL, View is a virtual table created by a query by joining one or more tables.

MySQL Create VIEW:
-----------------
A VIEW is created by SELECT statements. SELECT statements are used to take data from the source table to make a VIEW.

Syntax: CREATE [OR REPLACE] VIEW view_name AS  
        SELECT columns  
        FROM tables  
        [WHERE conditions];  
Example:CREATE VIEW trainer AS  
        SELECT course_name, course_trainer   
        FROM courses;  
Parameters:

OR REPLACE       : It is optional. It is used when a VIEW already exist. If you do not specify this clause and 
                   the VIEW already exists, the CREATE VIEW statement will return an error.

view_name        : It specifies the name of the VIEW that you want to create in MySQL.

WHERE conditions : It is also optional. It specifies the conditions that must be met for the records to be 
                   included in the VIEW.

To see the created VIEW:
-----------------------
Syntax: SELECT * FROM view_name;  
Example:SELECT * FROM trainer;

MySQL Update VIEW:
-----------------
In MYSQL, the ALTER VIEW statement is used to modify or update the already created VIEW without dropping it.

Syntax:   ALTER VIEW view_name AS  
          SELECT columns  
          FROM table  
          WHERE conditions;  
Example:  ALTER VIEW trainer AS  
          SELECT course_name, course_trainer, course_id  
          FROM courses;

MySQL Drop VIEW:
---------------
You can drop the VIEW by using the DROP VIEW statement.

Syntax:   DROP VIEW [IF EXISTS] view_name;  
Example:  DROP VIEW trainer; 

Parameters:

view_name: It specifies the name of the VIEW that you want to drop.

IF EXISTS: It is optional. If you do not specify this clause and the VIEW doesn't exist, the DROP VIEW statement 
will return an error.

=> MYSQL Queries:-
   ============= 		  
  
    MySQL Queries:
	--------------
   A list of commonly used MySQL queries to create database, use database, create table, insert record, update 
   record, delete record, select record, truncate table and drop table are given below.

1) MySQL Create Database

MySQL create database is used to create database. 
For example:
create database db1;   

2) MySQL Select/Use Database

MySQL use database is used to select database. 
For example:
use db1;   

3) MySQL Create Query:

MySQL create query is used to create a table, view, procedure and function. 
For example:

CREATE TABLE customers    
(id int(10),    
 name varchar(50),    
 city varchar(50),  
 PRIMARY KEY (id )    
);    

4) MySQL Alter Query:

MySQL alter query is used to add, modify, delete or drop colums of a table. Let's see a query to add column 
in customers table:

ALTER TABLE customers   
ADD age varchar(50);    

5) MySQL Insert Query:

MySQL insert query is used to insert records into table. For example:

insert into customers values(101,'rahul','delhi');  

6) MySQL Update Query:

MySQL update query is used to update records of a table. For example:

update customers set name='bob', city='london' where id=101;  


7) MySQL Delete Query:

MySQL update query is used to delete records of a table from database. For example:

delete from customers where id=101;  

8) MySQL Select Query:

Oracle select query is used to fetch records from database. For example:

SELECT * from customers;  

9) MySQL Truncate Table Query:

MySQL update query is used to truncate or remove records of a table. It doesn't remove structure. For example:

truncate table customers;  

10) MySQL Drop Query:

MySQL drop query is used to drop a table, view or database. It removes structure and data of a table if you drop table. 
For example:

drop table customers;  


-> MySQL INSERT Statement:-
   ------=======---------
MySQL INSERT statement is used to insert data in MySQL table within the database. We can insert single or 
multiple records using a single query in MySQL.

Syntax:

The SQL INSERT INTO command is used to insert data in MySQL table. Following is a generic syntax:

INSERT INTO table_name ( field1, field2,...fieldN )  
VALUES  
( value1, value2,...valueN );  
Field name is optional. If you want to specify partial values, field name is mandatory.

Syntax for all fields:

INSERT INTO table_name VALUES ( value1, value2,...valueN );  
MySQL INSERT Example 1: for all fields
If you have to store all the field values, either specify all field name or don't specify any field.

Example:

INSERT INTO emp VALUES (7, 'Sonoo', 40000);  
Or,

INSERT INTO emp(id,name,salary) VALUES (7, 'Sonoo', 40000);  
MySQL INSERT Example 2: for partial fields
In such case, it is mandatory to specify field names.

INSERT INTO emp(id,name) VALUES (7, 'Sonoo');  
MySQL INSERT Example 3: inserting multiple records
Here, we are going to insert record in the "cus_tbl" table of "customers" database.

INSERT INTO cus_tbl  
(cus_id, cus_firstname, cus_surname)  
VALUES  
(5, 'Ajeet', 'Maurya'),  
(6, 'Deepika', 'Chopra'),  
(7, 'Vimal', 'Jaiswal'); 

-> MySQL UPDATE Query:-
   ------======------
MySQL UPDATE statement is used to update data of the MySQL table within the database. 
It is used when you need to modify the table.

Syntax:

Following is a generic syntax of UPDATE command to modify data into the MySQL table:

UPDATE table_name SET field1=new-value1, field2=new-value2  
[WHERE Clause]  

Note:

One or more field can be updated altogether.
Any condition can be specified by using WHERE clause.
You can update values in a single table at a time.
WHERE clause is used to update selected rows in a table.

Example:

Here, we have a table "cus_tbl" within the database "customers". We are going to update the data within the table "cus_tbl".

This query will update cus_surname field for a record having cus_id as 5.

UPDATE cus_tbl  
SET cus_surname = 'Ambani'  
WHERE cus_id = 5; 


->MySQL DELETE Statement:-
  -----=======-----------
MySQL DELETE statement is used to delete data from the MySQL table within the database. By using delete statement, we can delete records on the basis of conditions.

Syntax:

DELETE FROM table_name   
WHERE  
(Condition specified);  

Example:

DELETE FROM cus_tbl  
WHERE cus_id = 6;  
Output:  

-> MySQL SELECT Statement:-
   ------======----------
The MySQL SELECT statement is used to fetch data from the one or more tables in MySQL. We can retrieve records 
of all fields or specified fields.

Syntax for specified fields:

SELECT expressions  
FROM tables  
[WHERE conditions];  

Syntax for all fields:

SELECT * FROM tables [WHERE conditions];  
MySQL SELECT Example 1: for specified fields
In such case, it is mandatory to specify field names.

Example:

SELECT officer_name, address  
FROM officers  

Execute the following query:

SELECT officers.officer_id, students.student_name  
FROM students  
INNER JOIN officers  
ON students.student_id = officers.officer_id  
ORDER BY student_id;  

=> MYSQL CLAUSES:-
  ==============
  
-> MySQL WHERE Clause:
   -----======-------
MySQL WHERE Clause is used with SELECT, INSERT, UPDATE and DELETE clause to filter the results. 
It specifies a specific position where you have to do the operation.

Syntax:

WHERE conditions;  

Parameter:

conditions: It specifies the conditions that must be fulfilled for records to be selected.

MySQL WHERE Clause with single condition:

SELECT *  
FROM officers  
WHERE address = 'Mau';  

MySQL WHERE Clause with AND condition:

In this example, we are retrieving data from the table "officers" with AND condition.

Execute the following query:

SELECT *  
FROM officers  
WHERE address = 'Lucknow'  
AND officer_id < 5;  

WHERE Clause with OR condition:

Execute the following query:

SELECT *  
FROM officers  
WHERE address = 'Lucknow'  
OR address = 'Mau';  

MySQL WHERE Clause with combination of AND & OR conditions:

You can also use the AND & OR conditions altogether with the WHERE clause.

See this example:

Execute the following query:

SELECT *  
FROM officers  
WHERE (address = 'Mau' AND officer_name = 'Ajeet')  
OR (officer_id < 5);  

-> MySQL Distinct Clause:-
   ------========--------
MySQL DISTINCT clause is used to remove duplicate records from the table and fetch only the unique records. 
The DISTINCT clause is only used with the SELECT statement.

Syntax:

SELECT DISTINCT expressions  
FROM tables  
[WHERE conditions];  

Parameters

expressions: specify the columns or calculations that you want to retrieve.

tables: specify the name of the tables from where you retrieve records. There must be at least one table listed 
in the FROM clause.

WHERE conditions: It is optional. It specifies the conditions that must be met for the records to be selected.

Note:

If you put only one expression in the DISTINCT clause, the query will return the unique values for that expression.
If you put more than one expression in the DISTINCT clause, the query will retrieve unique combinations for the 
expressions listed.
In MySQL, the DISTINCT clause doesn't ignore NULL values. So if you are using the DISTINCT clause in your SQL statement, 
your result set will include NULL as a distinct value.

MySQL DISTINCT Clause with single expression:

If you use a single expression then the MySQL DISTINCT clause will return a single field with unique records 
(no duplicate record).

MySQL DISTINCT Clause with multiple expressions
If you use multiple expressions with DISTINCT Clause then MySQL DISTINCT clause will remove duplicates from
 more than one field in your SELECT statement.

Use the following query:

SELECT DISTINCT officer_name, address  
FROM officers;  

-> MySQL FROM Clause:
   -----======-------
The MySQL FROM Clause is used to select some records from a table. It can also be used to retrieve
 records from multiple tables using JOIN condition.

Syntax:

FROM table1  
[ { INNER JOIN | LEFT [OUTER] JOIN| RIGHT [OUTER] JOIN } table2  
ON table1.column1 = table2.column1 ]  

Parameters

table1 and table2: specify tables used in the MySQL statement. The two tables are joined based on 
table1.column1 = table2.column1.

Note:

If you are using the FROM clause in a MySQL statement then at least one table must have been selected.
If you are using two or more tables in the MySQL FROM clause, these tables are generally joined using INNER or OUTER joins.
MySQL FROM Clause: Retrieve data from one table
The following query specifies how to retrieve data from a single table.

Use the following Query:

SELECT *  
FROM officers  
WHERE officer_id <= 3;  


next →← prev
MySQL FROM Clause
The MySQL FROM Clause is used to select some records from a table. It can also be used to retrieve records from multiple tables using JOIN condition.

Syntax:

FROM table1  
[ { INNER JOIN | LEFT [OUTER] JOIN| RIGHT [OUTER] JOIN } table2  
ON table1.column1 = table2.column1 ]  
Parameters
table1 and table2: specify tables used in the MySQL statement. The two tables are joined based on table1.column1 = table2.column1.

Note:

If you are using the FROM clause in a MySQL statement then at least one table must have been selected.
If you are using two or more tables in the MySQL FROM clause, these tables are generally joined using INNER or OUTER joins.
MySQL FROM Clause: Retrieve data from one table
The following query specifies how to retrieve data from a single table.

Use the following Query:

SELECT *  
FROM officers  
WHERE officer_id <= 3;  

MySQL from clause 1:
------------------

MySQL FROM Clause: Retrieve data from two tables with inner join
Let's take an example to retrieve data from two tables using INNER JOIN.

Here, we have two tables "officers" and "students".

Execute the following query:

SELECT officers.officer_id, students.student_name  
FROM students  
INNER JOIN officers  
ON students.student_id = officers.officer_id;  

MySQL FROM Clause: Retrieve data from two tables using outer join

Execute the following query:

SELECT officers.officer_id, students.student_name  
FROM officers  
LEFT OUTER JOIN students  
ON officers.officer_id = students.student_id;  

-> MySQL ORDER BY Clause:-
   -----==========-------
The MYSQL ORDER BY Clause is used to sort the records in ascending or descending order.

Syntax:

SELECT expressions  
FROM tables  
[WHERE conditions]  
ORDER BY expression [ ASC | DESC ];  

Parameters

expressions: It specifies the columns that you want to retrieve.

tables: It specifies the tables, from where you want to retrieve records. There must be at least one table 
         listed in the FROM clause.

WHERE conditions: It is optional. It specifies conditions that must be fulfilled for the records to be selected.

ASC: It is optional. It sorts the result set in ascending order by expression (default, if no modifier is provider).

DESC: It is also optional. It sorts the result set in descending order by expression.

Note: You can use MySQL ORDER BY clause in a SELECT statement, SELECT LIMIT statement, and DELETE LIMIT statement.
MySQL ORDER BY: without using ASC/DESC attribute

If you use MySQL ORDER BY clause without specifying the ASC and DESC modifier then by default you will get 
the result in ascending order.

Execute the following query:

SELECT *  
FROM officers  
WHERE address = 'Lucknow'  
ORDER BY officer_name;  

MySQL ORDER BY: with ASC attribute:

Let's take an example to retrieve the data in ascending order.

Execute the following query:

SELECT *  
FROM officers  
WHERE address = 'Lucknow'  
ORDER BY officer_name ASC;  

MySQL ORDER BY: with DESC attribute:

SELECT *  
FROM officers  
WHERE address = 'Lucknow'  
ORDER BY officer_name DESC;  
  
MySQL ORDER BY: using both ASC and DESC attributes:

Execute the following query:

SELECT officer_name, address  
FROM officers  
WHERE officer_id < 5  
ORDER BY officer_name DESC, address ASC;  


-> MySQL GROUP BY Clause:-
   ------=========-------
The MYSQL GROUP BY Clause is used to collect data from multiple records and group the result by one or more column. 
It is generally used in a SELECT statement.

You can also use some aggregate functions like COUNT, SUM, MIN, MAX, AVG etc. on the grouped column.

Syntax:

SELECT expression1, expression2, ... expression_n,   
aggregate_function (expression)  
FROM tables  
[WHERE conditions]  
GROUP BY expression1, expression2, ... expression_n;  

Parameters

expression1, expression2, ... expression_n: It specifies the expressions that are not encapsulated within 
an aggregate function and must be included in the GROUP BY clause.

aggregate_function: It specifies a function such as SUM, COUNT, MIN, MAX, or AVG etc. tables: 
                    It specifies the tables, from where you want to retrieve the records. There must be
                    at least one table listed in the FROM clause.

WHERE conditions: It is optional. It specifies the conditions that must be fulfilled for the records to be selected.

(i) MySQL GROUP BY Clause with COUNT function:
----------------------------------------------

Consider a table named "officers" table, having the following records.

Execute the following query:

SELECT address, COUNT(*)  
FROM   officers   
GROUP BY address;   

(ii) MySQL GROUP BY Clause with SUM function:
--------------------------------------------
SELECT emp_name, SUM(working_hours) AS "Total working hours"  
FROM employees  
GROUP BY emp_name;  

iii) MySQL GROUP BY Clause with MIN function:
---------------------------------------------
The following example specifies the minimum working hours of the employees form the table "employees".

Execute the following query:

SELECT emp_name, MIN(working_hours) AS "Minimum working hour"  
FROM employees  
GROUP BY emp_name;  

(iv) MySQL GROUP BY Clause with MAX function:
---------------------------------------------
The following example specifies the maximum working hours of the employees form the table "employees".

Execute the following query:

SELECT emp_name, MAX (working_hours) AS "Minimum working hour"  
FROM employees  
GROUP BY emp_name;  
  
(v) MySQL GROUP BY Clause with AVG function:
---------------------------------------------
The following example specifies the average working hours of the employees form the table "employees".
Execute the following query:

SELECT emp_name, AVG(working_hours) AS "Average working hour"  
FROM employees  
GROUP BY emp_name;  
 
-> MySQL HAVING Clause:-
   -----=======-------
MySQL HAVING Clause is used with GROUP BY clause. It always returns the rows where condition is TRUE.

Syntax:

SELECT expression1, expression2, ... expression_n,   
aggregate_function (expression)  
FROM tables  
[WHERE conditions]  
GROUP BY expression1, expression2, ... expression_n  
HAVING condition;  

Parameters

aggregate_function: It specifies any one of the aggregate function such as SUM, COUNT, MIN, MAX, or AVG.

expression1, expression2, ... expression_n: It specifies the expressions that are not 
encapsulated within an aggregate function and must be included in the GROUP BY clause.

WHERE conditions: It is optional. It specifies the conditions for the records to be selected.

HAVING condition: It is used to restrict the groups of returned rows. It shows only those groups in 
result set whose conditions are TRUE.

HAVING Clause with SUM function:

SELECT emp_name, SUM(working_hours) AS "Total working hours"  
FROM employees  
GROUP BY emp_name  
HAVING SUM(working_hours) > 5;  

=> MYSQL CONDITIONS:
  ==================

->MySQL AND Condition:
  ------====---------
The MySQL AND condition is used with SELECT, INSERT, UPDATE or DELETE statements to test two or more 
conditions in an individual query.

Syntax:

WHERE condition1  
AND condition2  
...  
AND condition_n;  
Parameter explanation:
condition1, condition2, ... condition_n: Specifies all conditions that must be fulfilled for the records to be selected.

MySQL AND Example
The following example specifies how to use the AND condition in MySQL with SELECT statement.
 
SELECT *  
FROM cus_tbl  
WHERE cus_firstname = 'Ajeet'  
AND cus_id > 3;  

MySQL OR Condition:
------------------
The MySQL OR condition specifies that if you take two or more conditions then one of the conditions 
must be fulfilled to get the records as result.

Syntax:

WHERE condition1  
OR condition2  
...  
OR condition_n;  
Parameter explanation
condition1, condition2, ... condition_n: Specifies all conditions that must be fulfilled for the records to be selected.

MySQL OR Example
The following example specifies how to use the OR condition in MySQL with SELECT statement.

Consider a table "cus_tbl", having the following data: 
 SELECT *  
FROM cus_tbl  
WHERE cus_firstname = 'Ajeet'  
OR cus_id > 100;  

MySQL AND & OR condition:
------------------------
In MySQL, you can use AND & OR condition both together with the SELECT, INSERT, UPDATE and DELETE statement.
 While combine these conditions, you must be aware where to use round brackets so that the database know 
 the order to evaluate each condition.

Syntax:

WHERE condition1  
AND condition2  
...  
OR condition_n;  
Parameter
condition1, condition2, ... condition_n: It specifies the conditions that are evaluated to determine if the 
records will be selected.

MySQL AND OR Example
Consider a table "students", having the following data.
 
Execute the following query:

SELECT *  
FROM students  
WHERE (course_name = 'Java' AND student_name = 'Aryan')  
OR (student_id < 2);  
 
MySQL LIKE condition:
--------------------
In MySQL, LIKE condition is used to perform pattern matching to find the correct result. It is used in 
SELECT, INSERT, UPDATE and DELETE statement with the combination of WHERE clause.

Syntax:

expression LIKE pattern [ ESCAPE 'escape_character' ]  
Parameters
expression: It specifies a column or field.

pattern: It is a character expression that contains pattern matching.

escape_character: It is optional. It allows you to test for literal instances of a wildcard character 
such as % or _. If you do not provide the escape_character, MySQL assumes that "\" is the escape_character.

MySQL LIKE Examples:

1) Using % (percent) Wildcard:
 
 SELECT officer_name  
FROM officers  
WHERE address LIKE 'Luck%';  

2) Using _ (Underscore) Wildcard:
We are using the same table "officers" in this example too.

Execute the following query:

SELECT officer_name  
FROM officers  
WHERE address LIKE 'Luc_now';

3) Using NOT Operator:
You can also use NOT operator with MySQL LIKE condition. This example shows the use of % wildcard with the NOT Operator.

SELECT officer_name  
FROM officers  
WHERE address NOT LIKE 'Luck%'; 

-> MySQL IN Condition:
---------------------
The MySQL IN condition is used to reduce the use of multiple OR conditions in a SELECT, INSERT, UPDATE and DELETE statement.

Syntax:

expression IN (value1, value2, .... value_n);  
Parameters
expression: It specifies a value to test.

value1, value2, ... or value_n: These are the values to test against expression. If any of these values matches 
expression, then the IN condition will evaluate to true. This is a quick method to test if any one of the values 
matches expression.

MySQL IN Example
SELECT *  
FROM officers  
WHERE officer_name IN ('Ajeet', 'Vimal', 'Deepika');  

Execute the following query:

SELECT *  
FROM officers  
WHERE officer_name = 'Ajeet'  
OR officer_name = 'Vimal'  
OR officer_name = 'Deepika'; 

->MySQL NOT Condition:
---------------------
The MySQL NOT condition is opposite of MySQL IN condition. It is used to negate a condition in a 
SELECT, INSERT, UPDATE or DELETE statement.

Syntax:

NOT condition  
Parameter
condition: It specifies the conditions that you want to negate.

MySQL NOT Operator with IN condition
Consider a table "officers", having the following data. 

SELECT *  
FROM officers  
WHERE officer_name NOT IN ('Ajeet','Vimal','Deepika');  

MySQL NOT Operator with IS NULL condition:

Execute the following query:

SELECT *  
FROM officers  
WHERE officer_name IS NOT NULL;  
 
MySQL NOT Operator with LIKE condition:

We are taking the same table "officer" for this operation also:

Execute the following query:

SELECT *  
FROM officers  
WHERE officer_name NOT LIKE 'A%';  

MySQL NOT Operator with BETWEEN condition:

We are taking the same table "officer" for this operation also:

Execute the following query:

SELECT *  
FROM officers  
WHERE officer_id NOT BETWEEN 3 AND 5;  
 
->MySQL IS NULL Condition:
--------------------------
MySQL IS NULL condition is used to check if there is a NULL value in the expression. 
It is used with SELECT, INSERT, UPDATE and DELETE statement.

Syntax:

expression IS NULL  
Parameter
expression: It specifies a value to test if it is NULL value.

Consider a table "officers" having the following data.

Execute the following query:

SELECT *  
FROM officers  
WHERE officer_name IS NULL;  :

MySQL IS NOT NULL Condition:

MySQL IS NOT NULL condition is used to check the NOT NULL value in the expression. It is used with 
SELECT, INSERT, UPDATE and DELETE statements.

Syntax:

expression IS NOT NULL  
Parameter
expression: It specifies a value to test if it is not NULL value.

MySQL IS NOT NULL Example
Consider a table "officers" having the following data.

Execute the following query:

SELECT *  
FROM officers  
WHERE officer_name IS NOT NULL;  

->MySQL BETWEEN Condition:
   ----------------------
The MYSQL BETWEEN condition specifies how to retrieve values from an expression within a specific range. 
It is used with SELECT, INSERT, UPDATE and DELETE statement.

Syntax:

expression BETWEEN value1 AND value2;    
Parameters
expression: It specifies a column.

value1 and value2: These values define an inclusive range that expression is compared to.

Let's take some examples:

(i) MySQL BETWEEN condition with numeric value:

SELECT *  
FROM officers  
WHERE officer_id BETWEEN 1 AND 3;  
 
(ii) MySQL BETWEEN condition with date:

MySQL BETWEEN condition also facilitates you to retrieve records according to date.

See this example: 
SELECT *  
FROM employees  
WHERE working_date BETWEEN CAST ('2015-01-24' AS DATE) AND CAST ('2015-01-25' AS DATE);  

=> MYSQL JOINS:-
 ==============
 
 MySQL JOINS:
 -----------
MySQL JOINS are used with SELECT statement. It is used to retrieve data from multiple tables.
 It is performed whenever you need to fetch records from two or more tables.

There are three types of MySQL joins:

> MySQL INNER JOIN (or sometimes called simple join)
> MySQL LEFT OUTER JOIN (or sometimes called LEFT JOIN)
> MySQL RIGHT OUTER JOIN (or sometimes called RIGHT JOIN)

MySQL Inner JOIN (Simple Join)

The MySQL INNER JOIN is used to return all rows from multiple tables where the join condition is satisfied. 
It is the most common type of join.

Syntax:

SELECT columns  
FROM table1   
INNER JOIN table2  
ON table1.column = table2.column;  
Image representation:


Let's take an example:

SELECT officers.officer_name, officers.address, students.course_name  
FROM officers   
INNER JOIN students  
ON officers.officer_id = students.student_id;  

MySQL Left Outer Join:

The LEFT OUTER JOIN returns all rows from the left hand table specified in the ON condition and 
only those rows from the other table where the join condition is fulfilled.

Syntax:

SELECT columns  
FROM table1  
LEFT [OUTER] JOIN table2  
ON table1.column = table2.column;  

SELECT  officers.officer_name, officers.address, students.course_name  
FROM officers  
LEFT JOIN students  
ON officers.officer_id = students.student_id;  

MySQL Right Outer Join:

The MySQL Right Outer Join returns all rows from the RIGHT-hand table specified in the ON condition and only those rows from the other table where he join condition is fulfilled.

Syntax:

SELECT columns  
FROM table1  
RIGHT [OUTER] JOIN table2  
ON table1.column = table2.column;

SELECT officers.officer_name, officers.address, students.course_name, students.student_name  
FROM officers  
RIGHT JOIN students  
ON officers.officer_id = students.student_id;  

=> AGREGATE FUNCTIONS:-
  ====================
  1) MySQL count() Function:
    -----------------------
The MySQL count() function is used to return the count of an expression. It is used when you need to 
count some records of your table.

Syntax:

SELECT COUNT (aggregate_expression)  
FROM table_name  
[WHERE conditions];  
Parameter explanation
aggregate_expression: It specifies the column or expression whose NON-NULL values will be counted.

table_name: It specifies the tables, from where you want to retrieve records. There must be at least one table listed in the FROM clause.

WHERE conditions: It is optional. It specifies the conditions that must be fulfilled for the records to be selected.

MySQL count() function example
Consider a table named "officers", having the following data.

Execute the following query:

SELECT COUNT(officer_name)  
FROM officers;

2) MySQL sum() function:
-----------------------
The MySQL sum() function is used to return the total summed value of an expression.

Syntax:

SELECT SUM(aggregate_expression)  
FROM tables  
[WHERE conditions];  
Parameter explanation
aggregate_expression: It specifies the column or expression that will be summed.

table_name          : It specifies the tables, from where you want to retrieve records. 
                        There must be at least one table listed in the FROM clause.

WHERE conditions    : It is optional. It specifies the conditions that must be fulfilled for the records to be selected.

MySQL sum() function example
Consider a table named "employees", having the following data.

Execute the following query:

SELECT SUM (working_hours) AS "Total working hours"  
FROM employees  
WHERE working_hours > 5;

3)MySQL avg() function:
-----------------------
The MySQL avg() function is used to return the average value of an expression.

Syntax:

SELECT AVG(aggregate_expression)  
FROM tables  
[WHERE conditions];  
Parameter explanation
aggregate_expression: It specifies the column or expression that will be averaged.

table_name: It specifies the tables, from where you want to retrieve records. There must be at 
least one table listed in the FROM clause.

WHERE conditions: It is optional. It specifies the conditions that must be fulfilled for the records to be selected.

MySQL avg() function example
Consider a table named "employees", having the following data.

Execute the following query:

SELECT AVG(working_hours) AS "Avg working hours"  
FROM employees  
WHERE working_hours > 5;     
  
4)MySQL min() function:
----------------------
The MySQL min() function is used to return the minimum value from the table.

Syntax:

SELECT MIN (aggregate_expression)  
FROM tables  
[WHERE conditions];
  
Parameter explanation

aggregate_expression: It specifies the column or expression, from which the minimum value will be returned.

table_name: It specifies the tables, from where you want to retrieve records. There must be at least one
 table listed in the FROM clause.

WHERE conditions: It is optional. It specifies the conditions that must be fulfilled for the records to be selected.

MySQL min() function example
Consider a table named "employees", having the following data.

Execute the following query:

SELECT MIN (working_hours) AS "Minimum working hours"  
FROM employees;    

5)MySQL max() function:
----------------------
The MySQL max() function is used to return the maximum value of an expression.
 It is used when you need to get the maximum value from your table.

Syntax:

SELECT MAX(aggregate_expression)  
FROM tables  
[WHERE conditions]; 
 
Parameter explanation

aggregate_expression: It specifies the column or expression, from which the maximum value will be returned.

table_name: It specifies the tables, from where you want to retrieve records. There must be at least 
one table listed in the FROM clause.

WHERE conditions: It is optional. It specifies the conditions that must be fulfilled for the records to be selected.

MySQL max() function example
Consider a table named "employees", having the following data.

Execute the following query:

SELECT MAX (working_hours) AS "Maximum working hours"  
FROM employees;    

6)MySQL first function:
-----------------------
The MySQL first function is used to return the first value of the selected column.
 Here, we use limit clause to select first record or more.

Syntax:

SELECT column_name  
FROM table_name  
LIMIT 1;  

MySQL first function example

To SELECT FIRST element:

Consider a table named "officers", having the following data.

Execute the following query:

SELECT officer_name   
FROM officers  
LIMIT 1;  
Output:

To SELECT FIRST two records

SELECT officer_name   
FROM officers  
LIMIT 2;  

7)MySQL last function:
----------------------
MySQL last function is used to return the last value of the selected column.

Syntax:

SELECT column_name  
FROM table_name  
ORDER BY column_name DESC  
LIMIT 1;  

MySQL last function example
Consider a table "officers" having the following data.

Execute the following query:

SELECT officer_name   
FROM officers  
ORDER BY officer_id DESC  
LIMIT 1;  
This query will return the last officer_name ordering by officer_id.

Return the last officer_name ordering by officer_name:

SELECT officer_name   
FROM officers  
ORDER BY officer_name DESC  
LIMIT 1;

=> DIFFERENCES:
  ============
MariaDB  vs  MySQL:
------------------
The main goal of MariaDB development is to be a drop in replacement of MySQL to provide greater

 features and better performance. MariaDB is based on corresponding version of MySQL. It means, MariaDB version
 is released after the release of MongoDB corresponding version with some added bug fixes, additional storage engines,
 new features, and performance improvements.

Following is a list of differences between them:

	MariaDB                                      	MySQL
    -------                                        -------
1)	MariaDB is purely open-source.	                  1) MySQL uses dual licensing model.
2)	MariaDB is released under GPL, LGPL, or BSD.	  2) MySQL is released under the term of GNU (General Public License).
3)	It is true that MariaDB is growing day by day
    but it has yet to prove itself.	                  3) MySQL is the most used database worldwide right now.
4)	The future of MariaDB is uncertain because it
    was developed by a small company.	              4) MySQL was developed by oracle corporation which is not a new 
	                                                   name in the field of database.
5)	Password complexity plugin feature is not 
    available in MariaDB.	                          5) Password complexity plugin feature is available in MySQL.
6)	Memcached interface is not available 
    in MariaDB yet.	                                  6) Memcached interface is not available in MySQL  

PostgreSQL vs MySQL:
-------------------
Although, PostgreSQL and MySQL both are very popular relational database management systems (RDBMS)
 but there are radical differences between them.

	PostgreSQL	                                                 MySQL
	----------                                                   ------
1)	PostgreSQL is more densely featured database system. 
    It is described as an open source version of Oracle.	    1) MySQL is known for its fast speed but it is less
                                                                   featured than PostgreSQL.
2)	PostgreSQL is popular among the developers who
    come from the Oracle or SQL Server background.	            2) MySQL is popular among the developers because of its
                                                                   fast speed and ease of use.
3)	PostgreSQL is a unified database server having a 
    single storage engine.	                                    3) MySQL has a multi-layer structure having a set of 
	                                                               storage engines.
4)	PostgreSQL is developed with a focus on  
    features and standards.	                                    4) MySQLl is developed with a focus on speed.
5)	PostgreSQL is generally used on 
    large and complex operations. It is more reliable on them.	5) MySQLis generally used on simple operations.
6)	PostgreSQL provides reliability, data integrity, 
    and developers-friendly features.	                        6) MySQL is generally used with PHP to deal web pages 
	                                                               and optimize simple queries.

 
 
 
 
1) What is MySQL?
----------------
   MySQL is a multithreaded, multi-user SQL database management system which has more than 11 million installations. 
   This is the world's second most popular and widely used open source database.

2) In which language MySQL is written?
-------------------------------------
   MySQL is written in C and C++ and its SQL parser is written in yacc.

3) What are the technical specification of MySQL?
-------------------------------------------------
   MySQL has the following technical specifications -

     > Flexible structure
     > High performance
     > Manageable and easy to use
     > Replication and high availability
     > Security and storage management
4) What is the difference between MySQL and SQL?
-----------------------------------------------
   SQL is known as standard query language. It is used to interact with the database like MySQL. 
   MySQL is a database that stores various types of data and keeps it safe.

   A PHP script is required to store and retrieve the values inside the database.

5) What is the difference between database and table?
-----------------------------------------------------
   There is a major difference between a database and a table. The differences are as follows:

   Tables are a way to represent the division of data in a database while, database is a collection of tables and data.
   Tables are used to group the data in relation with each other and create a dataset. 
   This dataset will be used in the database. The data which are stored in the table in any form is a part of the database, 
   but the reverse is not true.
   
6) Why do we use MySQL database server?
---------------------------------------
   The MySQL database server is very fast, reliable and easy to use. You can easily use and modify the software. 
   MySQL software can be downloaded free of cost from the internet.

7) What are the different tables present in MySQL?
--------------------------------------------------
   There are many tables that remain present by default. But, MyISAM is the default database engine used in MySQL. 
   There are five types of tables that are present:

      > MyISAM
      > Heap
      > Merge
      > INNO DB
      > ISAM
8) What is the difference between CHAR and VARCHAR?
---------------------------------------------------
   A list of differences between CHAR and VARCHAR:

    CHAR and VARCHAR types are different in storage and retrieval.
    CHAR column length is fixed to the length that is declared while creating table. The length value ranges from 1 and 255.
    When CHAR values are stored then they are right padded using spaces to specific length. 
	Trailing spaces are removed when CHAR values are retrieved.
	
9) What is the difference between TRUNCATE and DELETE in MySQL?
---------------------------------------------------------------
    The DELETE command is used to delete data from a table. It only deletes the rows of data from the table while,
    truncate is very dangerous command and should be used carefully because it deletes every row permanently from a table.

10) How many Triggers are possible in MySQL?
--------------------------------------------
    There are only six Triggers allowed to use in MySQL database.

       > Before Insert
       > After Insert
       > Before Update
       > After Update
       > Before Delete
       > After Delete
	   
11) What is heap table?
-----------------------
    Tables that are present in memory is known as HEAP tables. When you create a heap table in MySQL, 
	you should need to specify the TYPE as HEAP. These tables are commonly known as memory tables. 
	They are used for high speed storage on temporary basis. They do not allow BLOB or TEXT fields.

12) What is BLOB and TEXT in MySQL?
-----------------------------------
    BLOB is an acronym stands for binary large object. It is used to hold a variable amount of data.

    There are four types of BLOB.

        >  TINYBLOB
        >  BLOB
        >  MEDIUMBLOB
        >  LONGBLOB
    The differences among all these are the maximum length of values they can hold.

    TEXT is case - insensitive BLOB. TEXT values are non-binary strings (character string). 
	They have a character set and values are stored and compared based on the collation of the character set.

  There are four types of TEXT.

      TINYTEXT
      TEXT
      MEDIUMTEXT
      LONGTEXT
13) What is a trigger in MySQL?
-------------------------------
    A trigger is a set of codes that executes in response to some events.

14) What is the difference between heap table and temporary table?
------------------------------------------------------------------
  1.Heap tables:

        . Heap tables are found in memory. They are used for high speed storage on temporary basis. 
		  They do not allow BLOB or TEXT fields.

        . Heap tables do not support AUTO_INCREMENT.

        . Indexes should be NOT NULL.

  2.Temporary tables:

          The temporary tables are used to keep the temporary data. Sometimes it is very useful in cases 
		  to keep temporary data. Temporary table is deleted after current client session terminates.

Main differences:
-----------------
          The heap tables are shared among clients while temporary tables are not shared.

          Heap tables are just another storage engine, while for temporary tables you need a special privilege 
          (create temporary table).

15) What is the difference between FLOAT and DOUBLE?
----------------------------------------------------
      FLOAT stores floating point numbers with accuracy up to 8 places and allocates 4 bytes, 
      on the other hand DOUBLE stores floating point numbers with accuracy up to 18 places and allocates 8 bytes.

16) What are the advantages of MySQL in comparison to Oracle?
-------------------------------------------------------------
    MySQL is a free, fast, reliable, open source relational database while Oracle is expensive, 
    although they have provided Oracle free edition to attract MySQL users.
    MySQL uses only just under 1 MB of RAM on your laptop while Oracle 9i installation uses 128 MB.
    MySQL is great for database enabled websites while Oracle is made for enterprises.
    MySQL is portable.
	
17) What are the disadvantages of MySQL?
----------------------------------------
    MySQL is not so efficient for large scale databases.
    It does not support COMMIT and STORED PROCEDURES functions version less than 5.0.
    Transactions are not handled very efficiently.
	
18) What is the difference between CHAR and VARCHAR?
----------------------------------------------------
    CHAR and VARCHAR are differ in storage and retrieval.
    CHAR column length is fixed while VARCHAR length is variable.
    The maximum no. of character CHAR data type can hold is 255 character while VARCHAR can hold up to 4000 character.
    CHAR is 50% faster than VARCHAR.
    CHAR uses static memory allocation while VARCHAR uses dynamic memory allocation.
	
19) What is the difference between MySQL_connect and MySQL_pconnect?
--------------------------------------------------------------------
    Mysql_connect:

        It opens a new connection to the database.
        Every time you need to open and close database connection, depending on the request.
        Opens page every time when it loaded.
		
    Mysql_pconnect:

        In Mysql_pconnect, "p" stands for persistent connection so it opens the persistent connection.
        the database connection can not be closed.
        it is more useful if your site has more traffic because there is no need to open and close connection 
		frequently and every time when page is loaded.

20) What does " i_am_a_dummy flag" do in MySQL?
-----------------------------------------------
    The " i_am_a_dummy flag" enables MySQL engine to refuse any UPDATE or DELETE statement to execute if 
	the WHERE clause is not present.

21) How to get the current date in MySQL?
-----------------------------------------
    To get current date, use the following syntax:

            SELECT CURRENT_DATE();
			
22) What are the security alerts while using MySQL?
---------------------------------------------------
   Install antivirus and configure the operating system's firewall.

     Never use the MySQL Server as the UNIX root user.

     Change root username and password

     Restrict or disable remote access.

23) How to change a password for an existing user via Mysqladmin?
-----------------------------------------------------------------
     Mysqladmin -u root -p password "newpassword".

24) What is the difference between Unix timestamps and MySQL timestamps?
------------------------------------------------------------------------
    Actually both Unix timestamp and MySQL timestamp are stored as 32-bit integers but MySQL timestamp is 
    represented in readable format of YYYY-MM-DD HH:MM:SS format.

25) How to display Nth highest salary from a table in a MySQL query?
---------------------------------------------------------------------
    Let us take a table named employee.

    To find Nth highest salary is:

        select distinct(salary) from employee order by salary desc limit n-1,1  
    
	if you want to find 3rd largest salary:

        select distinct(salary) from employee order by salary desc limit 2,1  

26) What is MySQL default port number?
--------------------------------------
    MySQL default port number is 3306.

27) What is REGEXP?
-------------------
    REGEXP is a pattern match using regular expression. Regular expression is a powerful way of specifying 
	a pattern for a complex search.

28) How many columns can you create for an index?
-------------------------------------------------
    You can create maximum of 16 indexed columns for a standard table.

29) What is the difference between NOW() and CURRENT_DATE()?
-----------------------------------------------------------
    NOW() command is used to show current year, month, date with hours, minutes and seconds while 
    CURRENT_DATE() shows the current year with month and date only.

30) What is the query to display top 20 rows?
---------------------------------------------
    SELECT * FROM table_name LIMIT 0,20;
	
31) Write a query to display current date and time?
--------------------------------------------------
    If you want to display current date and time, use -

          SELECT NOW();  
    If you want to display current date only, use:

          SELECT CURRENT_DATE();
		  
32) What is save point in MySQL?
--------------------------------
    A defined point in any transaction is known as savepoint.

    SAVEPOINT is a statement in MySQL which is used to set a named transaction save point with a name of identifier.

33) What is SQLyog?
-------------------
    SQLyog program is the most popular GUI tool for admin. It is the most popular MySQL manager and admin tool. 
	It combines the features of MySQL administrator, phpMyadmin and others MySQL front ends and MySQL GUI tools.

34) How do you backup a database in MySQl?
------------------------------------------
    It is easy to backing up data with phpMyAdmin. Select the database you want to backup by clicking 
    the database name in the left hand navigation bar. Then click the export button and make sure that 
    all tables are highlighted that you want to backup. Then specify the option you want under export and save the output.

35) What are the different column comparison operators in MySQL?
----------------------------------------------------------------
     The =, <>, <=, <, >=, >, <<, >>, < = >, AND, OR or LIKE operator are the comparison operators in MySQL. 
	 These operators are generally used with SELECT statement.

36) Write a query to count the number of rows of a table in MySQL.?
-------------------------------------------------------------------
    SELECT COUNT user_id FROM users;

37) Write a query to retrieve a hundred books starting from 20th.?
------------------------------------------------------------------
    SELECT book_title FROM books LIMIT 20, 100;

38) Write a query to select all teams that won either 1, 3, 5 or 7 games?
--------------------------------------------------------------------------. 
    SELECT team_name FROM team WHERE team_won IN (1, 3, 5, 7);

39) What is the default port of MySQL Server?
---------------------------------------------
    The default port of MySQL Server is 3306.

40) How is MyISAM table stored?
-------------------------------
    MyISAM table is stored on disk in three formats.

        '.frm' file : storing the table definition 
        '.MYD' (MYData): data file
        '.MYI' (MYIndex): index file
		
41) What is the usage of ENUMs in MySQL?
-----------------------------------------
    ENUMs are used to limit the possible values that go in the table:

   For example:

          CREATE TABLE months (month ENUM 'January', 'February', 'March'); INSERT months VALUES ('April').

42) What are the advantages of MyISAM over InnoDB?
--------------------------------------------------
    MyISAM follows a conservative approach to disk space management and stores each MyISAM table in a separate file,
	which can be further compresses, if required. On the other hand, InnoDB stores the tables in tablespace. Its further optimization is difficult.

43) What are the differences between MySQL_fetch_array(), MySQL_fetch_object(), MySQL_fetch_row()?
--------------------------------------------------------------------------------------------------
    Mysql_fetch_object is used to retrieve the result from the database as objects while mysql_fetch_array returns 
	result as an array. This will allow access to the data by the field names.

  For example:

       Using mysql_fetch_object field can be accessed as $result->name.

       Using mysql_fetch_array field can be accessed as $result->[name].

       Using mysql_fetch_row($result) where $result is the result resource returned from a successful 
	   query executed using the mysql_query() function.

  Example:

     $result = mysql_query("SELECT * from students");  
     while($row = mysql_fetch_row($result))  
    {  
        Some statement;  
     }  
44) What is the difference between mysql_connect and mysql_pconnect?
--------------------------------------------------------------------
    Mysql_connect() is used to open a new connection to the database while mysql_pconnect() is used to 
    open a persistent connection to the database. It specifies that each time the page is loaded mysql_pconnect()
    does not open the database.

45) What is the use of mysql_close()?
-------------------------------------
    Mysql_close() cannot be used to close the persistent connection. Though it can be used to close connection 
	opened by mysql_connect().

46) What is MySQL data directory?
---------------------------------
    MySQL data directory is a place where MySQL stores its data. Each subdirectory under this data dictionary 
	represents a MySQL database. By default the information managed my MySQL = server mysqld is stored in data directory.

47) How do you determine the location of MySQL data directory?
--------------------------------------------------------------
    The default location of MySQL data directory in windows is C: \mysql\data or C:\Program Files
    \MySQL\MySQL Server 5.0 \data.

48) What is the usage of regular expressions in MySQL?
------------------------------------------------------
    In MySQL, regular expressions are used in queries for searching a pattern in a string.

    * Matches 0 more instances of the string preceding it.
    + matches 1 more instances of the string preceding it.
    ? Matches 0 or 1 instances of the string preceding it.
    . Matches a single character.
    [abc] matches a or b or z
    | separates strings
    ^ anchors the match from the start.
    "." Can be used to match any single character. "|" can be used to match either of the two strings
    REGEXP can be used to match the input characters with the database.
Example:

    The following statement retrieves all rows where column employee_name contains the text 1000 (example salary):

     Select employee_name  
     From employee  
     Where employee_name REGEXP '1000'  
     Order by employee_name  
	 
49) What is the usage of i-am-a-dummy flag in MySQL?
-----------------------------------------------------
    In MySQL, the i-am-a-dummy flag makes the MySQL engine to deny the UPDATE and DELETE commands 
	unless the WHERE clause is present.

50) Which command is used to view the content of the table in MySQL?
--------------------------------------------------------------------
    The SELECT command is used to view the content of the table in MySQL.
	

	
	
	


















