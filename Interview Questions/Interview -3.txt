DevOps Interview Questions in 2020

The following section features the top 20 DevOps interview questions that will 
prepare you for your next DevOps interview:
Question: Can you tell us the fundamental differences between 
DevOps & Agile?
Answer: Although DevOps shares some similarities with the Agile methodology, 
which is one of the most popular SDLC methodologies, both are fundamentally 
different approaches to software development. Following are the various 
fundamental differences between the two:
*	Agile Approach - The agile approach is only meant for development in 
Agile while the agile approach is meant for both development and operations 
in DevOps.
*	Practices and Processes - While agile involves practices such as Agile 
Scrum and Agile Kanban, DevOps involves processes such as CD 
(Continuous Delivery), CI (Continuous Integration), and CT (Continuous 
Testing).
*	Priority - Agile prioritizes timeliness whereas, DevOps gives equal priority 
to timeliness and quality.
*	Release Cycles - DevOps offers smaller release cycles with immediate 
feedback while Agile offers only smaller release cycles without immediate 
feedback.
*	Feedback Source - Agile relies on feedback from customers while feedback 
from self (monitoring tools) is involved in DevOps.
*	Scope of Work - For Agile, the scope of work is agility only but for DevOps, 
it is agility and the need for automation.
Question: Why do we need DevOps?
Answer: Organizations these days are trying to transport small features to 
customers via a series of release trains instead of releasing big feature sets. 
There are several benefits of doing so, including better software quality and quick 
customer feedback.
All such benefits lead to a higher level of customer satisfaction, which is the most 
important goal for any product development project. To do so, companies need to:
*	Increase deployment frequency
*	Lessen lead time between fixes
*	The lower failure rate of new releases
*	In case of new release crashing, have a faster mean time to recovery
DevOps helps in fulfilling all these requirements and thus, achieving seamless 
software delivery. Full-fledged organizations like Amazon, Etsy, and Google have 
adopted DevOps methodology resulting in achieving performance levels that were 
previously uncharted.
With the adoption of DevOps methodology, organizations are able to accomplish 
tens to thousands of deployments in a single day. Moreover, doing so while 
offering first-rate reliability, security, and stability.
Question: What are the important business and technical benefits of 
using DevOps?
Answer: DevOps brings a lot of business and technical benefits to the table. Some 
of the most important ones are listed down as follows:
Business benefits
*	Enhanced operating environment stability
*	Faster delivery of features
*	More time for adding value to the product
Technical benefits
*	Continuous software delivery
*	Faster problem resolution
*	Lesser complex problems
Question: Can you name some of the most-used DevOps tools?
Answer: Following is a list of some of the most widely used DevOps tools:
*	Ansible - A configuration management and application deployment tool
*	Chef - A configuration management and application deployment tool
*	Docker - A containerization tool
*	Git - A version control system (VCS) tool
*	Jenkins - A continuous integration (CI) tool
*	Jira - An agile team collaboration tool
*	Nagios - A continuous monitoring tool
*	Puppet - A configuration management and application deployment tool
*	Selenium - A continuous testing (CT) tool
Question: What is Selenium used for?
Answer:  Selenium is used for continuous testing in DevOps. The tool specializes 
in functional and regression forms of testing.
Question: What do you understand by Puppet in DevOps?
Answer: It is a configuration management tool that is used for automating 
administration tasks. Puppet makes use of the Master-Slave architecture in which 
the two entities communicate via an encrypted channel.
System admins need to perform a lot of repetitive tasks, notably installing and 
configuring servers. Writing scripts for automating such tasks is an option but it 
becomes hectic when the infrastructure is large. Configuration management is a 
great workaround for this.
Puppet helps in configuring, deploying, and managing servers. Not only does it 
make such redundant tasks easier but also cuts a significant portion of the total 
work time. The mature configuration management tool:
*	Continuously checks whether the needed configuration for a host is in place 
or not. If altered, the configuration is automatically reverted back
*	Defines distinct configurations for every host
*	Does dynamic scaling (up and down) of machines
*	Provides control over all the configured machines so that a centralized 
change can automatically get propagated to all of them
Question: What do you understand by anti-patterns of DevOps?
Answer: When a DevOps pattern commonly adopted by other organizations 
doesn't work in a specific context and still the organization continues using it, it 
leads to the adoption of an anti-pattern. In other words, anti-patterns are myths 
about DevOps. Some of the notable anti-patterns are:
*	An organization needs to have a separate DevOps group
*	Agile equals DevOps
*	DevOps is a process
*	DevOps is development-driven release management
*	DevOps is not possible because the organization is unique
*	DevOps is not possible because the people available are unsuitable
*	DevOps means Developers Managing Production
*	DevOps will solve all problems
*	Failing to include all aspects of the organization in an ongoing DevOps 
transition
*	Not defining KPIs at the start of a DevOps transition
*	Reduce the silo-based isolation of development and operations with a new 
DevOps team that silos itself from other parts of the organization
Question: DevOps has something called CI. What is it and what is its 
purpose?
Answer: CI in DevOps stands for Continuous Integration. CI is a development 
practice in which developers integrate code into a shared repository multiple times 
in a single day.
Continuous Integration of development and testing enhances the quality of the 
software as well as reducing the total time required for delivery.
The developer has broken the build if a team member checking in code runs into a 
compilation failure. As such, other developers are not able to sync with the shared 
source code repository without introducing compilation errors into their own 
workspaces.
This disrupts the collaborative and shared development process. Hence, as soon 
as a CI build breaks, it's important to identify and correct the problem immediately.
Typically, a CI process includes a suite of unit, integration, and regression tests 
that run each time the compilation succeeds. In case any of the aforesaid tests fail, 
the CI build is considered unstable (which is common during an Agile sprint when 
development is ongoing) and not broken.
Question: More often than not we hear shift left in DevOps. What is 
it?
Answer: The traditional software development lifecycle when graphed on a paper 
has two sides, left and right. While the left side of the graph includes design and 
development, the right side includes production staging, stress testing, and user 
acceptance.
To shift left in DevOps simply means the necessity of taking as many tasks on the 
right i.e. that typically happens toward the end of the application development 
process and incorporates them into earlier stages of a DevOps methodology.
There are several ways of accomplishing a shit left in DevOps, most notably:
*	Create production-ready artifacts at the end of every Agile sprint
*	Incorporating static code analysis routines in every build
The level of doing the DevOps the right way is directly dependent on the degree of 
shifting left as much as possible.
Question: What does CAMS in DevOps stand for?
Answer: The acronym CAMS is usually used for describing the core creeds of 
DevOps methodology. It stands for:
*	Culture
*	Automation
*	Measurement
*	Sharing
Question: What are the several KPIs used to gauge DevOps 
success?
Answer: KPIs is a contracted form of Key Performance Indicators. In order to 
measure the success of a DevOps process, several KPIs can be used. Some of 
the most popular ones are:
*	Application performance
*	Application usage and traffic
*	The automated test pass percentage
*	Availability
*	Change volume
*	Customer tickets
*	Defect escape rate
*	Deployment frequency
*	Deployment time
*	Error rates
*	Failed deployments
*	Lead time
*	Meantime to detection (MTTD)
*	Mean time to recovery (MTTR)
Question: In your opinion, what are the major benefits of 
implementing DevOps automation?
Answer: Following are the major benefits of implementing DevOps automation:
*	Removal of the possibility of human error from the CD equation (Core 
benefit)
*	As tasks become more predictable and repeatable, it is easy to identify and 
correct when something goes wrong. Hence, it results in producing more 
reliable and robust systems
*	Removes bottlenecks from the CI pipeline. It results in increased deployment 
frequency and decreased number of failed deployments. Both of them are 
important DevOps KPIs
Question: What do you understand by containers?
Answer: Containers are a form of lightweight virtualization that help in providing 
isolation among processes. Containers are heavier than a chroot but lighter than 
a hypervisor.
Question: Microservices are a core part of DevOps. Can you name 
any two popular Java development frameworks for creating 
microservices?
Answer: There are several Java frameworks that allow creating microservices. 
However, Eclipse MicroProfile and Spring Boot stand out from the herd as the two 
leading Java development frameworks used in DevOps for creating microservices.
Question: What do you understand by a Version Control System 
(VCS)? Define its uses.
Answer: A Version Control System or VCS is a system that is capable of 
recording changes made to a file or a group of files over time. Git and Mercurial 
are two of the most popular version control systems. Important uses of a VCS are:
*	Check what was the last modification that caused a problem
*	Compare the changes made over time
*	Identifying who introduced a new issue and at what time
*	Revert a file or files to some earlier state
*	Revert the complete project to a previous state
Question: Git is a popular DevOps tool. Tell us how you will revert a 
commit that has already been pushed and made public.
Answer: There are two ways of doing so:
*	By creating a new commit to undo all changes made by the commit that has 
already been pushed and made public. Following command is used for doing 
so: 
git revert
*	By fixing or removing the bad file in a new commit and then pushing it to the 
remote repository. After making necessary changes to the file, commit it to 
the remote repository using the command: 
git commit -m "commit message"
Question: What are post mortem meetings?
Answer: Many times there is a need to discuss what went wrong during a DevOps 
process. For this, post mortem meetings are arranged. These meetings yield steps 
that should be taken to avoid the same failure or set of failures in the future for 
which the meeting was arranged in the first place.
Question: Draw a comparison between Asset Management and 
Configuration Management.
Answer: The process of monitoring as well as maintaining things of value to an 
entity or group is called an Asset Management.
Configuration Management refers to the process of controlling, identifying, 
planning for, and verifying the configuration items within service in support of 
Change Management.
Question: Can you state and explain various key elements of 
continuous testing?
Answer: Various key elements of continuous testing are:
*	Advanced analysis - Used for forecasting and predicting unknown future 
events
*	Policy analysis - Meant for improving the testing process
*	Requirement traceability - Refers to the ability to describe as well as follow 
the life of a requirement, from its origin to deployment
*	Risk assessment - The method or process of identifying hazards and risk 
factors that can cause potential damage
*	Service virtualization - Allows using virtual services instead of production 
services. Emulates software components for simple testing
*	Test optimization - Improve the overall testing process
Question: Please explain the core operations of DevOps in terms of 
development and infrastructure.
Answer: Core operations of DevOps in terms of development and infrastructure 
are:
*	Application development - Developing a product that is able to meet all 
customer requirements and offers a remarkable level of quality
*	Code coverage - a measurement of the total number of blocks or lines or 
arcs of the code executed while the automated tests are running
*	Code developing - Prepare the codebase required for the product 
development
*	Configuration - Allowing the product to be used in an optimum way
*	Deployment - Installing the software to be used by the end-user
*	Orchestration - Arrangement of several automated tasks
*	Packaging - Activities involved when the release is ready for deployment
*	Provisioning - Ensuring that the infrastructure changes arrive just-in-time 
with the code that requires it
*	Unit testing - Meant for testing individual units or components

